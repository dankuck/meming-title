%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%AI8_CreatorVersion: 10.0%%For: (\601\613) ()%%Title: (flame_033.eps)%%CreationDate: 03.8.5 9:42 PM%%BoundingBox: 13 28 413 322%%HiResBoundingBox: 13.2998 28.7998 412.2002 321.9751%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 1.1%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI3_TemplateBox: 212.5 169.5 212.5 169.5%AI3_TileBox: -74.5 -239.5 497.5 576.5%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 596 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -579.5 745.5 1 1266 977 18 0 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-74.5 -239.5%%AI3_PaperRect:-11 831 585 -11%%AI3_Margin:11 -12 -13 11%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.4 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.4 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 70 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin		Adobe_blend_AI5_vars begin			/_contoneDevice where			{				pop			}			{				/_contoneDevice false def				} ifelse								/_dpiThreshold where			{				pop			}			{					/_dpiThreshold 600 def			} ifelse						/_screenFreqThreshold where			{				pop			}			{					/_screenFreqThreshold 150 def			} ifelse						/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def	/invertXfer	{		[		{			1 exch sub				} /exec load systemdict/currenttransfer get exec /exec load				] cvx systemdict/settransfer get exec			} bd			/spotDict 3 dict dup begin				/nSpots 2 def				/spot1 7 dict def				/spot2 7 dict def		 end			def			composite?			{				/_setgray_ /setgray load def				/_fill_ /fill load def				/_image_ /image load def			}			{				/_setgray_ systemdict/setgray get def				/_fill_ systemdict/fill get def				/_image_ systemdict/image get def			} ifelse		} bd		/terminate		{			currentdict Adobe_blend_AI5_vars eq			{		 end			currentdict Adobe_blend_AI5 eq			{		 end		} if	} if} bd/_compositeSpotDevice where{ begin		_compositeSpotDevice 0 ne {userdict /composite? true put} if end}{	/_compositeSpotDevice 0 def	} ifelse	/nullString () def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/d255- 256 array def0 1 255{	d255- exch 1 d255 2 index get sub put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 89 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where{	pop lv1Fix}{	false} ifelsedef/ccAry1 5 array def/ccTint 0 def/spotColor? false def/colorimage? true def[/tint1Data/tint2Data/spotDict/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/setCustomColor{	dup /ccTint exch store	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/currentCustomColor{	ccAry1 aload pop ccTint} bd/nsetcustomcolor where {	pop}{	/nsetcustomcolor	{		pop setcmykcolor		} bd} ifelse/nsetcustomcolorend where {	pop}{	/nsetcustomcolorend	{	} bd} ifelse/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop				spotColor?			{			dup 1 exch sub /ccTint exch def			ccAry1 4 /Black put			} if		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/bwImage{	setImgSpace cData /_image_ load	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		expandCMYK		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd} if/expandOne{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if} bd/expandSpot{	spotColor?	{		spotDict begin			spot1 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end			spot2 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end	 end	} if} bd/expandCMYK{	4	{		expandOne 4 1 roll	} repeat} bd/colorimage where dup{	exch pop		/ncolorimage where	{		pop	}	{		/ncolorimage {pop colorimage} bd	} ifelse} ifnot{	/ncolorimage where 	{		pop	}	{		/colorimage? false store		/ncolorimage		{			pop pop pop			setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind			_image_ 		sSave restore	} bd	} ifelse} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		colorimage? 		{			expandCMYK		} if		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		bwImage		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		spotColor?		{			spotDict begin				spot1 begin					currentCustomColor makeByte /tintImage exch def					/name exch def					/spot_K exch def					/spot_Y exch def					/spot_M exch def					/spot_C exch def			 end				spot2 initSpotData		 end		} if		currentcmykcolor		4		{			makeByte 4 1 roll		} repeat		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			spotColor?			{				spotDict begin					/spotDict cvx /begin cvx					spot1 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx					spot2 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/spotDict cvx				/nsetcustomcolor cvx			}			{				/setcmykcolor cvx			} ifelse		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg		{			{				_fill			}		}		{			{				_of true eq				{					currentgray 1 ne					{						bwFill					} if				}				{					bwFill				} ifelse			}		} ifelse		def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq				{					setSSave					/cData whiteByte store					/cDataLen 8 store					bwImage					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		/_setgray_ cvx	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if	} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse	} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					_setgray_ 					_fill_ 				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse							nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq			{				/blend? false store			} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt		{			/blend? false def		} if		blend?		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/initSpotData{ begin		/name null def		/tintImage null def		/tintValue null def		/spot_C  null def		/spot_M  null def		/spot_Y  null def		/spot_K  null def end} bd/getRData{	/colorType gMark store	_compositeSpotDevice 0 ne	{		spotDict begin			spot1 initSpotData			spot2 initSpotData	 end		/spotColor? colorType 2 eq colorType 3 eq or def	} 	{		/spotColor? false store	} ifelse	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			_compositeSpotDevice 0 ne			{				spotDict begin					spot1 begin						/name 3 index def						/spot_K 4 index def						/spot_Y 5 index def						/spot_M 6 index def						/spot_C 7 index def				 end			 end			} if			7		} ifelse	} ifelse	/tmp exch def	tmp index 100 div /endPoint xs	_compositeSpotDevice 0 ne	{		tmp 2 add index 3 eq		{			/tmp tmp 4 add def			tmp index dup 			spotDict begin				spot1/name get ne				{					spot2 begin						/name exch def						/spot_K tmp 2 add index def						/spot_Y tmp 3 add index def						/spot_M tmp 4 add index def						/spot_C tmp 5 add index def				 end				}				{					pop				} ifelse		 end		} if	} if	/color? colorType 0 gt store		colorType 3 eq	{		/tint2Data gMark store	} if		colorType 2 ge	{		/tint1Data gMark store	} if	_compositeSpotDevice 0 ne	{		spotDict begin					colorType 2 ge			{				colorType 3 eq				{					spot2 begin						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def						name null eq {/name /Black def} if				 end				} if				spot1 begin					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def					colorType 2 eq 					{						name null eq 						{							/name spot2/name get def							spot2/name null put						} if					}					{						name null eq {/name /Black def} if					} ifelse			 end			} if	 end	} if		/cData gMark store	setCDataLen	colorType 0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		_eo {eoclip} {clip} ifelse		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/bwImage		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq	{		0	}	{		bDataLen ubAxis div	} ifelse	store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where dup	{		exch pop _compositeSpotDevice 1 ne and	} if	{		0 0 bInc 1 /rectfill cvx		}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		/_fill_ cvx	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	spotColor? {nsetcustomcolorend} if		grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt		{			exch		} if		pop store		/pChange ubAxis 0 eq		{			0		}		{			bDataLen ubAxis div		} ifelse		store		pChange .5 gt noImg not and dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	spotColor? {nsetcustomcolorend} if	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put end} if} bd/Bn{1 add dictdup nullString null put/_bn xs} bd/Bd{Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store			/_fill			{				_of true eq				{					currentgray 1 ne					{						__fill					} if				}				{					__fill				} ifelse			} def	} ifelse	/fill	{	} def	} bd	/BB	{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 kPc1 1 1 1 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(\203\214\203C\203\204\201[ 1) Ln0 A0 O0 g2 J 0 j 1 w 2 M []0 d170.2998 321.1001 m174.5 320.6001 179.8999 322.2002 184.1001 320.5 C186.2002 320.1001 187.7998 321 189.5 320.1001 C194.7998 320.5 199 320.2998 204.1001 319.5 C205 320.8999 206.2998 319.2998 207.3999 319.2998 C209.6001 319.8999 211.8999 319.8999 214.1001 319.2998 c215.5 319 216.7002 318.2998 217.7998 319.1001 C218.8999 318.2998 220.1001 318.3999 221.2998 317.7998 C223.2998 317.3999 225 317 227.1001 316.3999 C229.5 317.3999 230.7998 314.5 233.2998 314.8999 c234.8999 315.3999 236.6001 314.1001 238.2002 314.2998 C241.2002 313.6001 244.7998 312.2998 248.1001 312.2998 C250.1001 311.7998 252.8999 311.5 254.5 310.3999 C257.2002 310.5 259.1001 309.5 261.8999 309 C262.7002 307.6001 263.8999 310 264.2998 308.3999 C267.2998 308.6001 270.3999 307.2002 273.2002 307.1001 C275.2002 306 278.7998 306 281.2002 305.5 C282.7998 304.7998 283.2002 304.2998 284.8999 304.7002 C287.5 303.2998 290.8999 302.8999 293.7998 303.3999 C294.7002 300.7998 298.2998 301.7998 300.1001 300.1001 C302 300.1001 303.7002 298.7002 305.7002 298.2998 C309 299.6001 311 296.2998 314.1001 297.2998 C315.7998 296.6001 318.3999 297 319.7002 295.2002 C321.2002 295 323.3999 295 324.6001 293.6001 C326.2998 293.3999 326.8999 292.1001 328.7002 292.2998 C330.7998 291.5 332.5 291.7998 334.5 290.8999 C336 289.3999 337.7998 290.3999 339.3999 289.2002 C341.6001 289.7002 343.8999 289.2998 345.6001 288 C348.2998 289 349.6001 285.5 352.3999 285.8999 C354.6001 283.7998 357.1001 285.8999 359.7998 284.8999 C362.6001 283.2002 366.3999 283.1001 369.5 282.6001 C370.7998 281.3999 372.7002 282.6001 374 281.6001 C375.7998 281.2998 377.6001 280.5 379.2998 280.7998 C380.7002 279 383.5 280.1001 384.7002 278.2998 C386.2998 278.2002 387.8999 276.8999 389.7998 276.8999 C392.1001 275.7002 395.1001 276.1001 397 273.7998 C398.7002 273.6001 400.2002 271.3999 400.8999 270.5 C401.5 268.5 403.6001 267.3999 403.6001 265.3999 C405.2002 262.8999 405.5 259.6001 406.5 257.1001 C405.7998 255.2002 409.5 254.3999 408.2998 252 C409.5 250.8999 408.6001 249.2998 409.3999 248.2998 C409.2002 246.3999 410.6001 244.7998 410.3999 242.8999 C410.7998 240.7002 411.6001 237.8999 411 235.5 C412.3999 233.1001 411.5 230 412 227.7002 C411.2998 226.5 411.5 225.3999 412.2002 224.2002 C412.2002 222.7002 411.2998 221.1001 412.2002 219.7002 C411.2998 218.1001 412.2998 216.3999 411.3999 214.7998 C412.1001 212.8999 412.3999 210.8999 412.2002 208.7998 C411.8999 208.8999 411.7002 208.6001 411.3999 208.3999 C412.5 206.7002 412 204.1001 411.7998 202.2002 c411.2002 198 411.7002 193.7998 411.7998 189.5 C410.8999 189.2998 411.1001 188.2002 410.7998 187.6001 C411.2998 187.2998 411.6001 186.7998 411.3999 186.2002 c411.1001 185.2998 411.1001 184.2002 411.3999 183.1001 C410.8999 178.5 410.7998 173.5 410 169.2998 C410.3999 168.3999 410.1001 166.3999 410.2002 165.3999 C408.7002 163.2002 410.8999 161.2998 409.3999 159 C409.2998 157.8999 409.1001 156.7002 409.2002 155.5 C407.1001 153.5 409.7998 151.1001 407.7002 149.1001 C408.2998 147.5 406.6001 145.6001 407.7002 144 C406.7998 143.1001 407.5 141.5 406.7002 140.1001 C406.7002 137 405.2998 136 405.2998 133.1001 C404.7002 132.3999 405.8999 131.7002 405.2998 130.7998 C403 129.5 404.5 127.3999 403.2002 125.7002 C404.3999 123.2002 400.5 121.8999 402.2002 119.5 C400.2002 118.7998 401.7002 116.7998 400.5 115.3999 c398.3999 113.2998 399.7002 110.5 397 108.3999 C396.8999 106.3999 394.7002 105 395.3999 102.8999 C394.6001 101.8999 393.5 100.7002 393.7002 99.6001 C392.5 98.8999 391.8999 97.1001 391.8999 95.8999 C390.5 94.2002 390.5 92 389.2002 90.2998 c387.2998 88.5 387.7998 85.3999 385.1001 83.7002 C384.3999 81.7998 383.1001 80.7002 383 78.6001 C381 77.6001 382.2002 74.3999 379.5 74.1001 C379.2002 72.7002 378 71.6001 376.5 71 C375.7002 69.3999 374.3999 67 372.2998 66.2002 C371.6001 66.2998 372.2002 65.3999 371.7002 65.2002 C369 63.1001 365.7998 60.2998 362.7002 58.2002 C359.2002 58.2998 356.8999 55.6001 353.3999 55.7002 C352.5 55 351.1001 54.7002 350.1001 54.7002 C348.7998 53.5 347.2002 54.6001 345.7998 53.7002 C342.6001 52.6001 339 55 335.7002 53.2998 C335.2002 53.7998 334.5 53.2998 334.1001 52.8999 C334.1001 52.7002 333.2998 53.2002 332.7998 53.2998 C329.2002 53.5 325.2998 54.6001 321.5 54.2998 c319.8999 54.3999 319.2002 55.8999 317.6001 54.8999 C314.6001 55.7002 312.7998 55.2002 309.6001 56.2002 c306.2998 56.5 302.6001 55.3999 299.2998 56.3999 C296 54.7998 293 57.3999 289.2002 56.6001 C287.2998 58 283.5 56.2998 281.3999 58 C280.2998 57.7998 279 57.3999 278.2998 58.3999 C274.5 58 271.1001 60 267.6001 59.2002 C265.3999 59.2998 263.7998 60.7998 261.5 59.8999 C259.7002 60.8999 257.8999 60.7998 255.7002 61.1001 C252.6001 60.7998 250.8999 62.6001 247.8999 61.8999 C246.2998 62.5 244 61.6001 242.5 62.5 C238 62.7002 234.3999 63.7998 230.2002 64 C225 65.2002 218.3999 64.8999 213.1001 65.7998 C211.5 64.7002 210.6001 66.1001 209 66.2002 C208.8999 66.1001 208.7002 66 208.6001 65.7998 C206.2002 65.7998 203.8999 66.8999 202 65.6001 C200.7998 66.5 198.7002 65.6001 197.1001 65.6001 C195 64.2002 191.6001 65.5 190.1001 63.3999 C188.3999 62.2998 185.8999 63.1001 184.5 61.1001 C181.1001 60.2002 178.7002 57.6001 175.5 56.6001 C175.1001 55.3999 173.2002 55.7998 173 54.5 C171.7998 54.2998 170.2998 54.2998 169.7002 52.8999 C169.8999 52.2002 168 51.7998 167.8999 50.7998 C165.2002 48.6001 162.1001 47 159.7998 44.2002 C158.5 43.3999 156 43.1001 156.1001 40.8999 C153.3999 41.6001 153.3999 38.2002 150.7998 38.5 C150 35.8999 146.1001 35.2002 144.6001 33.5 c142.3999 30.8999 138.2998 29 133.8999 28.7998 C132.1001 29.2998 130.1001 29.2998 128.7998 30.8999 C127.2998 30.8999 127 32.7002 125.8999 33.2998 C123.7002 35.6001 125.2002 39.8999 124.5 43 C124.8999 44.7998 125.5 47.2002 126.7002 48.7998 C126.5 50.2998 127.1001 52.1001 126.8999 53.7002 C128.5 55.1001 127.7002 57.8999 129.3999 59.5 C128.7998 60.8999 130.7002 61.7002 130 62.8999 C130.2002 63.6001 129.3999 64.8999 130.6001 65.6001 C130.2002 66.7998 130.7998 68.2998 129.3999 69.1001 C126.2998 70 123.2002 68.2998 120.2998 68.2998 C116.7002 67 112.1001 66.8999 108.6001 65.3999 C107.3999 66 105.7998 66 104.7002 66.2002 c102.6001 66.7002 100.1001 68.5 99.6001 69.1001 C99.1001 69.8999 100.1001 71.2002 99.2002 71.7998 C99.1001 73.6001 97 73.2998 96.1001 74.5 C90.8999 75.2998 86.1001 77.8999 81.1001 77.7998 c78.3999 78.1001 76.3999 78.7998 73.8999 78.7998 C72.1001 79.3999 70.6001 80.2998 68.7002 80 c67.3999 79.7002 67.3999 82.2998 66 80.7998 C65 80.7998 64.6001 80.7002 63.7998 81.5 C60.5 81.8999 58.2002 82.6001 55.2998 83.1001 C53.7998 85.1001 50.7998 83.7002 49.3999 85.6001 C48.2998 85 47.2002 86.7998 46.2998 85.7998 C44.8999 88 41.2998 87 39.5 88.7002 C36.8999 88.7002 34.7998 90 32.5 90.7002 C29.2002 93.5 24.2998 92.6001 21.2002 95.8999 C18.2998 96.2002 18.8999 99.1001 16.7002 100.2002 C15.5 101.6001 14.8999 103.7998 14 105.5 C13.8999 108.7002 12.2998 112 13.7998 115 C13.2998 118.3999 14.8999 121.2002 14.6001 124.7002 C15.7002 126.7002 15.8999 130 16 132.5 C17 134 15.7002 135.7998 17.5 137 C16.7002 139.1001 18.8999 141.2002 18.7002 143.3999 C19.6001 143.7002 19.5 144.8999 19.7002 145.6001 C19.7998 146.6001 21.1001 147 21.2002 148.1001 C19.8999 150.6001 23.6001 151.1001 22.6001 153.5 C22.7998 154.7002 23.8999 155.2998 23.5 156.5 C25.3999 158.2002 25.1001 160.7998 25.8999 162.8999 C25.1001 165.2002 27.3999 167.3999 26.8999 169.7002 C28.7998 171.2002 26.2998 173.7002 28.6001 175.1001 C28.2998 176.5 28.8999 177.5 29.6001 178.6001 C28.7998 179.3999 29.6001 181.1001 29.6001 182.2998 C30.1001 183.3999 29.2998 185.7002 31.1001 186.6001 C30.1001 187.2998 31.3999 188 31.2998 188.7998 C32.3999 189.3999 32.5 191.2998 32.7002 192.7998 C32.1001 196.6001 36.2998 198.6001 35.7998 202 C36.8999 203.2998 35.2998 204.2002 36.3999 205.5 C36.2998 207.7998 38.1001 208.7998 38.1001 211.1001 C39.1001 212.1001 39.3999 213.1001 40.1001 214.1001 C40 215.7002 41.5 216.7998 41.1001 218.2998 C42.7998 219.8999 41.1001 222.1001 43 223.3999 C43.3999 225.7002 44.8999 228 45.5 230.3999 C47.8999 231.5 45.7002 234.7002 48.1001 236 C48.8999 237.2002 48.7998 237.8999 49.3999 239.3999 C51 240.7998 50.2998 243.2998 51.6001 244.7998 C51.1001 246.6001 52.5 247.1001 52.8999 248.5 C54.1001 249.7002 54.2002 251.1001 55.1001 252.3999 C54.7998 254.5 57.2998 256.2002 57 258.3999 C56.5 259.7998 58.7998 259.6001 58.2002 261 C58.7998 262.8999 59.2998 264.2002 60.7002 265.7998 C61.1001 267.1001 62.2998 268.3999 62.2998 270.1001 C62.8999 270.7002 62.6001 270.7002 63.3999 271.2998 C63.7002 274.1001 65.5 276.6001 67.5 278.2998 C67.7002 278.7998 66.8999 279.2002 67.5 279.3999 C68 280.2002 68.7002 281.3999 68.7002 282.6001 C71.5 284.1001 71.5 287.1001 74.1001 288.6001 c75.2998 289.6001 75.5 291.3999 76.5 292.1001 C78.5 295.8999 81.3999 299.2998 84.2998 302.2002 C86.2998 302.8999 86.2998 305.1001 88.7002 305.7002 C89 307.7998 91.7998 307.2002 92.6001 309.3999 C96.2998 310.3999 99.6001 313.2002 103.5 313.2998 C103.8999 314.1001 105 314.2002 105.8999 314.1001 C106.7002 315.2002 107.7998 315.6001 108.7998 315.3999 C109.2998 316.2998 110.3999 315.2998 110.8999 316.2002 C111 316.1001 111.2002 315.8999 111.2998 315.7998 C113.8999 316.6001 116.5 318 119.1001 318 C120.7998 319.7002 122.7002 318.2002 124.2998 319.2998 C128.1001 318.3999 131.2998 321.7002 134.7002 320.1001 C138.3999 321 142.6001 320.7998 146.5 321.1001 c154 322.5 161.2998 321.8999 169.1001 321.5 C169.3999 321.1001 170 321.6001 170.2998 321.1001 Cf1 g171.2002 309.3999 m174 309.6001 176.3999 309.8999 179.3999 309.2002 C183 310.2002 186.7998 308.2002 190.2998 308.7998 C191.3999 307.7002 193.1001 310 194.2002 308.3999 C196.1001 309.7002 197.3999 307.6001 199.1001 308.6001 C200.2002 308.1001 201.2998 308.3999 202.2002 308.6001 C203.2002 308.1001 204.7002 307.6001 205.5 308.2002 C209.2998 307 213.1001 307.6001 216.7998 306.2998 C223.7002 306.7998 229.3999 303.8999 236.3999 303.3999 C241.3999 301.6001 246.6001 301.3999 251.6001 300.1001 c254.1001 299.7998 255.6001 298.6001 258 297.8999 C259.3999 298.3999 260.7002 297.8999 262.2998 297.5 C264.5 295 267.7002 297.2002 270.1001 295.3999 C272.3999 295.5 274.2002 293.6001 276.2998 293.7998 C279.2998 294.6001 281.5 291 284.7002 291.1001 c287.5 291.1001 290.2002 291.3999 292.2998 289.2002 C295.2998 289.2998 298.1001 287.5 301.3999 287.6001 C303.8999 286.3999 306.6001 285.2002 309.3999 285.2998 C311.1001 284.2002 313.2002 283.2998 315.2002 283.5 C316.2998 283.2998 317.3999 282.1001 318.6001 282.8999 C319 283.1001 319.3999 282.5 319.8999 282.3999 c321.5 282.2998 322.8999 281.6001 324.2002 280.7998 C325.6001 280.7998 327.2002 279.8999 328.8999 280 C331.6001 279.5 333.8999 278.2998 336.2998 277.2998 c338.7002 275.8999 340.3999 277 342.8999 276.1001 C344 275 345.7002 275.7002 346.6001 274.3999 C349.7002 274.8999 352.1001 271.8999 355.2998 272.6001 C358.3999 271.2002 362.1001 271.2998 364.8999 269.2998 C365.7002 269.3999 365.8999 269.2998 366.3999 268.7002 C368.8999 268.8999 370.6001 267.5 372.7998 267.2002 C374.7998 266.2002 377.2998 265.6001 379.2998 264.1001 C380.7998 262.5 384.1001 262.2002 384.5 259.6001 C385.1001 259 385.6001 259.2002 386.1001 258.3999 C385.7998 256.7998 388.6001 256.3999 387.3999 254.7002 C388.2998 253.7002 388.7998 251.7002 389.2002 250.1001 C391.5 249 388.8999 246.2002 391.5 245 C391.1001 243 392.7998 241.6001 392.5 239.8999 c392.3999 238.8999 393.7998 238.1001 392.8999 237.3999 C394.2002 235.3999 393.7002 233.1001 394.1001 231 C392.8999 230.2998 394.6001 230.2998 394.6001 229.6001 C395.3999 227.7002 394.6001 226.1001 395.2002 223.7998 C395 222.7002 395.5 220.7998 394.7998 219.7002 C395.3999 218.1001 395.1001 215.7998 395.7998 214.3999 C395.3999 213.6001 395.7998 212.7002 395.3999 211.7002 C395.6001 207.7998 394 205 395.6001 201.3999 C395.3999 200 394.8999 198.7002 396 197.5 C394.6001 191.1001 396.2002 185.2998 395.3999 179.2002 c395.2998 177.3999 394.7002 175.2998 395 173.7998 c395.6001 170.7002 393.7998 168.6001 394.1001 165.6001 C393 164.6001 394.6001 163.5 393.5 162.2998 C393.7998 160.7998 392.8999 158.7998 393.5 157.3999 C392.2998 155.8999 393.6001 153.8999 392.1001 152.3999 C392.5 152 393 150.8999 392.5 150.2002 c391.5 149 392.2002 147.7998 391.7002 146.7002 C389.7002 144.7998 391.8999 142.7998 390 140.8999 C391.5 137.7002 388.1001 135.7998 389 132.8999 C387.8999 131.3999 389.6001 129 388 127.7002 C388.1001 126.5 386.5 125.7002 387.3999 124.5 C387.2002 123.7998 386 122.8999 386.7002 122.3999 C385.6001 121.7002 385.5 120.2998 385.2998 119.1001 C383.2998 118.2002 384.3999 115.3999 382.6001 114.6001 C383.2002 112.1001 380.7998 110.3999 380.6001 108 C379.7998 105.7998 378.2002 103.5 377.1001 101.2002 c376.2998 99.2998 374.2998 97.6001 374.6001 95.5 C373.3999 94.2998 371.2998 93.2998 372.1001 90.8999 C369.5 87.7998 367.7002 83.2998 364.7002 80.3999 C363.3999 78.5 361.2998 77.3999 360.3999 75.2998 C357.7998 75.1001 357.8999 72.2998 355.5 71.6001 C353.7002 70.1001 351.2002 70.2998 349.2998 69.1001 c347.6001 68.3999 346.1001 68.8999 344.6001 67.8999 C338.8999 68.3999 332.5 67.1001 327.2998 66.7002 C327.1001 66.8999 326.8999 67.1001 326.7002 67.2998 C324.2002 67 321.6001 66.8999 319.2998 68.1001 C316.7002 68.6001 314.7002 67.8999 312.1001 68.7002 C311.8999 68.5 311.7002 68.2998 311.3999 68.1001 C304.5 68.2998 296.3999 69.8999 289.3999 69.2998 C287.6001 69.7998 285.8999 69.2998 284.2998 69.7002 C281.3999 69.3999 278.7002 70.2002 276.1001 71.3999 C272.6001 70.8999 269.5 72.2002 266.2002 72.6001 C265.7998 71.6001 264.7998 72.2002 264.1001 72.2002 C260.7002 73.5 257.5 73 253.7998 74.2998 C250.1001 73.6001 247.1001 76 243.3999 75.7002 C240.8999 77.1001 237 76.2998 234.7002 77.1001 C231.7002 77.2002 227.7998 78.2998 224.2002 78.7998 C221.2002 78.2002 217.2002 79.7998 213.8999 79.7998 C211.8999 78.7998 209.1001 80.8999 206.7002 79.6001 C205.3999 81 203.6001 79.5 202.2002 80.6001 C200.3999 79.2002 197.7002 81.7002 195.6001 80.7998 C194.7998 80.7998 192.7998 81 191.8999 80.6001 C190.3999 81.1001 188.8999 80.7002 187.2002 80.2002 c183.5 79.6001 180.1001 76.8999 176.2998 75.8999 c173.5 75.2998 171.7002 73.8999 169.2998 72.3999 C166.8999 73.2998 167.1001 69.7998 164.7998 69.7002 C163.3999 66.2998 159.6001 66.3999 157.6001 64 C156.1001 63 154.2998 62.7002 153.2998 61.1001 C153 61.1001 152.7998 61 152.6001 61.2998 C151.5 60.2002 149.8999 59.8999 149.1001 58.6001 C148.7998 58.2002 148.2002 58.5 147.7002 58.3999 C148.7002 60.6001 147.2998 63.6001 150 65 C149.5 66.8999 152 67.3999 151.3999 69.1001 C152.8999 69.6001 153.2002 71.5 153.8999 72 C155.3999 74.2002 156.6001 76.1001 158 78.3999 C157.3999 79.6001 159 79.8999 159.2002 80.7998 C158.7998 83.2998 160.5 84.7998 159 87 C159.1001 88.6001 158.7998 89 158.3999 90.2998 C156.1001 93.7002 152.1001 96.2002 147.8999 95.7002 c143.8999 95 140.6001 92.7998 137.2002 90.7002 c135.2998 89.7002 133.6001 87.8999 131.7002 86.7998 C129.3999 87.7998 127.3999 85.2002 124.8999 86.3999 C123.5 85.6001 122.8999 86.2998 121.3999 85.7998 c119.7998 85.3999 117.7998 86.3999 116.2002 85.2002 C113.2998 86 110.1001 85.2998 106.7998 85.7998 c104.8999 86.2998 103.3999 86.1001 101.6001 86.7998 C100.1001 87.1001 98.7002 87.1001 97.5 86.7998 C96.1001 87.7998 94.6001 87.2002 93.3999 88.7002 C91.5 89.7998 89.2002 87.8999 87.7998 90.2998 C85.6001 89.7998 84.2002 92 82.5 91.7002 C78.7998 93.1001 76.3999 96.1001 72.2002 96.7002 C71.3999 98.1001 70.6001 98.8999 69.2998 100 C69.2002 99.8999 69.1001 99.7002 68.8999 99.7998 C68.2998 101.7002 67.2002 103.7002 67.1001 105.5 C67.6001 107.2002 66 109.2002 66.8999 111.2998 c67.8999 113.5 65.6001 115.7998 67.7002 117.7002 C67.7002 119.7998 67.6001 121.1001 68.5 122.7998 C67.8999 125.3999 68 127.1001 69.2998 129.3999 C68.5 130 69.1001 130.8999 69.5 131.5 C69.2998 134 68.7998 138.2002 71 140.5 c71.2002 140.8999 71.5 142.2998 71.3999 143 C73.5 144.2998 71.2002 146.2998 72.2002 148.2998 C73.7002 148.2998 73.2998 150.2002 73.8999 151.2002 C74.5 154.3999 75.1001 157.7998 76.5 160.7002 C76.1001 161.6001 76.8999 161.7002 76.8999 162.5 C76.1001 165.7998 78.5 169.1001 77.2998 172 C78.6001 173.8999 78.2998 175.7002 79.2002 177.8999 C79 178.7002 78.8999 180.2998 79.7998 180.6001 C80 180.5 80.1001 180.7002 80.2002 180.7998 C78.8999 182.1001 81 183.1001 80 184.7002 C82.1001 188 81 192 83.2998 194.7998 C82.2998 195.7998 85 195.8999 84.2998 197.2998 C84.7998 199.2002 85.8999 201.1001 85.7998 203 C87.2002 203.2998 87.3999 204.7998 87.7998 205.8999 C87.2002 208.8999 90.7002 210.8999 89.8999 213.8999 C90.8999 214.6001 89.8999 215.3999 90.5 216.2002 C92.3999 217.2998 91.6001 219.6001 92.7998 221.1001 C93.7002 223.7002 93.6001 226.3999 95.7002 228.1001 C96.5 229.8999 95.7998 231.7002 97.5 232.8999 C97.3999 234.2002 98.7002 235.3999 98.5 237 C99.5 238.3999 100.1001 240 100.3999 241.7002 C101.3999 242.6001 100.6001 244.7002 102 245.6001 C102 247 103.1001 248.1001 103.2998 249.1001 C103.1001 250.7002 104.7002 252 104.1001 253.2002 C107.5 255.3999 105.7998 259.3999 108 262.2998 C107.7002 262.7998 108.3999 262.7998 108.6001 263.1001 C107.6001 264.8999 110 265.7998 110.1001 267.6001 C110.6001 269.2998 112.2998 270.3999 112.5 272.2002 c112.5 272.3999 112.6001 272.6001 112.2998 272.7998 C111.2998 272.1001 110.7002 270.6001 109.8999 269.5 C109.2002 270.8999 112.2002 272.6001 110.8999 274 c110.2002 274.7002 112.2998 275.8999 110.7002 276.7002 C109.7002 276.1001 108.8999 275.1001 108.6001 274 C105.8999 272.7002 104.7002 269.2002 102.8999 267 C102.1001 267.7998 104.8999 269.2998 102.8999 269.7002 C102.2998 268 101.2002 267.1001 100.7998 265.3999 C100.7002 265.7998 100.2998 266.1001 100 266.3999 C99.2998 266.2998 98.7002 265.5 98.2998 265 C98.2002 264.5 98 263.6001 97.5 263.1001 C97.7998 260.8999 95.8999 260.5 95.7002 258.3999 C94.6001 257.7002 93.5 256.6001 93.3999 255.2998 C92 254.7002 91.8999 252.2998 90.8999 251.6001 C90.3999 250.2998 89.2002 250 89.1001 248.5 C89.2998 246.6001 86.8999 246.2002 86.7998 244.6001 C85.5 243.3999 86.1001 241 84.5 240.2998 C84.2998 239.7998 84.2998 239.2002 83.7002 238.7998 C84.2002 240.1001 83.8999 240.8999 85 241.8999 C84.7998 242.8999 86.1001 243.2998 85.7998 244 C88.2002 244.5 85.2002 246.8999 87.6001 247.5 C87.5 248 87.7998 248.3999 88.2998 248.5 C89.1001 252 92.2998 255.3999 92.6001 259 C89.7998 255.7998 88.8999 252 86.6001 248.5 C86.5 246.5 84.2998 245.6001 84.5 243.7998 C84.2002 241.5 82 239.2002 81.7002 237 C81.2998 237 81.2002 236.6001 81.2998 236.3999 c81.2998 236.1001 81.1001 235.7002 81.5 235.5 C82.1001 235.7002 82.2002 235.2998 81.8999 234.8999 C81.7002 236.2998 80.6001 234.2998 80 233.7002 c79.2002 232.6001 79.2998 230.7002 78 229.6001 C77.6001 228.2002 76.7998 227.2002 76.8999 225.7002 C75.7002 224.5 75.7002 222.7002 74.8999 221.1001 c74 218.7002 73.3999 216.1001 72.2002 213.7002 c71.7998 212.6001 71.2998 211.1001 71.2002 209.6001 C69.6001 207.1001 69.2002 204 68.2998 201.3999 C67.2002 199.7002 67.2002 197.3999 65.7998 196 C65.3999 193.2998 64.1001 189.7002 62.7002 187 C60.1001 184.7002 61.1001 181.1001 59.5 178.3999 c58.3999 176.2998 59.1001 175 58 173 C58.2002 172 56.7998 171.3999 57.6001 170.2998 C56.5 169.6001 57.8999 168.6001 57.2002 167.7002 C56.7002 165.6001 57.2998 163.3999 55.7002 161.5 C55.7998 158.6001 54.2998 156.2998 53.1001 153.8999 C51.7002 152.3999 50.6001 150.2002 50.7998 148.1001 C47.8999 147.1001 50.6001 144.2998 48.1001 143.2002 C46.5 140.1001 45.7998 136.2998 44 133.1001 C43.8999 130.5 42.6001 128.8999 42.6001 126.2998 C41.3999 125.7998 42.6001 123.8999 41.2998 123.2002 C41.2002 121.6001 41 119.5 39.8999 118.1001 C39.5 117.3999 40.7002 116.6001 39.5 116.3999 C39.1001 114.6001 40.3999 113.1001 38.2998 111.7002 C37.8999 110.6001 39.7002 110 38.5 109 c36.6001 108 39.1001 106.2002 37.3999 104.8999 C37.8999 103.7002 39 102.2998 38.8999 100.6001 C39.3999 100.3999 40.5 99.2998 39.1001 100 c35.8999 101.2002 34.7998 104.1001 33.8999 107 C34.2998 107.2002 34.3999 107.6001 34.3999 108 C32.8999 109.5 34.7998 111.8999 32.7002 112.8999 C33.2998 114.7002 33.2998 117 33.5 118.7002 c33.8999 120.6001 33.1001 122.6001 34.6001 124.5 C34 126.6001 36.5 128 35.6001 129.7998 C36.3999 130.7002 36.3999 132.2002 37.6001 132.5 C37.2002 134 38.5 135.1001 38.1001 136.6001 C39 137.2002 39.1001 138.7998 39.2998 139.7002 C40.1001 141.2998 41.2002 143.2998 40.7002 145.2002 C41.6001 145.6001 41.5 148.1001 42.3999 149.2998 C42.7998 152.2002 43.2002 155.2002 43.6001 157.7998 C44.2002 158.3999 45.3999 159.2998 45.1001 160.2998 C45.7998 160.7998 44.8999 161.7998 46.1001 162.2998 C45.7998 163.2998 46.2002 163.7002 46.5 164.7998 C48.1001 165.1001 46.5 166.2002 47.2998 167 C47.8999 170.7002 47.6001 173.7998 49.2002 177.2998 C49.3999 179.6001 50.2998 182 51.3999 184.1001 C49.7998 186.3999 53.6001 187.2002 52.5 189.2998 C52.7998 190.7998 53.3999 192.7002 54.2998 194.2002 C54 195.7002 56 197.1001 55.5 198.7002 C57.8999 200.3999 56.5 203.3999 58.6001 205.1001 C58.2998 208 61.6001 209.2002 61.2998 211.8999 C61.7002 213.2002 62.6001 214.5 62.5 215.7998 C63.1001 216.2998 63.2002 217.7002 63.3999 218.8999 c63.3999 219.2002 63.2002 219.7002 63.7998 219.5 C63.2998 223.5 67.7998 226.1001 67.2998 230.3999 C69.1001 232.1001 67.2998 233.7002 69.2998 235.1001 C69.2998 237.2998 72.2002 238.5 71.3999 240.7002 C73.7002 242.7998 74.5 246.2998 76.1001 249.1001 C75.8999 251.1001 78 251.7998 78.3999 253.3999 C79.8999 255.2998 80.2002 257.1001 81.8999 258.7998 C82 260.8999 84.2998 262.1001 84.1001 264.2998 C84.8999 264.7002 84.5 265.2998 84.7998 265.7998 C88 269.5 89.2998 274.1001 92 278.1001 C92.8999 278 92.8999 279.6001 93.7998 280 C94.5 281 95.8999 281.2002 95.7002 282.6001 C96.7002 284.3999 99.5 285.6001 99.3999 288 C100.2002 289.3999 102.1001 289.6001 102.2002 291.5 C104.1001 294.2998 106 296.1001 108.6001 298.1001 C110.1001 298.2002 110.6001 299.3999 111.5 300.2998 C115.6001 301.8999 120 302.8999 123.7998 305.1001 C126.3999 304.6001 128.8999 307 131.8999 306.7002 C132.8999 307.6001 134.7002 306.7002 135.6001 308.2002 C137.3999 307.2998 139.8999 308.7002 141.8999 309.3999 C144.7002 309 147.7002 309.1001 150.2002 309.7998 C150.7002 309.7002 151.5 310.1001 151.7998 309.3999 C153.5 309.5 155.8999 310.1001 157.6001 309.6001 C159.3999 310.1001 161.6001 309.3999 163.5 310.2002 C165.6001 308.7998 168.7002 310.3999 171.2002 309.3999 Cf0 g123.3999 297.7002 m123.5 298.7002 124.6001 297.8999 124.8999 298.7002 C124.3999 298.3999 124.2002 297.7002 123.3999 297.7002 Cf122.2002 294.7998 m120.2002 293.2002 119.3999 290.2998 117.1001 289 C116.8999 288.3999 116.6001 287.7998 116 287.3999 C115.8999 287 115.2002 287.2998 114.7998 287.2002 C115.2998 288.1001 116.2998 288.7998 116.3999 289.7998 C117.1001 289.7002 117.2998 290.5 117.5 290.8999 c118.2998 293 119.7002 295 121.6001 296 C121.8999 296.7002 122.6001 297.1001 123.2002 297.2998 C123.1001 296.2998 122.5 295.6001 122.2002 294.7998 Cf120.2998 289.2002 m120.2002 289 120 289 119.7002 289 C119.2002 289.8999 121.8999 290.2998 120.2998 289.2002 Cf120.7998 286.6001 m120 286.5 119.3999 286 118.8999 286.6001 C117.8999 286 117.6001 284.7002 116.6001 284.1001 C116.5 285.7998 118.3999 287.5 119.5 288.6001 C119.7002 287.7998 121.8999 287.7002 120.7998 286.6001 Cf113.1001 283.8999 m113.2002 283.8999 113.2998 283.8999 Y113.2998 283.7998 113.2998 283.6001 113.1001 283.8999 Cf116 282.6001 m114.8999 282.6001 115 281.2998 114.2002 281 C114.6001 281.6001 115.5 284.7002 116 282.6001 Cf109.6001 281.2002 m109.7002 281 109.2998 280.7998 109 280.7998 C108.5 281.3999 109.6001 281.7002 109.8999 282.2002 C110.6001 282.3999 109.7002 281.5 109.6001 281.2002 Cf112.5 278.7002 m112.2998 279.2998 112.7998 279.6001 113.1001 280 C113.2002 279.8999 113.2002 278.7002 112.5 278.7002 Cf107.6001 279.2002 m107.5 278.7002 107.5 278.2002 107.3999 277.7002 C107.5 278.2002 107.5 278.7002 107.6001 279.2002 Cf112.1001 277.5 m111.6001 277.7002 111.7002 277.8999 111.8999 278.2998 C112.2998 278.3999 112 277.7998 112.1001 277.5 Cf113.7998 274.6001 m113.1001 275.2002 113.8999 275.7998 114.3999 276.2998 C114.8999 275.7998 114.2998 275 113.7998 274.6001 Cf101.3999 271.1001 m101.3999 271 101.3999 270.7998 101.3999 270.7002 C101.2998 270.6001 101.1001 270.3999 101.3999 271.1001 Cf95.5 265 m94.6001 263.8999 95.2998 265.7998 95.7002 266 C96.2002 265.7998 95.5 265.2998 95.5 265 Cf94 261.7002 m94.1001 261.5 93.8999 261.3999 93.7998 261.2998 C93.2002 261 93.2998 261.7002 93.6001 261.8999 c93.7998 261.8999 93.8999 261.7998 94 261.7002 Cf1 g98.1001 261.2998 m98.2002 261.2998 98.2998 261.2998 Y98.2998 261.2002 98.2998 261.1001 98.1001 261.2998 Cf97.2998 258.7998 m96.8999 258.2998 97.2002 259.2002 97.2998 259.3999 C96.8999 259.5 98.7002 260.8999 97.5 259.7998 C97.7002 259.6001 97.6001 258.8999 97.2998 258.7998 CfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF