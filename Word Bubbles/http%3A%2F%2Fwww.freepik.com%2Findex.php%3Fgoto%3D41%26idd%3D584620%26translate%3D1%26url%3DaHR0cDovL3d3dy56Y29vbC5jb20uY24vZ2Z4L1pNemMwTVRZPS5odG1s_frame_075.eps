%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%AI8_CreatorVersion: 10.0%%For: (\601\613) ()%%Title: (flame_075.eps)%%CreationDate: 03.8.5 10:04 PM%%BoundingBox: 2 3 242 220%%HiResBoundingBox: 2.7002 3.8999 241.2998 219.1001%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 1.1%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI3_TemplateBox: 123.5 111 123.5 111%AI3_TileBox: -163.5 -298 408.5 518%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 596 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -668.5 687 1 1266 977 18 0 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-163.5 -298%%AI3_PaperRect:-11 831 585 -11%%AI3_Margin:11 -12 -13 11%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.4 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.4 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 70 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin		Adobe_blend_AI5_vars begin			/_contoneDevice where			{				pop			}			{				/_contoneDevice false def				} ifelse								/_dpiThreshold where			{				pop			}			{					/_dpiThreshold 600 def			} ifelse						/_screenFreqThreshold where			{				pop			}			{					/_screenFreqThreshold 150 def			} ifelse						/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def	/invertXfer	{		[		{			1 exch sub				} /exec load systemdict/currenttransfer get exec /exec load				] cvx systemdict/settransfer get exec			} bd			/spotDict 3 dict dup begin				/nSpots 2 def				/spot1 7 dict def				/spot2 7 dict def		 end			def			composite?			{				/_setgray_ /setgray load def				/_fill_ /fill load def				/_image_ /image load def			}			{				/_setgray_ systemdict/setgray get def				/_fill_ systemdict/fill get def				/_image_ systemdict/image get def			} ifelse		} bd		/terminate		{			currentdict Adobe_blend_AI5_vars eq			{		 end			currentdict Adobe_blend_AI5 eq			{		 end		} if	} if} bd/_compositeSpotDevice where{ begin		_compositeSpotDevice 0 ne {userdict /composite? true put} if end}{	/_compositeSpotDevice 0 def	} ifelse	/nullString () def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/d255- 256 array def0 1 255{	d255- exch 1 d255 2 index get sub put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 89 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where{	pop lv1Fix}{	false} ifelsedef/ccAry1 5 array def/ccTint 0 def/spotColor? false def/colorimage? true def[/tint1Data/tint2Data/spotDict/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/setCustomColor{	dup /ccTint exch store	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/currentCustomColor{	ccAry1 aload pop ccTint} bd/nsetcustomcolor where {	pop}{	/nsetcustomcolor	{		pop setcmykcolor		} bd} ifelse/nsetcustomcolorend where {	pop}{	/nsetcustomcolorend	{	} bd} ifelse/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop				spotColor?			{			dup 1 exch sub /ccTint exch def			ccAry1 4 /Black put			} if		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/bwImage{	setImgSpace cData /_image_ load	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		expandCMYK		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd} if/expandOne{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if} bd/expandSpot{	spotColor?	{		spotDict begin			spot1 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end			spot2 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end	 end	} if} bd/expandCMYK{	4	{		expandOne 4 1 roll	} repeat} bd/colorimage where dup{	exch pop		/ncolorimage where	{		pop	}	{		/ncolorimage {pop colorimage} bd	} ifelse} ifnot{	/ncolorimage where 	{		pop	}	{		/colorimage? false store		/ncolorimage		{			pop pop pop			setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind			_image_ 		sSave restore	} bd	} ifelse} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		colorimage? 		{			expandCMYK		} if		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		bwImage		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		spotColor?		{			spotDict begin				spot1 begin					currentCustomColor makeByte /tintImage exch def					/name exch def					/spot_K exch def					/spot_Y exch def					/spot_M exch def					/spot_C exch def			 end				spot2 initSpotData		 end		} if		currentcmykcolor		4		{			makeByte 4 1 roll		} repeat		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			spotColor?			{				spotDict begin					/spotDict cvx /begin cvx					spot1 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx					spot2 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/spotDict cvx				/nsetcustomcolor cvx			}			{				/setcmykcolor cvx			} ifelse		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg		{			{				_fill			}		}		{			{				_of true eq				{					currentgray 1 ne					{						bwFill					} if				}				{					bwFill				} ifelse			}		} ifelse		def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq				{					setSSave					/cData whiteByte store					/cDataLen 8 store					bwImage					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		/_setgray_ cvx	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if	} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse	} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					_setgray_ 					_fill_ 				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse							nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq			{				/blend? false store			} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt		{			/blend? false def		} if		blend?		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/initSpotData{ begin		/name null def		/tintImage null def		/tintValue null def		/spot_C  null def		/spot_M  null def		/spot_Y  null def		/spot_K  null def end} bd/getRData{	/colorType gMark store	_compositeSpotDevice 0 ne	{		spotDict begin			spot1 initSpotData			spot2 initSpotData	 end		/spotColor? colorType 2 eq colorType 3 eq or def	} 	{		/spotColor? false store	} ifelse	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			_compositeSpotDevice 0 ne			{				spotDict begin					spot1 begin						/name 3 index def						/spot_K 4 index def						/spot_Y 5 index def						/spot_M 6 index def						/spot_C 7 index def				 end			 end			} if			7		} ifelse	} ifelse	/tmp exch def	tmp index 100 div /endPoint xs	_compositeSpotDevice 0 ne	{		tmp 2 add index 3 eq		{			/tmp tmp 4 add def			tmp index dup 			spotDict begin				spot1/name get ne				{					spot2 begin						/name exch def						/spot_K tmp 2 add index def						/spot_Y tmp 3 add index def						/spot_M tmp 4 add index def						/spot_C tmp 5 add index def				 end				}				{					pop				} ifelse		 end		} if	} if	/color? colorType 0 gt store		colorType 3 eq	{		/tint2Data gMark store	} if		colorType 2 ge	{		/tint1Data gMark store	} if	_compositeSpotDevice 0 ne	{		spotDict begin					colorType 2 ge			{				colorType 3 eq				{					spot2 begin						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def						name null eq {/name /Black def} if				 end				} if				spot1 begin					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def					colorType 2 eq 					{						name null eq 						{							/name spot2/name get def							spot2/name null put						} if					}					{						name null eq {/name /Black def} if					} ifelse			 end			} if	 end	} if		/cData gMark store	setCDataLen	colorType 0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		_eo {eoclip} {clip} ifelse		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/bwImage		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq	{		0	}	{		bDataLen ubAxis div	} ifelse	store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where dup	{		exch pop _compositeSpotDevice 1 ne and	} if	{		0 0 bInc 1 /rectfill cvx		}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		/_fill_ cvx	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	spotColor? {nsetcustomcolorend} if		grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt		{			exch		} if		pop store		/pChange ubAxis 0 eq		{			0		}		{			bDataLen ubAxis div		} ifelse		store		pChange .5 gt noImg not and dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	spotColor? {nsetcustomcolorend} if	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put end} if} bd/Bn{1 add dictdup nullString null put/_bn xs} bd/Bd{Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store			/_fill			{				_of true eq				{					currentgray 1 ne					{						__fill					} if				}				{					__fill				} ifelse			} def	} ifelse	/fill	{	} def	} bd	/BB	{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 kPc1 1 1 1 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(\203\214\203C\203\204\201[ 1) Ln0 A0 O0 g2 J 0 j 1 w 2 M []0 d160 218.7002 m159.7998 218.1001 161.3999 218 161.2998 217 C162.1001 216.8999 162.5 215.5 162.7002 215.6001 C162.3999 215 163.6001 215 164 214.6001 c165.2002 212.6001 168.6001 211.2998 169.8999 209.2002 c170 209.1001 170.2998 208 171.2002 208.3999 C176.7002 203.3999 181.7002 200.6001 187.6001 196 c194.3999 191.5 201 186.2002 208.3999 182.2998 C212.6001 178.6001 218.1001 176.8999 222.6001 174 c225.8999 172.5 229.1001 170.7002 232.5 169.2998 C232.3999 169.2998 233.5 167.7002 232.2002 167.8999 C232.2002 167.1001 233.3999 166.8999 232.7002 166.3999 C232.6001 165.7002 232.6001 166.2998 232.7002 165.6001 C234 165.6001 232.6001 164.1001 233.1001 163.7002 C232.2998 163.1001 233.7002 162.6001 232.8999 162.1001 C233.7002 161.7998 232.7002 161.3999 233.5 161.1001 C232.5 160.2998 233.7002 158.5 233.2998 158.3999 C233.1001 158.5 233 158.2998 232.8999 158.2002 C232.7998 158 233 157.8999 233.1001 157.7998 C233.5 158 233.3999 156.2998 233.7002 156.2998 C232.2998 155.7998 235.2002 155.1001 233.5 155.1001 C234.2998 153.7998 233.5 152 234.5 151.3999 C233.8999 151.3999 233.8999 150.6001 234.5 150.6001 C235 148.2998 235 145.6001 235.7002 142.7998 C235.6001 142.6001 234.2002 142.3999 235.2998 142.1001 C236.3999 142.5 235.5 141.5 235.7002 141.5 C235.6001 141.6001 235.5 141.3999 235.2998 141.2998 C236 140.7998 235.7998 140.1001 235.5 139.2998 C235.2998 139.1001 235.2998 139 235.5 138.8999 C236.3999 140 235.5 138.2998 236.3999 138 C236.7002 137.1001 236 138.1001 236.3999 137 C237 137.1001 236.6001 136.7998 236.3999 136.6001 C236.1001 135.5 237.2998 135.1001 236.6001 134.1001 C235.6001 134.3999 238.1001 133.3999 236.3999 132.8999 C237.3999 132.2998 235.2002 131.6001 237 131.5 c237.2998 131.3999 235.2002 130.7002 237 130.7998 C237.2002 130.1001 238.2998 128.3999 237.6001 127.2998 C238.3999 126.6001 237.8999 124.7998 238 123.7998 c238.3999 121.6001 239 119.2998 238.3999 117.7002 C238.3999 117.2998 239.6001 117.2002 238.6001 117.2998 C238.3999 117.1001 238.3999 117 238.6001 116.7998 C238.7998 116.7998 239.2002 117 239 116.6001 C237.2002 115.6001 240.2998 115.8999 239 114.7998 C238.2998 113.2998 240.5 112.6001 239.3999 111.2998 C238 110.3999 241.2002 109.8999 239 109.2002 C240.3999 108.8999 239.7998 107.6001 240.2998 107.2002 C240.5 106.3999 239.1001 107.1001 239.7002 106.3999 C240 106.2998 240.5 106.5 240.2998 105.8999 C240 105.8999 239.7002 106.3999 239.3999 105.8999 C239.5 105.2998 241 105.6001 239.8999 105.2998 C239.2002 104.7002 240.7998 105.1001 240.2998 104.7002 c239.2998 103.7998 241.5 103.6001 240.5 102.7002 C240.3999 102.3999 239.7002 102.2002 240.2998 102 c240.5 102 240.6001 102.1001 240.7002 102.2002 C240.1001 101.7002 241.3999 102 240.5 101.6001 C241 101.2998 241.2998 100.2002 240.8999 99.7998 C240.7002 99.6001 240.7002 99.5 240.8999 99.3999 C241.6001 99.5 241.2002 98.2998 241.2998 98.7002 C241.1001 98.7002 240.7998 98.7998 240.7002 98.5 C241 98.2002 241.6001 97.7002 240.7002 97.8999 C240.2002 97.2002 240.7002 97 240.2998 96.2998 C240.7002 95.7998 238.3999 96.3999 239.7002 95.5 C239.3999 95.2002 238.8999 95.3999 238.6001 95 C238.8999 94.1001 237.2002 94.3999 237.7998 93.3999 C237.2998 93.1001 236.8999 93.7998 236.7998 93 C237.2998 92.5 235.6001 92.2002 237 92.2002 C235.1001 92.2998 236.7002 91.3999 235.2998 91.1001 C235.1001 91 235.1001 90.7002 235.1001 90.5 C235.2998 90.1001 235.7002 90.3999 236 90.2998 C235.7002 90.1001 234.7998 89.8999 234.7002 89.2998 C235 88.8999 233.3999 88.5 233.7002 88 C233.6001 87.7998 232.8999 87.6001 233.5 87.3999 C233.3999 86 230.2998 85.2002 231.6001 84.2998 C230.7998 83.3999 229.6001 82.7002 229.3999 81.2998 C228.6001 81.5 228.8999 80.3999 228.1001 80.3999 C228.2002 80.1001 227.6001 79.6001 227.7002 79 C227.5 78.8999 227 79.2002 226.8999 78.7998 C227.1001 78.6001 227.2002 78.2998 227.5 78.3999 C227.1001 78.2002 225.6001 78 226.8999 77.2998 C227 77.2002 226.7998 77.1001 226.7002 76.8999 C226.7998 77.2002 226.3999 77.2998 226.2998 77.6001 C225.2998 76.8999 226.5 76 225.2998 75.7002 C224.6001 75.2998 225.5 74.6001 224.6001 74.1001 C224 74.2002 223.6001 73.8999 223.2002 73.6001 C224.3999 73.5 224 73.2002 223.3999 72.6001 C223.3999 72 223.6001 72.1001 222.7998 71.7998 C222.7998 71.3999 222.1001 71 221.6001 70.3999 C222.2002 70 221.6001 69.8999 221.7998 69.2998 C221.5 69.2998 221.1001 69.5 220.8999 69.1001 C221.6001 68.7998 221.1001 69 220.7002 68.7002 C218.6001 67.8999 222 67.2998 219.5 67.2998 C220 66.7998 219.7002 66.7002 219.5 66 C217.7998 66 219.7002 64.5 217.7998 64.7998 C219.3999 64.3999 217.6001 63.8999 217.2002 63.7998 C217.2002 63.6001 217.2998 63.5 217.3999 63.3999 C218.6001 63.7002 217.1001 62.7998 216.6001 62.5 C216.3999 61.8999 215.8999 60.8999 215.7998 60.7002 C216.7002 61 215.3999 60.2002 215.3999 60.1001 C214.2002 60 215.7002 61.3999 215.7998 62.1001 C217 62.2002 215.8999 62.6001 216.3999 63.3999 c218.7998 66.5 220.7002 70.1001 222.7998 73.2002 c226.7002 80 231.7002 85.3999 235.1001 92.3999 c236.7002 95.2998 241.5 98 239.2002 101.3999 C238.7002 106.3999 237.8999 112.5 237.3999 117.8999 C237.6001 118 237.6001 118.1001 237.3999 118.2998 C235.1001 134.6001 232.8999 151.2998 231 168.7002 C230.2998 169.2002 229.6001 168.7998 229.3999 169.5 C229.1001 169.5 228.3999 169.6001 227.8999 169.7002 C228.1001 169.6001 228.2002 169.7998 228.2998 169.8999 C227.5 170.6001 225.6001 170.2002 225.7002 171.6001 C225.6001 170.7002 224.7998 171.7002 224.3999 171.7998 C224.2998 172.7998 223.5 171.3999 223 172.2002 C222.2002 173 221.2002 173 220.7002 173.7998 C218.8999 173.8999 218.6001 175.2998 216.3999 175.7002 c215.8999 175.7002 216.7998 175.5 216.7998 175.8999 C213.8999 176.7998 211.2002 178.7002 209.2002 180 C208.7998 180.8999 208.2002 179.8999 207.7998 180.6001 C208.2002 181.3999 206.3999 180.6001 206.8999 181.6001 C206.6001 181.3999 205.7002 182.7998 205.7002 182.2998 C204 182.6001 202.7998 184.7998 201.2002 184.8999 C201 185.8999 199.7002 186.5 198.5 186.7998 C197.3999 188.1001 195.2998 189.2002 194.3999 189.8999 c189.2998 193.7002 183.7002 197.3999 179.3999 200.7998 C177.2002 201.1001 175.1001 204.2998 173.6001 204.8999 C168.6001 208.7998 162.8999 213.2002 158.7998 217.7998 C158 217.6001 156.3999 217.3999 155.5 217.3999 C155.6001 217.2998 155.7002 217.2002 155.8999 217.2002 C155.1001 217.2002 154.1001 216.7002 153.8999 216.6001 C153.6001 216.6001 153.2002 216.7998 153.1001 216.3999 C153.1001 216.6001 153 216.7002 152.7998 216.7998 C152.2998 215.7002 150.2998 217.2998 150.2002 216.2002 C149.7002 216.7002 149.2002 216.2002 148.7002 216 C148 216.2002 146.5 215.7002 146.1001 215.6001 C144 216.3999 142.1001 215 140.7002 215.6001 C139.5 214.7998 138.2002 215.2998 137 215.2002 C136.7998 214.3999 134.8999 214.7002 133.8999 214.3999 C132.3999 214.7002 131.2002 213.5 129.6001 213.8999 C129.7998 213.3999 127 214.2998 127.1001 213.1001 C126.3999 213.2998 124.7002 213 123.3999 213.1001 C123.5 212.7002 123 213 122.7998 212.8999 C122.6001 213.8999 122 212.7002 121.3999 213.1001 C120.8999 213 121.3999 212.6001 121.6001 212.7002 C121.7998 212.7002 122 212.7002 122.2002 212.7002 C121.1001 212.2002 119.2002 213.7998 118.8999 212.8999 C117.6001 213.5 114.5 212.7998 112.8999 212.7002 C112.3999 213.1001 111.7002 212.8999 111.2998 212.5 C111.5 212.3999 111.6001 212.6001 111.7002 212.7002 C110.5 213.7002 109.7998 211.5 108.6001 212.5 C108.2002 212.1001 107.6001 211.8999 107 212.2998 c106.5 212.5 106.2002 211.3999 105.8999 212.2998 C103.8999 212.2002 102 211.6001 100.3999 212.2998 C98.7998 212.2998 97.8999 211.3999 96.5 212.2998 C94.8999 211.5 94.7998 212.1001 93 211.5 C91.8999 211.7998 90.2002 210.8999 89.5 211.5 C88.6001 210.6001 86.7998 210.8999 85.6001 210.8999 c82.8999 210.7998 80 210.6001 76.7002 210.8999 C76.7998 211.2002 76.3999 211.2998 76.5 211.7002 C75.7002 211.2998 74.7998 211.7002 74.7002 210.2002 C74.1001 210 74.2998 210.5 74.2998 210.8999 C75.2002 210.7998 75.1001 212.1001 76.1001 211.8999 C75.8999 213.7002 73.3999 210.8999 74.7002 212.7002 C82.2998 211.1001 89.5 213 97.5 213.5 c107.8999 213.3999 119 214.5 129.3999 215 c137.6001 216.7998 147.2002 216.3999 154.7002 218.5 C156 218.1001 157.3999 219.2002 158.6001 219.1001 C159.3999 219.2998 159.3999 218.1001 160 218.7002 Cf1 g131 214.6001 m131.2002 214.6001 131.2998 214.6001 131.5 214.6001 C131.2998 214.6001 131.2002 214.6001 131 214.6001 Cf100.6001 212.5 m100.7998 212.5 101 212.5 101.2002 212.5 C101 212.5 100.7998 212.5 100.6001 212.5 Cf0 g74.1001 211.2998 m73.7998 211.2998 73.5 211.2002 73.8999 211.5 C74 211.5 74.1001 211.3999 74.1001 211.2998 Cf72.7998 209.7998 m72.2998 210.3999 73.5 210.2998 73.3999 210.8999 C74.5 210.2998 72.2002 210.2998 72.7998 209.7998 Cf73.6001 209.6001 m73.7998 209.6001 73.8999 209.6001 74.1001 209.6001 C73.8999 209.6001 73.7998 209.6001 73.6001 209.6001 Cf73 208.2002 m72.8999 207.8999 72.1001 207.6001 72.6001 207.3999 C72.7998 207.2998 73.2002 207.3999 72.7998 207.2002 C72.2002 207 71.2002 207.5 70.3999 206.7002 C71.2998 207.1001 72.7998 207.8999 73 208.2002 Cf71.2002 205.2998 m70.3999 206.2998 70.1001 204.1001 69.2998 205.1001 C69.5 204.8999 70.6001 205.2998 70.7998 205.8999 C70.6001 206.3999 69.5 205.8999 69.8999 206.2998 C70.3999 206.2002 72.6001 205.7002 71.2002 205.2998 Cf68.8999 202.7998 m68.7998 202.8999 68.3999 203.2998 68.2998 203.5 C68.5 203.3999 68.7002 202.7998 69.1001 203 C69.2002 203.2002 69.3999 203.2998 69.2998 203.5 C69.1001 203.7002 68.3999 204.3999 69.1001 203.7002 C69.2998 203.6001 69.3999 203.7002 69.5 203.8999 C68.7002 204.6001 69.7002 204.1001 70.1001 204.1001 C69.5 203.7002 69.6001 202.8999 68.8999 202.7998 Cf68.1001 201.7998 m68.5 201.7998 68.1001 202.7998 68.5 202.2002 C68.2998 202 68.1001 201.7002 67.7002 201.7998 C66.7002 202.3999 68 202.8999 67.8999 203 C67.2002 202.8999 67.6001 201.8999 68.1001 201.7998 Cf66.7002 201 m66.1001 201 65.7998 200.8999 65.7998 201.3999 C66.2998 201.3999 66.3999 201.3999 66.7002 201 Cf66.2002 200 m66 199.7002 65.6001 199.5 65.6001 199.1001 C66 198.6001 63.8999 199.2998 64.3999 198.5 C64.7998 198.7002 63.3999 198.2002 63.7998 198.8999 c64.2002 199.7998 65.5 198.7998 65.7998 200 C65.5 200.2998 65 200.1001 64.6001 200.2002 C64.3999 200.3999 66 200 66.3999 200.6001 C67 200.5 66.2998 200 66.2002 200 Cf63.6001 198.1001 m63.3999 198 63.3999 197.7998 63.6001 197.7002 C63.7002 197 62.6001 198.7002 64 198.1001 C63.7998 198.1001 63.7002 198.1001 63.6001 198.1001 Cf62.5 197.5 m62.6001 197.5 62.7002 197.5 Y62.8999 197.2998 63 197.2002 62.5 197.5 Cf61.5 196.7002 m61.6001 196.7002 61.7998 196.7002 61.8999 196.7002 C62 196.6001 62.1001 196.5 61.5 196.7002 Cf13 196.5 m13.1001 196.5 13.2002 196.5 V13.2002 196.2998 13.2002 196 13 196.5 Cf60.5 195.2002 m60.7002 195.2002 60.8999 195.1001 61.1001 195 C61 194.8999 60.7998 194.7002 60.5 195.2002 Cf60.2998 194 m60.1001 193.8999 59.7998 193.2998 59.8999 193.7998 C59.2002 193.7002 60 195.1001 58.7998 194.6001 C60 195.2998 59.8999 194 59.8999 194.3999 C59.7002 194.2998 59.6001 194.2002 59.7002 194 c59.7998 193.7002 60.2002 193.7002 60.2998 194 Cf58.2002 192.7998 m58.3999 192.7998 58.5 192.7998 58.6001 192.7998 C58.3999 192.5 58.2002 192.2998 58.2002 192.7998 Cf57.2002 191.7002 m57.5 191.7002 57.8999 191.7002 58.2002 191.7002 C57.8999 191.7002 57.5 191.7002 57.2002 191.7002 Cf54.8999 190.1001 m55.2002 190.1001 55.5 190.1001 55.7002 190.1001 C55.5 190.1001 55.2002 190.1001 54.8999 190.1001 Cf55.2998 188.7998 m55.1001 189.2002 53.5 187.6001 54.8999 189.2998 C55.7002 189.3999 54.7998 189.1001 55.2998 188.7998 Cf54.2998 188 m53.7998 188 53.2002 188.2002 52.8999 187.7998 C52.6001 188.5 53.6001 187.7998 54.2998 188 Cf52 186 m52.5 186.3999 50.7998 186.1001 51.3999 186.7998 C52.6001 185.5 53.1001 188.3999 53.7002 186.6001 C53 186.6001 52.3999 186.6001 52 186 Cf51.3999 184.8999 m48.3999 185.7998 52.7002 182.8999 49.6001 183.8999 C49.5 183.8999 50.5 183.8999 50.2002 184.5 c50 185.2002 48.5 184 49.6001 184.7002 C49.8999 185.2998 52 184.8999 51.3999 185.6001 C51.3999 185.2998 51.3999 185.1001 51.3999 184.8999 Cf49.6001 183.2998 m51 183.2002 48.6001 183.5 48.2998 183.1001 C47.2998 182.6001 49.7002 183.8999 49.6001 183.2998 Cf48.7998 182.2998 m48.5 182.2998 48.2998 182 48.1001 181.8999 C49.7002 181.2998 47.7002 181.2002 47.2998 181.3999 C46.7998 181.5 48.1001 182.1001 48.7998 182.5 C49.2002 183.7998 49.6001 181.6001 48.7998 182.2998 Cf47.2998 180.2002 m49.1001 180.2998 46.7002 180.1001 46.5 179.7998 C46.2002 180.3999 44.7998 179.5 45.7002 179.7998 c46.2998 180.1001 45 180.1001 45.7002 180.3999 C46.3999 180.5 46.2998 179.7998 47.2998 180.2002 Cf45.7002 178.7998 m46.2998 178.3999 45.3999 178.6001 45.2998 178.6001 C45 179.2998 46 178.7002 46.1001 179.3999 C46.2002 178.5 47 179.5 45.7002 178.7998 Cf44.2002 178.1001 m44.1001 178 44 177.8999 44 177.7002 C44.3999 177.7998 44.7002 177.3999 45.2998 177.5 C44.7002 176.2998 42.8999 178.2002 43.3999 176.5 C44.3999 176.8999 41.7998 175.7998 43.6001 175.8999 C43.1001 175.7002 41.6001 176.1001 41.7998 175.2998 C41.3999 175 41.8999 174.7998 41.6001 174.3999 C41.3999 175.1001 39.6001 174.5 40.7002 175.2998 C40.7002 175.1001 40.7998 175 40.8999 174.8999 C42.3999 175.3999 40.8999 176.5 42.2002 176.1001 C42.3999 177.3999 43.5 177.3999 44.2002 178.1001 Cf40.8999 174 m40.5 174 40 174 39.5 174 C40.3999 173.7998 41 174.5 41.7998 173.7998 C41.1001 174.1001 41.6001 172.7002 41.1001 173.3999 C41.7002 173.6001 41 173.7998 40.8999 174 Cf40.5 173 m40.7998 172.6001 40.2998 172.3999 39.8999 172.2002 C39.1001 172.8999 38.7002 173 39.8999 173.6001 C40.8999 173.7998 40 173.5 40.5 173 Cf39.7002 171.6001 m39.2002 172.8999 37.3999 170.5 38.2998 172.2002 C39.2002 172.6001 39.1001 171.5 39.7002 171.6001 Cf37 170.7002 m37.7998 170.6001 38.3999 170.8999 39.1001 171.2002 C38.5 170.5 37.7998 170.7002 37 170.7002 Cf38.1001 169.7002 m37.7998 169.5 37.7002 168.7002 36.7998 168.7002 C37.2998 169 36.3999 169.2998 36.3999 169.7002 C35.6001 169.5 37 170 37.2002 170.1001 C37.7002 170.2002 37.7998 170.1001 38.1001 169.7002 Cf35.7998 167.7002 m36.1001 167.8999 36.2998 168.5 36.7998 168.2998 C36.2998 167.6001 35.3999 167.7002 34.7998 167.8999 C35.1001 168.2998 35.8999 168.7002 35.7998 169.2998 C37 168.5 34.7998 168.8999 35.7998 167.7002 Cf34.6001 166.7998 m34.2998 166.5 33.6001 166.2002 34.3999 165.7998 C34.1001 165.3999 33 163 31.7002 163.5 C32.1001 163 32.3999 163 31.7002 163.2998 c31.5 163.3999 31.3999 163.2002 31.2998 163.1001 C31.8999 162.7998 31.3999 163 31.1001 162.7002 C30.7998 162.6001 30.8999 162.2998 30.8999 162.1001 C32.1001 162.2998 30.2998 161.7002 30.8999 161.2998 C30.3999 160.8999 29.6001 161.2002 29.2002 160.7002 C30.8999 160 28.7002 160.3999 29 159.3999 C27.5 159.6001 28.1001 158.7998 27.2002 158 C27.3999 157.6001 27.7998 157.7998 28.2002 157.7998 C27.5 157.2998 27.2002 157.7998 26.5 157.3999 C28.2998 155.8999 25.7002 157.7002 25.8999 156.1001 C26.5 155.6001 26.8999 156.7002 26.1001 155.7002 C26.2998 154.7998 24.3999 155.7998 25.2998 154.7002 C24.7998 154.8999 24.2998 154 23.5 154.2998 C23.7002 154.2998 23.8999 154.2002 24.1001 154.5 C22.6001 155.5 26.2998 155 23.8999 155.7002 C26.6001 155.8999 25 158.2002 26.8999 158.7998 C26.6001 159.7002 28.2002 158.7998 27.6001 159.6001 C27.6001 159.3999 27.7002 160.3999 28.3999 160 C28.8999 160.2998 28.2002 160.5 28.2002 160.7002 C29.1001 161.2002 29.7002 162 30.3999 162.7002 C30.5 163.1001 31.5 163.5 31.7002 164.2002 C30.8999 164.3999 33 164.6001 32.8999 165.3999 C33.1001 165 33.3999 165.3999 33.2998 165.6001 c32.7998 166.7002 34.3999 166 34.1001 167 C34.2998 167.1001 35 166.7002 34.6001 166.7998 Cf35.2002 166.6001 m35.2998 166.6001 35.3999 166.6001 V35.5 166.5 35.2002 166.6001 Vf1 g30.2002 161.7002 m30.3999 161.7002 30.5 161.7002 30.7002 161.7002 C30.5 161.5 30.3999 161.3999 30.2002 161.7002 Cf26.5 158 m26.7002 158 26.7998 158 26.8999 158 C26.7998 158 26.7002 158 26.5 158 Cf0 g24.5 153.7002 m23.5 152.8999 23.1001 152 21.7998 151.7998 C21.8999 151.1001 23.2998 151.7002 22.2002 151 C21.7002 151.1001 21 150.7002 20.7998 151.3999 C21.8999 151.3999 21.8999 153.2002 22.6001 152.6001 C23.5 153.5 22.5 154.3999 24.1001 153.7002 C24.2002 153.7002 24.2998 153.7002 24.5 153.7002 Cf21.6001 150.2002 m21 149.7998 20.5 149.3999 19.7002 149.6001 C19.1001 150.1001 20.3999 150.2002 20.3999 150.7998 C20.7998 150.5 21.7998 150.8999 21.6001 150.2002 Cf20.3999 149.1001 m20.5 149 20.6001 148.8999 V20.3999 148.8999 20.2998 148.8999 20.3999 149.1001 Cf20.3999 148.1001 m19 148.2002 19.6001 145.2002 18.1001 146.8999 C17.8999 146.7002 17.8999 146.6001 18.1001 146.5 C17.8999 147 17.2998 144.3999 18.5 145.8999 C19 145.2998 16.7002 145.2998 17.5 144.3999 C17.2998 144.3999 17 144.5 16.8999 144.2002 c16.7002 143.7002 17.7998 143.7998 16.8999 143.7998 C16.2998 143.6001 17.2002 142.7998 16.7002 143.2002 C16.5 143.5 16.1001 143.2998 15.7998 143.3999 C15.2998 143 16.1001 143 16.2998 142.7998 C16 142.2998 14.7998 142.6001 15.2002 141.8999 C15.8999 141.3999 13.3999 141.6001 14.6001 140.7002 C14.3999 140.7002 14.1001 140.7998 14 140.5 C14.1001 140.2002 14.3999 140.2998 14.6001 140.2998 C14.3999 139.6001 12.5 141 13.6001 139.7002 C14.6001 139.7998 13.2002 139.2002 13.3999 138.8999 C13 139 12.7998 138.7002 12.5 138.3999 C12.6001 138 13.6001 138.5 13 138 C13.3999 138.2002 11.1001 138.7998 12.2998 137.7998 C11.2002 137.3999 11.7998 135.8999 10.8999 135.7998 C10.8999 134.7002 9.1001 135.7002 9.2998 134.2998 C9.7998 135.3999 7.3999 133.8999 9.2998 133.7002 C8.2002 134.2998 9.6001 132.5 8.2002 132.8999 C8 132.5 8 131.5 7.3999 131.8999 C6.6001 131.5 7.5 130.7998 6.3999 131 C7.1001 129.5 4.7998 128.2998 4.8999 127.2998 C4.7002 126.7002 4.5 126.2002 5.2998 125.8999 C5.7998 125.7002 4 124.7002 5.1001 124.8999 C4.8999 123.7998 6.5 124.3999 4.8999 123.7998 C5.6001 123.8999 6 122.8999 6.2002 123.2002 C5.2998 123.2998 4.7002 123 4.2998 123.6001 C4.2002 124 5.1001 124.2998 4.5 124.7002 C3.7998 124.3999 5 125.7002 3.7002 125.2998 C3.8999 126.3999 2.6001 126.5 2.7002 127.2998 C4.2002 127.5 3 129.3999 4.5 129.3999 C3.7002 129.6001 4.7998 130.3999 4.8999 130.7998 C6 131.2998 6 133.2002 7.3999 133.1001 C7.2998 133.3999 7 133.2998 6.7998 133.2998 C8.6001 134.2002 8.1001 136.1001 10.2998 136.7998 C9.7002 137.3999 10.2998 138.5 11.1001 138.3999 C10.8999 139.1001 12.5 139.7998 12.2998 140.5 C14 140.7998 12 141.1001 13.6001 141.5 C13.2998 142.2998 16 142.5 14.2002 142.7998 C15.1001 143.2002 14.3999 144.5 16.2998 144 C16.8999 145.1001 15 144.2002 16 145 C16.1001 145.2002 17.1001 145.5 16.2998 145.8999 C17 145.6001 17.2998 146.2998 17.8999 146.5 C17.5 146.7998 17.1001 146.6001 17.8999 146.7002 C18.2002 146.7998 18.1001 147.1001 18.1001 147.2998 C17.6001 147.7002 17.7998 147.7998 18.2998 147.7002 C18.6001 148.3999 19.2998 148.7002 19.7002 148.8999 C19.2002 148.5 19.7998 147.7998 20.3999 148.1001 Cf1 g10.2998 136 m10.1001 135.7998 10 135.7002 9.8999 135.6001 C10 135.7002 10.1001 135.7998 10.2998 136 Cf236.6001 134.8999 m236 134.7002 235.8999 135.3999 236 135.7998 C236.2002 135.5 236.2002 135.2002 236.6001 134.8999 Cf0 g6.6001 121.7998 m5.7002 121.2002 8.2998 120.7002 5.2998 121.2002 C5.2002 121.3999 4.7002 122.5 5.2998 122.2002 C5.8999 122.6001 4.7998 122.5 4.8999 122.7998 C5.7002 122.8999 6.2998 122.3999 6.6001 121.7998 Cf1 g5.2998 122 m5.3999 121.8999 5.5 121.7998 5.6001 121.7998 C5.6001 121.7002 5.6001 121.6001 5.2998 122 Cf0 g7.3999 119.7002 m7 119.7002 6.3999 118.8999 6.2002 119.5 C7.2998 119.6001 5.7998 120.1001 6 120.5 C5.5 120.6001 7.5 120.6001 7.3999 119.7002 Cf7.6001 117.8999 m7.2998 117.7002 7 118.1001 7.3999 118.2998 C7.5 118.2002 7.7002 118.1001 7.6001 117.8999 Cf6.7998 117.5 m6.8999 117.2998 7.1001 117.2002 7.2002 117.1001 C7.1001 117.2002 6.8999 117.2998 6.7998 117.5 Cf8.2002 116.2002 m7.8999 116.1001 7.7002 117 7.3999 116.3999 C7.2002 115.3999 7.3999 116.6001 7.6001 116.6001 C7.2998 118.2002 10.2998 116.2998 7.7998 116.7998 C7.8999 116.6001 8.7998 116.6001 8.2002 116.2002 cf9.2998 115 m9.6001 113.8999 10.5 113.7002 9.8999 112.8999 C9.7002 113.1001 9.8999 112.3999 9.8999 112.1001 C10.5 112.1001 10.2002 112.7998 10.7002 112.1001 C9.7998 111.7998 11.7002 111.1001 9.8999 111.1001 C10.7002 111.1001 8.1001 112 9.8999 112.1001 C9.2002 112.7998 8.3999 112.3999 8.3999 113.2998 C8.7002 114.3999 8.7002 113.8999 9.2998 114.6001 C8.6001 114.7998 7.2998 114.8999 7.7998 115.7998 C8.3999 115.8999 10 115.8999 9.2998 115 Cf1 g8.6001 115.6001 m8.6001 115.5 8.6001 115.2998 8.6001 115.2002 C8.5 115.2002 8.3999 115.2002 8.6001 115.6001 Cf8.7998 113.7998 m9.1001 113.7998 9.2998 113.7998 9.5 113.7998 C9.2998 113.7998 9.1001 113.7998 8.7998 113.7998 Cf0 g11.7002 110.2998 m10.8999 109.7002 12.2998 108.8999 12.1001 108.3999 C12.6001 108.2998 11.7002 108.6001 11.7002 108.2002 C12.1001 107.3999 13 107.6001 13 106.3999 C14.3999 106.6001 12.3999 105.8999 13.7998 105.7002 C13.5 105.1001 14.2002 105.5 13.3999 105.1001 C13.7002 104.8999 14.2002 104.7002 14.3999 104.5 C13.7002 103.6001 15 102.7998 15.3999 102 C15.3999 101.7998 14.7002 101.6001 15.2002 101.3999 C15.8999 101.6001 15.7002 101.1001 16 100.7998 C15.7998 100.7998 15.6001 100.8999 15.3999 100.6001 C16.5 100.2002 15.5 99.2002 16.7002 98.8999 C17 98.1001 14.2998 98.2002 16 97.5 c17.2002 96.8999 15.6001 98 15.3999 97.2998 C14.7002 96.6001 16.2002 98.3999 14.7998 98.1001 C13.6001 99 14.7998 100.2002 13.7998 100.7998 C13.1001 101.6001 15.2998 102.7002 13.3999 102.7002 C13 103.2002 12.5 104 12.1001 104.7002 C12.5 104.7998 12.8999 104.5 13.2002 104.8999 C12.5 105.1001 11.5 105.2002 11.5 106.1001 C12.2002 106.1001 12.3999 104.7002 13.3999 105.5 C13.7002 106.2002 12.1001 106.5 11.7002 107 C11.6001 106.8999 11.5 106.7002 11.2998 106.7998 c11.1001 106.8999 11.1001 107.2002 11.1001 107.3999 C11.7998 107.5 12.1001 106.2002 12.7998 107 C12.2998 107.5 11.2998 107.8999 11.1001 108 C11.3999 108.1001 11.2998 108.3999 11.2998 108.6001 C8.7998 107.7998 12.8999 110.8999 9.7002 110.5 C10.2002 110.1001 11.2998 110.2998 11.7002 110.2998 Cf1 g13 104.2998 m13.2002 104.2998 13.3999 104.2998 13.6001 104.2998 C13.3999 104.2002 13.2002 104.2002 13 104.2998 Cf14.7998 101 m14.8999 100.8999 15 100.8999 15 100.7998 C14.8999 100.7998 14.7002 100.7998 14.7998 101 Cf0 g16.7002 96.7002 m16.2002 97 16 96.1001 15.6001 96.7002 C16.2998 97 16.7998 96.3999 17.5 96.2998 C17.7002 95.6001 17 96.7998 16.7002 96.7002 Cf17.7002 95.5 m19.7998 94.2998 14.8999 95.8999 17.1001 95.7002 C16.7998 96.3999 15.3999 95.8999 16.8999 96.1001 C17.1001 95.8999 17.1001 94.7002 17.7002 95.5 Cf18.7002 93.6001 m19.5 93.7998 16.5 92.3999 18.8999 92.7998 C19.7002 92.2002 18.1001 92.8999 17.7002 93 C17.5 93.3999 17.2998 93.7998 17.1001 94.2002 C17.5 93.8999 17.6001 93.2998 18.1001 93.6001 C19.7002 93.7002 17.3999 95.5 18.7002 94 C18.5 93.8999 18.5 93.7002 18.7002 93.6001 Cf20.2002 90.8999 m20.2998 91 20.3999 90.8999 20.3999 90.7002 C20 91 19.2002 91.3999 18.7002 90.7002 C19 89.7998 20.7002 90.7998 20.3999 89.8999 C20.7998 89.7998 20 90.1001 20 89.7002 C19.7002 88.8999 20.2002 88.8999 20.7998 89.1001 C20.7002 90.1001 21.2002 89 21.6001 88.7002 C20.8999 88.7002 19.2002 88.3999 19.5 89.7002 C18.7998 89.7002 18.6001 91.1001 18.1001 91.7002 C18.7002 92 18 92.2002 17.8999 92.3999 C18.7998 91.5 20.1001 92.7002 20.2002 90.8999 Cf21 87.7998 m20.8999 87.5 21.2998 87.3999 21.3999 87.2002 C21.7002 87.3999 22.5 86.6001 22.7998 86.2002 C22.2002 86.8999 20.7002 85.6001 21 86.7998 C21.1001 86.8999 21.2998 87 21.2002 87.2002 C20 87.2998 20.7998 87.8999 20 88.2998 C20.2002 88.2998 20.5 87.6001 21 87.7998 Cf22 85.2002 m22.2998 83.8999 20.2998 86.7998 22.3999 85.6001 C22.2998 85.3999 22.2002 85.2998 22 85.2002 Cf23.5 84.5 m23.2002 84.3999 23.2002 84.2998 23.5 84.1001 C23.6001 84.7002 22.2002 82.8999 22 84.2998 C23.8999 83.7002 22.7002 86.6001 23.5 84.5 Cf24.2998 83.1001 m24.2002 82.2002 25.5 82.2998 24.7002 81.5 C24.8999 81.3999 25.3999 81.6001 25.2998 81.2998 C24.6001 81.1001 24.2002 80.7998 24.5 80.2002 C24.3999 80 24.6001 79.8999 24.7002 79.7998 C24.8999 79.7998 25 79.8999 25.1001 80 C24.7002 81.3999 25.7998 80 25.5 80 C25.7002 79.2998 26.8999 79.2002 26.7002 78.2002 C26.6001 78.2002 26.8999 77.2002 27.6001 77.6001 C27 77.2002 28 75.7002 27.3999 75.7002 C27.5 75.2998 27.8999 75.6001 28.2002 75.5 C28.2002 75.2002 27.1001 75.6001 27.7998 74.8999 C28.5 75.1001 28.8999 74.1001 29.2002 73.6001 C28.5 73.8999 28.7002 72.2998 29.7998 72.6001 C29.7998 72 30.2998 72.5 30.2002 72.2002 C29.7998 72.3999 29.6001 71.8999 29.2002 71.7998 C29.5 71.3999 30 71.7002 30.3999 71.6001 C29.8999 71.7998 29.7002 71.2998 30 71 c30.1001 70.8999 30.2998 70.7998 30.2002 70.6001 c30.2002 70.3999 29.5 70.1001 30 69.8999 C30.3999 70.8999 28.2998 71.6001 27.7998 73.3999 C26.5 74.5 28.2002 75.1001 26.7002 75.7002 C27.2998 76.5 24.2998 77.7998 26.1001 78.6001 C25.7002 79 24.7002 78.7002 24.8999 79.6001 C24.7998 80.1001 24.2002 79.6001 24.2998 80 C24.6001 80.2002 22.7998 81.2998 24.2998 81.2998 C24.7002 81.5 24.2002 81.7998 24.1001 82.1001 C23.5 81.6001 23.5 81.2998 23.2002 82.2998 C23.7002 82.6001 24 81.7002 24.1001 82.5 C23.7002 83 22.3999 82.2002 22.6001 83.2998 C23.1001 83.5 24.1001 83.7998 24.2998 83.1001 Cf1 g25.2998 79.3999 m25.3999 79.5 25.3999 79.5 25.5 79.6001 C25.3999 79.5 25.3999 79.5 25.2998 79.3999 Cf27.2002 76.8999 m26.8999 76.8999 26.7002 76.8999 26.5 76.8999 C26.7002 76.8999 26.8999 76.8999 27.2002 76.8999 Cf28 74.1001 m28.1001 74.2002 28.2002 74.2998 V28.1001 74.2002 28 74.1001 Yf0 g222.3999 70.6001 m222.3999 70.5 222.5 70.3999 222.6001 70.3999 C222.3999 70.3999 222.2998 70.3999 222.3999 70.6001 Cf31.2998 70.1001 m31 70.2002 30.7002 70.1001 31.1001 70.3999 C31.2002 70.3999 31.2998 70.2998 31.2998 70.1001 Cf1 g221.2998 69.8999 m221.2998 69.7998 221.2998 69.7002 221.2998 69.5 C221.2998 69.7002 221.2998 69.7998 221.2998 69.8999 Cf0 g32.1001 67.7002 m32.3999 67.5 33.5 67.1001 32.2998 67.2998 C31.7998 66.8999 32.6001 66.8999 32.7002 66.7002 C32.7998 66.6001 33.2998 66.7998 33.1001 66.3999 C32.6001 66.1001 33.3999 66.1001 33.5 65.7998 C34.1001 65.7998 32.3999 66.2002 32.1001 66 c31.8999 66 31.7998 66.1001 31.7002 66.2002 C31.8999 66.2002 32 66.2998 32.1001 66.3999 C31.2998 67.2002 30.7002 67.7998 30.3999 68.8999 C30.5 69.5 31.2002 69.6001 31.7002 69.5 C31.3999 69 31.3999 68.2998 31.8999 67.8999 C32.1001 67.8999 32.5 67.8999 32.1001 67.7002 Cf34.1001 63.7998 m34.3999 63.7998 34.7002 63.7998 34.3999 63.6001 C33.7002 62.7998 34 64.8999 33.2998 64.2002 C31.7002 64.3999 34.1001 64.6001 33.8999 64.6001 C34 64.5 34.1001 64.5 34.1001 64.3999 C34.5 64.6001 33.5 64 34.1001 63.7998 Cf35.2002 62.7002 m34.7002 62.2002 33.6001 62.8999 33.7002 62.8999 C34.2002 62.7998 34.8999 62.7002 35.2002 62.7002 Cf36.2002 59.5 m36.5 58.2002 35.7002 59.5 35.2002 59 C35.6001 60.1001 35.2998 61.1001 35 61.7002 C36.1001 61.3999 35.2998 59.1001 36.2002 59.5 Cf34.7998 60.7002 m34.7002 60.7002 34.6001 60.7998 34.6001 60.8999 C34.6001 60.7998 34.7002 60.7002 34.7998 60.7002 Cf215.2002 59 m215.2998 58.7002 213.2998 58.7998 214.3999 58.2002 C213 57.5 213.5 56 211.8999 55.5 C212 55.2998 212.7998 55.2002 212.2998 55.1001 C212.2002 55 212 54.8999 212.1001 54.7002 C212.1001 54.2998 213.1001 54.7998 212.5 54.2998 C212.2998 55.1001 211.3999 54.3999 211.2998 53.8999 c211.2002 53.3999 211.1001 54 210.8999 54.1001 C211.8999 54.8999 211.7998 55.7998 212.7002 56.3999 C213.2998 57.2998 213.2002 59.7002 215 59.7002 C214.7998 59.3999 215.2998 59.2998 215.2002 59 Cf36 58 m35.8999 57.8999 35.7002 57.7998 35.7998 57.6001 C36.2998 58.1001 37.1001 56.2998 37 57.7998 C38.2002 57.7998 36.7998 56.5 38.2998 56.6001 C37.8999 56.2002 36.5 56.6001 37.3999 56.7998 C36.2002 57.5 37.2002 57 35.7998 57.3999 C34.5 58.7002 36.7002 58.2002 36 58 Cf36.6001 58.3999 m36.7998 58.3999 36.8999 58.3999 37 58.3999 C36.8999 58.3999 36.7998 58.3999 36.6001 58.3999 Cf38.5 55.2998 m38 54.7002 38 55.8999 37.6001 56 C38.1001 56 38.7002 56.1001 38.5 55.2998 Cf213.2998 56 m213.5 56 213.6001 56 213.7002 56 C213.6001 55.7998 213.5 55.7002 213.2998 56 Cf37.8999 54.1001 m37.3999 52.8999 37.8999 54.6001 37.2002 54.5 C37.3999 54.2002 39.5 53.6001 37.8999 54.1001 Cf39.5 52.7002 m39.2998 53.2002 39.1001 52.5 38.8999 52.5 C39 51.8999 41.2998 51.8999 39.7002 51.6001 C39.5 51.7998 39.3999 52.1001 39.1001 52 C38.6001 51 40.2998 50.5 40.2998 49.7998 C40.1001 49.7998 39.5 49.3999 39.8999 49.6001 C40.6001 50.1001 38.7002 50.1001 39.8999 50.3999 C38.7002 50.3999 39.7002 51.2002 38.7002 51.6001 C40 52 37.8999 53.3999 38.8999 52.8999 C39.1001 53.2002 38.7998 54.3999 38.8999 54.5 C38.2998 53.3999 40.1001 53.5 39.5 52.7002 Cf210.8999 52.5 m210.1001 52.6001 209.8999 51.6001 209.3999 51.3999 C209.5 51.2998 209.7002 51.2002 209.6001 51 C208.7002 49.8999 209.1001 47.6001 206.8999 47.5 C207.2998 47 207.6001 47.1001 207.7998 46.5 C207.5 47.3999 206.7002 46.5 206.1001 46.5 C206.6001 48.3999 208.2998 49.3999 209.3999 51.3999 c209.6001 51.7002 210.7002 54.7998 210.8999 52.5 Cf40.8999 50.6001 m40.3999 50.1001 41.6001 50.2998 40.7002 49.7998 C40.7998 50.1001 40.6001 50.5 40.8999 50.6001 C40.7998 50.7998 39.8999 51 40.5 50.7998 c40.7002 50.7002 41.1001 51 40.8999 50.6001 Cf41.6001 48.5 m41.3999 48.7002 41.2998 48.7998 41.1001 48.7998 C41 48.6001 40.8999 48.5 40.8999 48.2998 c41.2002 47.2002 42.1001 48.7998 42 47.7002 C42.1001 47.2998 43.2002 47.7002 42.7998 47.2998 C42.2998 47 44.1001 46.2002 42.6001 46.5 C42.5 46.7998 42.5 47.2998 42 47.2998 C41.7998 47.2002 41.7002 47.1001 41.7998 46.8999 C41.1001 46.6001 40.6001 48.2998 39.8999 49.2002 C40.2998 48.7002 41.6001 49.3999 41.6001 48.5 Cf43.3999 45.8999 m43.3999 45.6001 42.6001 46.5 42.3999 45.7002 C43.5 45 43.7998 45.3999 44.2002 44.3999 C43.3999 43.2998 45.8999 43.2998 44.3999 42.6001 C44.8999 42.2998 45.7002 42.2998 45.7002 41.6001 C45.5 41.6001 45.3999 41.5 45.2998 41.2998 C46.8999 40.7002 46.2998 39.8999 47.2998 39.1001 C47.2002 38.7998 46.3999 38.7998 46.8999 38.5 C47.2998 38.3999 47.7002 38.5 47.8999 38.8999 C48 39.1001 47.7998 39.2002 47.7002 39.2998 C48.1001 39.3999 48.7002 39.1001 49 39.5 C48.7998 38.6001 50.2998 39.5 49.3999 39.1001 c49.2002 38.8999 49.2002 38.7998 49.3999 38.7002 C48.7998 39.2998 46 36.8999 46.2998 39.5 C44.7002 39.2002 46.7002 38.1001 45.1001 39.1001 C44.1001 40.2002 42.7002 43.1001 43 44 C42.8999 44.2998 42.1001 44.2998 42.6001 44.3999 C42.7998 44.6001 42.7998 44.7002 42.6001 44.7998 C42.3999 45.1001 42.2002 46.3999 41.6001 46.1001 C42.2002 46 43.1001 46.2002 43.3999 45.8999 Cf205.2998 44.2002 m205.1001 43.8999 206.1001 43.7002 205.5 43.3999 C205.6001 43.6001 205.3999 43.7002 205.2998 43.7998 C205.7998 42.8999 202.6001 43.1001 204.8999 42.7998 C204.5 42 203.8999 43.3999 203.8999 42.3999 C205.2998 41.2998 202 42 201.7998 40.8999 C201 41.2998 199.7998 41.1001 199.1001 41.1001 C200.6001 40.3999 198.7002 40.8999 198.8999 40.1001 C197.7002 40.2002 195.7998 39.7002 194.3999 39.8999 C194 38.6001 194.3999 40.7998 193.7998 39.5 C193.1001 40.7998 192.1001 38.7002 191.1001 39.7002 C191.1001 38.8999 189.7998 39.5 189.1001 39.1001 C188.7002 39.7998 187.7998 39.7998 187.2002 39.5 C186.7998 38.8999 186.6001 38.2998 185.7998 38.5 C185.8999 39 186.5 38.1001 186.7998 38.8999 C186.3999 39.2998 185.7998 39 185.2998 39.1001 C185.5 38.7002 184.8999 38.2002 184.5 38.7002 C184 38.1001 183.2998 40.2998 183.1001 38.7002 C182.1001 38.6001 181.8999 39.6001 181 39.1001 C181.2002 38.8999 181.2998 38.7998 181.3999 38.7002 C179.8999 38.3999 177.3999 39.3999 176.8999 37.8999 C175.7998 40.1001 177 37.2998 174.7002 38.2998 C173.6001 37.6001 172 39 171.6001 37.6001 C169.7998 38 168.3999 37.8999 167 37 C163.2998 37.7002 161.6001 35.8999 157.7998 36.2002 C156.1001 35.2998 154 36.2002 152.7998 35.6001 C152.3999 35.8999 151.8999 34.8999 152 35.2002 C152.1001 35.2002 152.2002 35.2998 152.2002 35.3999 C149.7998 35.3999 148.5 35.6001 146.1001 35 C145.7998 33.3999 145 35.3999 144.3999 34.7998 C143.1001 34.5 141.8999 34.1001 140.8999 34.6001 C140.7998 34.2002 140.2002 34.3999 140.2998 33.8999 C140.3999 33.7002 140.6001 33.7002 140.7002 33.8999 C140.5 33.7002 140.1001 33.7002 139.8999 33.2998 C139.8999 33.7002 139.5 33.8999 139.2998 34.1001 C138.7002 32.7002 137.7002 35.2998 137.6001 33.5 C136.3999 33.1001 136 34.3999 134.8999 33.5 C134.6001 33.6001 134.2998 33.7998 133.8999 33.7002 C134.3999 32.1001 132.3999 33.3999 131.7002 33.2998 C130.7002 33.8999 130.1001 32.1001 129.6001 33.2998 C129.3999 33.2998 129.1001 33.3999 129 33.1001 C128.7998 32.3999 129.7998 32.3999 128.7998 32.7002 C128.6001 32.7002 127.8999 32.7002 128.3999 32.7002 C128.5 33.5 126.7002 32.7998 126.1001 33.2998 C125.7998 32.7998 125.5 33.2998 125.2998 32.8999 C127.1001 31.8999 123.7002 33.2002 123.7998 31.8999 C123.5 31.5 122.5 31.5 122.6001 30.7002 C121.7998 30.6001 121.6001 29.3999 121.2002 29 C121.7002 28.3999 120.3999 28.7002 120.7998 28 C118.8999 27.7002 120.7998 26.7998 119.1001 26.5 C119 26.7998 118.7002 26.7002 118.5 26.7002 C118 26.1001 119.6001 26.3999 119.1001 25.7002 C118 25.3999 117 23.8999 116.7998 23.2002 C116.5 23.2002 116 23.3999 115.7998 23 C116 22.8999 116.1001 22.6001 116.3999 22.6001 C116.7998 23.2002 116.6001 22.3999 116.6001 22.2002 C115.3999 22.1001 115 20.7998 114 21 C114.1001 20.7998 114.2002 20.7002 114.3999 20.6001 C114.7002 21.1001 114 19.6001 113.2998 19.5 C113.7002 19.2002 114.1001 19.3999 113.2998 19.2998 C112.7002 18.7998 111.7998 17.6001 111.1001 17.2998 C111.1001 16.2998 109.6001 15.7002 109.3999 15.6001 C107.7002 15.3999 110.2002 16 109.3999 16.5 C110.8999 16.2002 109.6001 17.7002 110.8999 17.5 C111.7002 18.2002 111.6001 19.3999 112.8999 19.2998 C112.8999 19.3999 112.7998 19.5 112.7002 19.5 C112.2002 19.5 112.8999 19.6001 112.8999 19.2998 C113.2002 20.3999 114.2998 22.2002 115.6001 22.6001 C115.5 23.2002 116.1001 23.8999 116.6001 24.5 C116.7998 24.3999 116.8999 24.2002 117.1001 24.2998 C117.1001 24.5 117.7998 24.7002 117.2998 24.8999 C116.7002 25.5 118.5 25.5 117.8999 26.2998 C118.2998 27.1001 119.7998 27.2002 119.2998 28.3999 C122.2002 29.7998 121.5 35.3999 125.1001 33.5 C130.5 33.7002 137.6001 33.8999 142.6001 35 C142.7998 35.7002 142.7002 34.6001 143.2002 34.7998 C143.5 35.2002 144.1001 34.7998 144.3999 35.2002 C144 35.6001 146.2002 34.7998 145.3999 35.7998 C145.5 35.6001 145.3999 35.2998 145.6001 35.2002 C147.6001 36.6001 149 35 151.3999 35.7998 C150 37.2002 153 34.7002 152.6001 36.3999 C152.3999 36.7002 155 36.7002 154.1001 36.3999 C154.5 36.2998 154.7998 35.7998 155.2998 36 C155.8999 36.2998 155 36.2998 154.8999 36.6001 C155.8999 36.3999 157.7998 37.1001 158.2002 36.7998 C159 36.8999 159.5 37 160.5 37.2002 C164.2998 37.2002 167.3999 38.7998 171.3999 38.5 C180.5 40.6001 190.7002 39.1001 200 42.2002 C201.2998 41.7998 202 42.7998 203.2002 42.6001 C204.3999 43 205.8999 47.8999 206.1001 44.7998 C206.3999 44.5 205.7002 44.5 205.2998 44.2002 Cf206.7002 45.5 m206.1001 45.7998 207.1001 45.5 207.2002 45.8999 C207.7002 45.6001 206.8999 45.6001 206.7002 45.5 Cf1 g43.2002 45.1001 m43.2002 45 43.2002 44.8999 43.2002 44.7998 C43.2002 44.8999 43.2002 45 43.2002 45.1001 Cf43.7998 42.2002 m43.8999 42.1001 44 42 Y43.8999 42 43.7998 42 43.7998 42.2002 Cf198.8999 40.7002 m198.6001 40.3999 197.7998 40.2998 197.1001 40.2998 C197.1001 40.7998 198.3999 40.2002 197.8999 40.8999 C198.1001 40.6001 198.6001 40.7998 198.8999 40.7002 Cf0 g51.3999 37.8999 m50.8999 37 53.1001 37.7998 51.3999 37.3999 C51.3999 38.5 49 37.8999 50.3999 38.7002 C50.5 38.2998 50.8999 37.7002 51.3999 37.8999 Cf52 38.5 m52.8999 38.6001 54.7998 38.3999 55.1001 37.8999 C55.2002 36.7998 55.8999 38.2002 56.2002 37.2002 C56.6001 37.7002 56.7002 37.8999 57.2002 37.8999 C56 36.3999 58.2998 38.2998 58.3999 36.7998 C57.8999 38.1001 59.5 37 60.1001 37 C60 35.6001 62.2998 37.2002 62.8999 36.3999 C63.7998 37.3999 64.5 35.2998 65.2002 36.6001 C66.2998 36.5 63.8999 36.1001 65 35.3999 C65.7002 35.3999 66.3999 35.3999 65.2002 35.3999 C64.7998 35.1001 64.3999 35.7998 63.7998 35.6001 C63.5 36.1001 64.3999 36.2998 63.7998 36.6001 C62.2998 35.7002 59.5 36.6001 57.7998 36.6001 C57.6001 36.7998 57.5 37.1001 57.2002 37 C57.1001 36.8999 56.8999 36.7998 57 36.6001 C58.8999 36 56.7998 36 56.3999 36.6001 C56.2998 36.6001 55.6001 36.6001 56.2002 36.6001 C56.2998 36.7002 56.3999 36.7998 56.3999 37 c56.1001 37.7998 54.1001 36.2998 55.1001 37.2002 C54.2998 38.2002 52.2002 38.1001 51 38.7002 C51.3999 38.6001 52.3999 38.7998 52 38.5 Cf187.6001 38.7002 m187.7998 38.7002 188 38.7002 188.2002 38.7002 C188 38.7002 187.7998 38.7002 187.6001 38.7002 Cf1 g173.6001 38.5 m173.7998 38.5 174 38.5 174.2002 38.5 C174 38.5 173.7998 38.5 173.6001 38.5 Cf0 g53.5 37.2002 m53.2998 37.2002 53.1001 37.2002 52.8999 37.2002 C53.1001 37.2002 53.2998 37.2002 53.5 37.2002 Cf68.1001 36.3999 m68.2998 36.3999 68.5 36.3999 68.7002 36.3999 C68.5 36.3999 68.2998 36.3999 68.1001 36.3999 Cf73.3999 36 m74.5 36.2002 76.2002 35.5 76.8999 35.7998 C77.5 34.8999 79.1001 35.7998 80.3999 34.7998 C81 34.8999 80.2002 35.5 80.6001 35.3999 C83.8999 35.2998 88 35.5 91.1001 35.2002 C91.7002 35.6001 92.5 33.7998 92.3999 35.2002 C92.5 34.2998 93.2998 35.6001 94.2002 35.2002 C93.7998 35.2998 93.6001 35 93.3999 34.7998 C93.8999 34.2998 94.5 34.7002 94.7998 35.2002 C97.7002 34.7998 100 35.1001 102.7002 34.1001 C102.5 33.2998 103.7002 33.5 103.2998 32.5 C102.7002 32.3999 102.6001 31.5 102.7002 31.2998 C104 30.7998 101.5 31.1001 102.3999 30.2002 C102.6001 29.8999 102.2002 29.5 101.6001 29.3999 C101.5 28.6001 102.7002 28.6001 101.6001 27.7998 C101.7998 27.2998 100.8999 26.2998 101 25.8999 C100.7998 24.2998 100.7998 22 99.3999 21.2002 C99.5 20.7998 99.8999 21 100.2002 21 C99.6001 20.2002 100.1001 18.7998 99.3999 18.2998 C100 17.5 99 16.2002 99.6001 15.2002 C98.8999 14.7998 100.1001 13.2998 98.5 13.6001 C98.7002 13.1001 99.2002 13.6001 99.3999 13.2002 C98.7998 11 98.6001 8.2998 98.7002 6.3999 C100 6.5 99.8999 7.7002 101 7.7998 C101.1001 9.2998 103.1001 9.2002 103.2998 10.2998 C104.1001 10.5 104.5 11.5 105.1001 11.2998 C103.7002 10.5 103.3999 8.2998 101.6001 8.6001 C101.5 8.3999 102.3999 7.6001 101.7998 8 C101.3999 8.2002 101.2002 7.7998 101 7.6001 C100.8999 7.3999 101.1001 7.2998 101.2002 7.2002 C100.6001 6.5 99.2998 6.2998 99.3999 5.6001 C100.2998 5.2998 97.7002 5.3999 98.7002 4.2998 C98.2998 4.2998 97.7998 4.3999 97.5 3.8999 C96 4.6001 97 6.2002 96.7002 7.3999 C96.7002 8.1001 98.1001 8.2002 97.1001 8.7998 C96.8999 10.2998 97.8999 11.2998 97.5 13 C97.6001 13.2002 98.2998 13.3999 97.7002 13.6001 C96.7002 13.3999 98.2998 14.1001 97.7002 14.3999 C97.6001 14.7998 98.5 15.1001 97.8999 15.3999 C98.1001 16.6001 98.2998 19 98.5 20.3999 C98.2998 20.3999 98.2002 20.2998 98.1001 20.2002 C98.3999 20.2002 99.1001 20.7002 98.5 21.7998 C99.8999 22.6001 98.2002 24.2002 99.6001 24.5 C98.8999 25.1001 100.1001 26 99.7998 26.7002 C100.1001 26.7002 100.2002 27 100.3999 27.2002 C100.2998 27.3999 100 27.2998 99.7998 27.3999 C100.1001 27.5 100.1001 28.1001 100.6001 28.3999 C99.7998 29.2998 103 32.2998 100.7998 33.1001 C100.6001 33.2998 100.5 33.6001 100.2002 33.5 C100.1001 33.2998 99.3999 33.1001 100 32.8999 C99.1001 33.6001 97.3999 33.2998 95.8999 33.8999 C96.2002 33 94.5 34.1001 94.7998 33.7002 C94 33.6001 93.2002 33.7002 92.2002 33.8999 C91.2998 33.2002 90.2998 34.7998 89.7002 33.8999 C87.8999 34.6001 85.2998 33.3999 83.2998 34.6001 C81.8999 33.7002 80.3999 35.6001 79.6001 34.3999 C80.2998 35.5 76.6001 32.8999 77.6001 35 C77.2002 35.2002 77.1001 35.7998 76.5 35.6001 C76.6001 35.2002 76.7998 34.7002 76.7002 34.6001 C76.6001 34.6001 74.3999 34.6001 76.1001 34.7998 C76.2002 34.8999 76.3999 35 76.2998 35.2002 C75.6001 36 74.5 34.3999 73.6001 35 C73.6001 34.8999 73.6001 34.7998 Y73.7998 34 73.2998 36 74.7002 35.6001 C73.7998 35.8999 72.6001 35.8999 71.7998 35.6001 C71.8999 35.5 72 35.2998 72.2002 35.3999 C71.2998 34.8999 69.6001 35.3999 68.5 35 C68.5 35.5 69.6001 35.1001 70.1001 35.6001 C69.1001 37.1001 70.5 35.3999 71 35.3999 C71.3999 36.2002 72.7002 35.5 73.3999 36 Cf65.3999 36 m65.7002 36 66 36 66.2002 36 C66 36 65.7002 36 65.3999 36 Cf63.2002 35.3999 m63.6001 35.6001 60.7998 35.3999 62.5 35.7998 c63.2002 35.7998 62.8999 35.7998 63.2002 35.3999 Cf67.1001 35.6001 m67.1001 35.1001 66.7002 35.2998 66.3999 35.3999 C66.7998 36.1001 69.1001 35.7998 67.1001 35.6001 Cf1 g82.8999 35.2002 m83 35.2002 83.2002 35.2002 83.2998 35.2002 C83.2002 35.2002 83 35.2002 82.8999 35.2002 Cf85.2002 35.2002 m85.5 35.2002 85.7998 35.2002 86.2002 35.2002 C85.7998 35.2002 85.5 35.2002 85.2002 35.2002 Cf90.5 34.7998 m90.7002 34.6001 90.8999 34.5 91.1001 34.3999 C90.8999 34.5 90.7002 34.6001 90.5 34.7998 Cf0 g74.5 34.6001 m74.6001 34.6001 74.7002 34.6001 74.8999 34.6001 C74.7002 34.6001 74.6001 34.6001 74.5 34.6001 Cf1 g95.5 34.6001 m95.7002 34.6001 95.8999 34.6001 96.1001 34.6001 C95.7998 34.3999 95.5 34.2998 95.5 34.6001 Cf85.6001 34.3999 m85.7002 34.3999 85.7998 34.3999 86 34.3999 C85.7998 34.3999 85.7002 34.3999 85.6001 34.3999 Cf0 g141.1001 33.2998 m141.2998 33.2998 141.3999 33.2998 141.5 33.2998 C141.3999 33.2998 141.2998 33.2998 141.1001 33.2998 Cf95.8999 33.1001 m96.1001 33.1001 96.3999 33.1001 96.7002 33.1001 C96.3999 33.1001 96.1001 33.1001 95.8999 33.1001 Cf126.2998 32.5 m126.5 32.5 126.7002 32.5 126.8999 32.5 C126.7002 32.5 126.5 32.5 126.2998 32.5 Cf109 14.6001 m108.7002 14.5 108.3999 14.5 108.2002 14.2002 C108.2998 13.7998 108.7998 14.1001 109 14 C108.7998 13.7002 108.1001 14.2002 107.7998 13.7998 C107.2998 13.2998 106.7002 11.7998 105.5 11.5 C105.7002 12.1001 105.2002 13 105.8999 12.5 C106.6001 13.5 107.5 13.2002 107.6001 14.3999 C108.2998 15.1001 110.1001 15.2998 109 14.6001 CfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF