%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%AI8_CreatorVersion: 10.0%%For: (\601\613) ()%%Title: (flame_040.eps)%%CreationDate: 03.8.5 9:46 PM%%BoundingBox: 13 13 494 354%%HiResBoundingBox: 13 13.6001 493.2998 353.9922%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 1.1%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI3_TemplateBox: 257 183 257 183%AI3_TileBox: -30 -226 542 590%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 596 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -535 759 1 1266 977 18 0 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-30 -226%%AI3_PaperRect:-11 831 585 -11%%AI3_Margin:11 -12 -13 11%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.4 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.4 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 70 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin		Adobe_blend_AI5_vars begin			/_contoneDevice where			{				pop			}			{				/_contoneDevice false def				} ifelse								/_dpiThreshold where			{				pop			}			{					/_dpiThreshold 600 def			} ifelse						/_screenFreqThreshold where			{				pop			}			{					/_screenFreqThreshold 150 def			} ifelse						/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def	/invertXfer	{		[		{			1 exch sub				} /exec load systemdict/currenttransfer get exec /exec load				] cvx systemdict/settransfer get exec			} bd			/spotDict 3 dict dup begin				/nSpots 2 def				/spot1 7 dict def				/spot2 7 dict def		 end			def			composite?			{				/_setgray_ /setgray load def				/_fill_ /fill load def				/_image_ /image load def			}			{				/_setgray_ systemdict/setgray get def				/_fill_ systemdict/fill get def				/_image_ systemdict/image get def			} ifelse		} bd		/terminate		{			currentdict Adobe_blend_AI5_vars eq			{		 end			currentdict Adobe_blend_AI5 eq			{		 end		} if	} if} bd/_compositeSpotDevice where{ begin		_compositeSpotDevice 0 ne {userdict /composite? true put} if end}{	/_compositeSpotDevice 0 def	} ifelse	/nullString () def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/d255- 256 array def0 1 255{	d255- exch 1 d255 2 index get sub put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 89 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where{	pop lv1Fix}{	false} ifelsedef/ccAry1 5 array def/ccTint 0 def/spotColor? false def/colorimage? true def[/tint1Data/tint2Data/spotDict/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/setCustomColor{	dup /ccTint exch store	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/currentCustomColor{	ccAry1 aload pop ccTint} bd/nsetcustomcolor where {	pop}{	/nsetcustomcolor	{		pop setcmykcolor		} bd} ifelse/nsetcustomcolorend where {	pop}{	/nsetcustomcolorend	{	} bd} ifelse/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop				spotColor?			{			dup 1 exch sub /ccTint exch def			ccAry1 4 /Black put			} if		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/bwImage{	setImgSpace cData /_image_ load	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		expandCMYK		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd} if/expandOne{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if} bd/expandSpot{	spotColor?	{		spotDict begin			spot1 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end			spot2 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end	 end	} if} bd/expandCMYK{	4	{		expandOne 4 1 roll	} repeat} bd/colorimage where dup{	exch pop		/ncolorimage where	{		pop	}	{		/ncolorimage {pop colorimage} bd	} ifelse} ifnot{	/ncolorimage where 	{		pop	}	{		/colorimage? false store		/ncolorimage		{			pop pop pop			setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind			_image_ 		sSave restore	} bd	} ifelse} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		colorimage? 		{			expandCMYK		} if		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		bwImage		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		spotColor?		{			spotDict begin				spot1 begin					currentCustomColor makeByte /tintImage exch def					/name exch def					/spot_K exch def					/spot_Y exch def					/spot_M exch def					/spot_C exch def			 end				spot2 initSpotData		 end		} if		currentcmykcolor		4		{			makeByte 4 1 roll		} repeat		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			spotColor?			{				spotDict begin					/spotDict cvx /begin cvx					spot1 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx					spot2 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/spotDict cvx				/nsetcustomcolor cvx			}			{				/setcmykcolor cvx			} ifelse		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg		{			{				_fill			}		}		{			{				_of true eq				{					currentgray 1 ne					{						bwFill					} if				}				{					bwFill				} ifelse			}		} ifelse		def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq				{					setSSave					/cData whiteByte store					/cDataLen 8 store					bwImage					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		/_setgray_ cvx	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if	} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse	} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					_setgray_ 					_fill_ 				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse							nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq			{				/blend? false store			} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt		{			/blend? false def		} if		blend?		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/initSpotData{ begin		/name null def		/tintImage null def		/tintValue null def		/spot_C  null def		/spot_M  null def		/spot_Y  null def		/spot_K  null def end} bd/getRData{	/colorType gMark store	_compositeSpotDevice 0 ne	{		spotDict begin			spot1 initSpotData			spot2 initSpotData	 end		/spotColor? colorType 2 eq colorType 3 eq or def	} 	{		/spotColor? false store	} ifelse	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			_compositeSpotDevice 0 ne			{				spotDict begin					spot1 begin						/name 3 index def						/spot_K 4 index def						/spot_Y 5 index def						/spot_M 6 index def						/spot_C 7 index def				 end			 end			} if			7		} ifelse	} ifelse	/tmp exch def	tmp index 100 div /endPoint xs	_compositeSpotDevice 0 ne	{		tmp 2 add index 3 eq		{			/tmp tmp 4 add def			tmp index dup 			spotDict begin				spot1/name get ne				{					spot2 begin						/name exch def						/spot_K tmp 2 add index def						/spot_Y tmp 3 add index def						/spot_M tmp 4 add index def						/spot_C tmp 5 add index def				 end				}				{					pop				} ifelse		 end		} if	} if	/color? colorType 0 gt store		colorType 3 eq	{		/tint2Data gMark store	} if		colorType 2 ge	{		/tint1Data gMark store	} if	_compositeSpotDevice 0 ne	{		spotDict begin					colorType 2 ge			{				colorType 3 eq				{					spot2 begin						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def						name null eq {/name /Black def} if				 end				} if				spot1 begin					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def					colorType 2 eq 					{						name null eq 						{							/name spot2/name get def							spot2/name null put						} if					}					{						name null eq {/name /Black def} if					} ifelse			 end			} if	 end	} if		/cData gMark store	setCDataLen	colorType 0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		_eo {eoclip} {clip} ifelse		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/bwImage		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq	{		0	}	{		bDataLen ubAxis div	} ifelse	store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where dup	{		exch pop _compositeSpotDevice 1 ne and	} if	{		0 0 bInc 1 /rectfill cvx		}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		/_fill_ cvx	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	spotColor? {nsetcustomcolorend} if		grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt		{			exch		} if		pop store		/pChange ubAxis 0 eq		{			0		}		{			bDataLen ubAxis div		} ifelse		store		pChange .5 gt noImg not and dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	spotColor? {nsetcustomcolorend} if	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put end} if} bd/Bn{1 add dictdup nullString null put/_bn xs} bd/Bd{Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store			/_fill			{				_of true eq				{					currentgray 1 ne					{						__fill					} if				}				{					__fill				} ifelse			} def	} ifelse	/fill	{	} def	} bd	/BB	{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 kPc1 1 1 1 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(\203\214\203C\203\204\201[ 1) Ln0 A0 O0 g2 J 0 j 1 w 2 M []0 d382 317.6001 m415.6001 300.5 449.7002 284.6001 484.8999 271.2998 C486 271.5 487.7002 272.1001 489 271.2998 c491.2998 269.7002 490.2998 266.2002 491.3999 264.5 C490.1001 263.5 492.5 262.3999 490.7998 261.5 C491.8999 261 490.5 260.7002 490.6001 260.2002 c491.2002 258.5 489.8999 256.7002 490.6001 254.8999 C490.2998 254.1001 489.6001 252.8999 489.6001 251.7998 C489.7002 251.2002 489.5 250.1001 489 249.5 C485.6001 231.7998 477.6001 215.8999 470.5 199.7002 c460.6001 180.6001 451.1001 161 445.2002 140.5 C445 138.2002 444.6001 136.7998 444.7998 134.2998 C444.2998 133.3999 444.5 132.3999 443.2998 131.7002 C439.7002 131 437.8999 127.5 434.8999 125.2998 c429.5 120.2998 423.5 114.7998 418.3999 110.1001 c416.1001 107.6001 413.1001 104.8999 410.7998 103.1001 C410.7002 103.1001 410.7002 103.2002 410.6001 103.2998 C407 99.7002 403.6001 96.1001 400.2998 92.3999 C398 91.6001 396.5 89.8999 395.2002 88.2998 C395.1001 87.7998 394.6001 87.6001 394.3999 87.2002 C394.1001 87.7998 393.8999 87.1001 393.7002 87 C389.6001 82.6001 384.6001 77.7998 381.2002 73.3999 c379 70.5 374.3999 69.3999 373.7998 65.3999 C373.2998 64.6001 372.2998 64.7002 371.5 65 c371 65.1001 370.8999 66 370.2998 66 c355.2998 67.6001 339.2002 67.2998 324.7998 67.8999 c311.3999 68.7002 298.7998 68.8999 285.5 68.7002 c281.1001 69.2002 276.7002 69.1001 271.5 69.1001 c261.6001 69.5 250.7002 70.6001 240.8999 70.1001 C240.1001 69.3999 238.8999 69.7002 238 69.2998 C234.3999 66.1001 229.8999 63.1001 226.2998 59.5 C224.7998 59.7002 224.3999 56.7998 222.6001 56.3999 C222.7002 56.5 222.5 56.6001 222.3999 56.7998 C221.2998 56.2998 222.2998 55.3999 221.1001 55.7002 C216.8999 51.7002 211.7998 47.5 207.3999 43.6001 C206.2002 43.7002 206.1001 42.6001 205.1001 42.2002 C205.6001 42.7002 203.5 40.7002 204.2998 41.2998 C200.8999 38.5 197.8999 34.7998 194 32.5 C194.1001 32.7998 194.8999 33 194.3999 33.2998 C193 31.8999 190.7998 30.7002 190.1001 29 C189.5 28.5 190.7002 29.2998 190.1001 29.3999 C187 26.6001 183.6001 24.1001 180.7998 21 C182.1001 20.6001 182.5 22.6001 183.7002 23 C180.8999 20.5 177.7998 16.6001 174.2002 13.6001 C172.5 13.5 172.7002 16.1001 170.7002 16.2998 C168.6001 18.7998 165.2998 20.3999 165.7998 24.1001 C168.1001 27.1001 168.7998 30.7002 170.5 33.8999 c177.6001 49 182.7998 65 190.7002 79.3999 C189.5 80.3999 187.8999 80.1001 186.6001 80.6001 c175.7998 84.2998 164.7998 85.5 153.8999 88.7002 C151.5 88.7002 149.1001 89.8999 146.7002 90.5 c137.1001 93.7002 127.2002 96.2998 118.1001 100.6001 C116 100.7002 114.7998 102.1001 112.7002 102.3999 C105.2002 105.6001 97.1001 107.8999 89.2998 109.6001 C87.8999 109.3999 86.3999 111.5 85.7998 110.5 C85.7998 111.8999 84.5 110.2998 83.8999 111.1001 C81.8999 112.2002 79.5 111.6001 77.2998 113.1001 C75.3999 113 74 112.6001 72.7998 114.6001 C70.1001 115.6001 68.2002 119 66.3999 121 C56.8999 137.5 47.3999 154.3999 38.5 172 c31 185.2002 25.6001 199.1001 16.8999 211.5 C16.7 211.5 16.3 211.3999 16.7 211.7002 C14.8 213.7998 11.7 216.7002 13 219.5 C12.8 220.1001 13.2 220.1001 13.6001 220.2998 C13.7 220.8999 16 221.7998 15.8 223 C23.8999 235.2998 34.2002 247.1001 43.2002 259.3999 c59.8999 281.7998 77.8999 303.3999 97.2998 323.2002 C97.1001 324.7998 98.2998 325.7002 99.3999 326.5 C100.7002 326.2998 102.3999 326.2002 103.2998 325.2002 C104 324.7002 103.8999 323.8999 104.5 323.2002 C122.7998 327.1001 141.2998 329.5 159.7998 332.2002 c192.7998 336.5 225.2998 343.7998 259 348.2998 c270.6001 350.2002 282.8999 352.2002 294.7998 353.3999 C299.3999 355.6001 303.7998 351.3999 308.2002 349.8999 c333.3999 340.7002 357.7002 329 382 317.6001 cf1 g321.7002 331 m335.6001 325.6001 349.2998 319.7002 362.7002 313.1001 C363 313.6001 363 312.7998 363.2998 312.7002 c378.1001 306 392.2002 299 406.7002 291.7002 c423.8999 283 441.7002 274.7002 459.7998 267 C458.2002 267.2002 456 268.6001 454.2002 268.7002 C463.8999 263.7002 474.2002 260.2998 484 255.7002 C482.7002 250.1001 481.1001 243.2998 478.2998 238.2002 c477 234.6001 476 231 474 227.7002 c468.2998 214.1001 461.6001 201.2998 455.3999 188.2002 c455.1001 187.7002 454.8999 186.6001 454.6001 185.7998 C452.8999 183.2998 452.3999 180.8999 450.8999 178.3999 C451.1001 177.3999 449.7998 176.6001 449.7002 175.5 C446.8999 167 442.8999 159.1001 440.3999 150.6001 C439.7998 149.7002 439.2002 149.8999 439.2002 148.7002 C439 148.7002 438.7002 148.7998 438.6001 148.5 c438.1001 147.7998 438.2998 147.5 438 146.5 C414.3999 126.3999 394.3999 100.5 371.1001 79.7998 c370.5 79.2998 369.5 80 369 79.2002 C348.1001 80.1001 327.2998 79.2998 306.7002 80.3999 c284.2002 80.2002 263 81.5 239.3999 82.5 c237 82.7002 236.3999 85.1001 233.8999 83.8999 C232.2998 83.7002 232.2002 80.7998 230 79.7998 C213.3999 65.5 196 49.3999 179.3999 35.2002 C180.5 37.6001 181.1001 40.7998 182.8999 42.3999 C182.7998 43 183.8999 43.7998 183.1001 44.2002 C182.3999 42.2998 183.7998 47.5 183.5 44.3999 C184.7998 45.6001 183 46.6001 184.5 47.1001 C185.8999 49.2998 186.7002 52 187.7998 54.5 C187.8999 54.3999 187.8999 54.3999 188 54.2998 C187.5 52.7002 186.6001 50.1001 186.2002 48.2998 C189.5 55.2998 192.6001 62.7998 196.5 69.5 c197.7002 72.3999 199 75.5 201 78 C201.2002 78.3999 200.7002 78.7002 200.6001 79 C200 82.1001 199.2998 84.7002 198.5 87.7998 C197.8999 87.8999 198.1001 88.7998 197.5 88.8999 C170.8999 95.2998 143.6001 98.3999 118.7002 109 c104.1001 115.1001 88.8999 118.6001 73.6001 123.3999 C69.7998 125.7002 67.2998 129.8999 64.7998 133.8999 c63.2998 136.2998 62.2002 138.8999 60.8999 141.2998 C59 143.5 58 146 56.6001 148.2998 c50.1001 161.5 42.2002 174 36.3999 187 c33 193.1001 30 199.6001 26.7 205.5 C26.2 207.6001 24.3999 209.6001 25.1001 211.7002 c26.3999 214.5 28.3 216.7002 29.8 219.2998 C30 219.2998 30.1001 219.2998 30.2 219.2998 C37.7002 229.5 45.2002 238.5 52.2998 248.7002 C54.5 250.6001 56.2002 252.2998 57.6001 254.8999 C58.3999 255.2002 58.3999 256.2002 59 256.7002 C58.3999 256.7002 58.3999 256.8999 59 257.2998 C59.2998 257.8999 59.1001 257.2998 58.7998 257.1001 C58.7998 257 58.8999 256.8999 59 256.7002 C62.3999 259.7998 64.6001 264.6001 67.7002 267 c68.7002 267.7998 69.7002 269.2002 69.7002 270.2998 C70.2998 271.7002 71.7998 270.7002 71.6001 272 C70.1001 271.1001 71.7998 272.7002 72 272.2002 C72.5 272.5 72.5 273 72.7998 273.3999 C71.7002 272.8999 74.1001 276 73.2002 273.7998 C74 274.8999 75.1001 275.2998 75.5 276.5 C74.7002 276.6001 74.8999 276.7002 75.7002 276.7002 C75.7998 277.5 75.3999 277.7002 76.2998 278.2998 C76.5 278.3999 76.6001 278.2002 76.7002 278.1001 C78.2002 279.2998 78.7002 280.7998 80 282 C79.3999 282.2002 79.8999 282.5 80 282.6001 C80.2002 282.2998 79.5 282.2002 80 282 C80.5 282.2002 80.7998 282.7998 81.1001 283.2998 C80.8999 283.7998 80.2998 283.1001 80.7998 283.5 C81.1001 282.8999 81.2998 283.6001 81.5 283.7002 C82.1001 284.2002 82.7002 285 82.7002 285.5 C82.5 285.5 82.5 285.6001 82.5 285.7002 C82.7002 285.2002 83.2002 285.5 83.5 285.8999 C83.6001 286.1001 83.3999 286.2002 83.2998 286.3999 C83.7998 286.1001 84.2998 287 84.7998 287.3999 C84.2002 287.7002 83.7998 287.6001 84.7998 287.6001 C84.8999 288.2998 84.7998 287.5 85.3999 288 c91.1001 295.2998 98.1001 302 105.1001 308.7998 C106.2998 308.7002 107.7002 308.1001 109 308.7998 c111.2998 309.5 114.2998 309.7002 116.6001 310.7998 C117.5 310.2998 118.3999 311.1001 119.2998 311.2002 C119.2002 311.2998 119.2002 311.3999 119.1001 311.3999 C118.5 311.6001 120.2002 311 120.7998 311.3999 C123.1001 311.6001 120 312.5 122.3999 311.8999 C122.8999 312.1001 123.6001 312.3999 124.5 312.2998 C126.8999 313.1001 129.7002 313.1001 132.1001 313.8999 C129 313.7002 133.5 314.5 134.2998 314.5 c135.2998 314.5 134.6001 314.5 134.1001 314.5 C134.2998 313.5 135.7998 314.7002 136.7998 314.2998 C139 315.2002 140.8999 314.5 143 315.6001 C142.7998 315.8999 142.3999 315.7002 142.1001 315.7998 C143.8999 316.1001 145.8999 316 147.5 316.6001 C147.3999 315.3999 148.1001 316.5 148.7002 316.2002 C149.2002 316.2998 148.7998 316.7002 148.5 316.6001 c147.2002 316.3999 149.2002 317 149.7998 316.7998 C150.1001 316 150.2998 316.8999 150.7998 317 c174.7002 320.1001 199.3999 324.5 223 329.1001 c228 329.3999 234.2002 331 238.6001 331.6001 c246.7998 332.3999 255.5 334.3999 263.5 335.1001 c271.1001 336 279.2998 338.2002 286.7998 338.7998 c290.5 339.2002 295 339.7002 299.1001 339.2002 c306.8999 337.2002 314.1001 333.5 321.7002 331 cf255.2998 336.7998 m255.5 336.7998 255.7002 336.7998 255.8999 336.7998 C255.7002 336.7998 255.5 336.7998 255.2998 336.7998 Cf251.3999 334.1001 m251.7998 334.1001 252.2002 334.1001 252.6001 334.1001 C252 334 251.3999 333.8999 251.3999 334.1001 Cf240.8999 332.3999 m241.2002 332.3999 241.3999 332.3999 241.7002 332.3999 C241.3999 332.3999 241.2002 332.3999 240.8999 332.3999 Cf231.2002 331 m231.3999 331 231.6001 331 231.7998 331 C231.6001 331 231.3999 331 231.2002 331 Cf214.3999 328.1001 m214.6001 328.1001 214.7998 328.1001 215 328.1001 C214.7998 328.1001 214.6001 328.1001 214.3999 328.1001 Cf205.1001 326.5 m205.2002 326.5 205.3999 326.5 205.5 326.5 C205.3999 326.5 205.2002 326.5 205.1001 326.5 Cf201.3999 325.7998 m201.6001 325.7998 201.7998 325.7998 202 325.7998 C201.7998 325.7998 201.6001 325.7998 201.3999 325.7998 Cf0 g146.1001 316.2002 m146.5 316.2002 146.8999 316.2002 147.2998 316.2002 C146.7998 316.1001 146.2998 316.1001 146.1001 316.2002 Cf143.7998 315.7998 m144.1001 315.7998 144.2998 315.7998 144.6001 315.7998 C144.2998 315.7998 144.1001 315.7998 143.7998 315.7998 Cf1 g140.8999 315.6001 m141.1001 315.6001 141.2998 315.6001 141.5 315.6001 C141.2998 315.6001 141.1001 315.6001 140.8999 315.6001 Cf136.2002 314.8999 m136.5 314.8999 136.8999 314.8999 137.2002 314.8999 C136.8999 314.8999 136.5 314.7998 136.2002 314.8999 Cf0 g132.7002 314.1001 m133 314.1001 133.2002 314.1001 133.5 314.1001 C133.2002 314.1001 133 314.1001 132.7002 314.1001 Cf492.2998 292.1001 m492.6001 292.1001 493 292.1001 493.2998 292.1001 C493 292.1001 492.6001 292.1001 492.2998 292.1001 Cf59.8999 287.7998 m59.8999 287.7002 60 287.7002 60.1001 287.6001 C60 287.5 59.8999 287.5 59.8999 287.7998 Cf436.2998 276.7002 m436.5 276.6001 436.7002 276.6001 436.8999 276.5 C436.7002 276.6001 436.5 276.6001 436.2998 276.7002 Cf439.6001 275.2002 m440.7998 274.7998 441.8999 274.2998 443.1001 273.7998 C441.8999 274.2998 440.7998 274.7998 439.6001 275.2002 Cf444.2998 273.2002 m444.6001 273.1001 444.8999 272.8999 445.2002 272.7998 C444.8999 272.8999 444.6001 273.1001 444.2998 273.2002 Cf445.6001 272.6001 m448.5 271.2998 451.2998 270.1001 454.2002 268.8999 C451.2998 270.1001 448.5 271.2998 445.6001 272.6001 Cf70.3999 270.7002 m70.5 270.7002 70.6001 270.7002 V70.3999 270.6001 70.2998 270.3999 70.3999 270.7002 Cf1 g461.6001 266 m463.2002 265.2998 464.7998 264.6001 466.3999 263.8999 C464.7998 264.6001 463.2002 265.2998 461.6001 266 Cf468.2002 263.1001 m468.6001 262.8999 469 262.7002 469.3999 262.5 C469 262.7002 468.6001 262.8999 468.2002 263.1001 Cf471.1001 261.8999 m471.2998 261.7998 471.5 261.7002 471.7002 261.7002 C471.5 261.7002 471.2998 261.7998 471.1001 261.8999 Cf90.1001 110.5 m90.2002 110.5 90.3999 110.5 90.5 110.5 C90.3999 110.5 90.2002 110.5 90.1001 110.5 Cf91.2998 110.1001 m91.7002 110 92 109.8999 92.3999 109.8999 C92 109.8999 91.7002 110 91.2998 110.1001 Cf157.6001 88.5 m148.8999 90.5 140.5 93 132.2998 96.1001 C140.7002 93.3999 149 90.6001 157.6001 88.5 Cf158.3999 88.2998 m159.5 88 160.6001 87.7002 161.7002 87.3999 C160.6001 87.7002 159.5 88 158.3999 88.2998 Cf166.3999 86.3999 m165.3999 87 163.3999 86.7998 162.1001 87.3999 C163.5 87 176 84.7002 166.3999 86.3999 Cf172.7998 85.2002 m172.1001 85.2998 171.3999 85.2998 170.7002 85.6001 C171.6001 85.7998 172.1001 85.2998 172.7998 85.2002 Cf175.2998 84.7998 m175.2998 84.7002 175.3999 84.6001 175.5 84.5 C175.7002 84.5 175.8999 84.5 175.2998 84.7998 Cf176.8999 84.2998 m177.2002 84.2002 177.5 84.1001 177.7002 83.8999 C177.5 84.1001 177.2002 84.2002 176.8999 84.2998 Cf181.6001 83.1001 m181.7002 83.1001 181.7998 83.1001 181.8999 83.1001 C181.8999 83 182 83 181.6001 83.1001 Cf386.7002 81.1001 m386.7002 80.8999 386.6001 80.7998 386.5 80.6001 C386.6001 80.7998 386.7002 80.8999 386.7002 81.1001 Cf385.8999 80 m385.7002 79.7998 385.5 79.6001 385.2998 79.3999 C385.5 79.6001 385.7002 79.7998 385.8999 80 Cf380.7998 75.1001 m380.7998 75 380.7998 75 380.7998 74.8999 C380.6001 74.7998 380.5 74.6001 380.7998 75.1001 Cf250.1001 72.6001 m250.5 72.6001 250.7998 72.6001 251.2002 72.6001 C250.7998 72.6001 250.5 72.6001 250.1001 72.6001 Cf246.6001 72 m246.8999 72 247.1001 72 247.2998 72 C247.1001 72 246.8999 72 246.6001 72 Cf252 71.7998 m252.8999 71.7998 253.7998 71.7998 254.7002 71.7998 C253.7998 71.7998 252.8999 71.7998 252 71.7998 Cf256.1001 71.7998 m256.2998 71.7998 256.5 71.7998 256.7002 71.7998 C256.7998 71.7002 256.8999 71.7002 256.1001 71.7998 Cf258.6001 71.6001 m259.2998 71.5 259.8999 71.5 260.6001 71.3999 C259.8999 71.5 259.2998 71.5 258.6001 71.6001 Cf261.8999 71.3999 m262.6001 71.2998 263.2002 71.2998 263.8999 71.2002 C263.2002 71.2998 262.6001 71.2998 261.8999 71.3999 Cf265.6001 71.2002 m266.5 71.1001 267.5 71 268.5 71 C267.5 71 266.5 71.1001 265.6001 71.2002 Cf268.8999 71 m269.1001 71 269.2998 71 269.5 71 C269.6001 70.8999 269.6001 70.7998 268.8999 71 Cf290.7002 71 m292.2002 71 293.7002 71 295.2002 71 C293.7002 71 292.2002 71 290.7002 71 Cf271.7002 70.7998 m272.3999 70.7998 273 70.7998 273.6001 70.7998 C273 70.7998 272.3999 70.7998 271.7002 70.7998 Cf274.3999 70.7998 m275.2002 70.7002 276.1001 70.6001 276.8999 70.6001 C276.1001 70.6001 275.2002 70.7002 274.3999 70.7998 Cf278.5 70.6001 m279.2002 70.7002 280.2998 70.6001 281 70.3999 C280.1001 70.1001 279.5 70.7998 278.5 70.6001 Cf282.8999 70.6001 m284.3999 70.5 286 70.3999 287.6001 70.3999 C286 70.3999 284.3999 70.5 282.8999 70.6001 Cf291.1001 70.3999 m291.3999 70.1001 286.5 69.8999 290.1001 70.6001 C290.3999 70.5 291.1001 70.7002 291.1001 70.3999 Cf308.3999 70.6001 m308.8999 70.6001 309.2998 70.6001 309.7998 70.6001 C309.2998 70.6001 308.8999 70.6001 308.3999 70.6001 Cf310.3999 70.6001 m310.7998 70.6001 311.1001 70.6001 311.3999 70.6001 C311.1001 70.6001 310.7998 70.6001 310.3999 70.6001 Cf291.7002 70.1001 m294.7998 70.5 297.1001 70.5 299.7002 70.1001 C297.6001 70.1001 294.3999 70.1001 291.7002 70.1001 Cf307.1001 69.8999 m305.5 69.8999 303 69.8999 301.3999 69.8999 C303 70.3999 305.7998 69.8999 307.1001 69.8999 Cf314.5 70.3999 m314.7998 70.3999 315.1001 70.3999 315.3999 70.3999 C315.1001 70.3999 314.7998 70.3999 314.5 70.3999 Cf313.8999 69.7002 m315.3999 69.7002 316.7998 69.6001 318.2002 69.5 C316.7998 69.6001 315.3999 69.7002 313.8999 69.7002 Cf325.6001 69.2998 m324.7998 69.3999 323.2998 69.1001 323.2002 69.5 C323.8999 69.2998 324.7998 69.2998 325.6001 69.2998 Cf310.3999 69.2998 m310.6001 69.2998 310.7998 69.2998 311 69.2998 C310.7998 69.2998 310.6001 69.2998 310.3999 69.2998 Cf326.1001 69.2998 m326.7002 69.2998 327.2998 69.2998 327.8999 69.2998 C327.2998 69.2998 326.7002 69.2998 326.1001 69.2998 Cf330.3999 69.2998 m331.1001 69.2998 331.7002 69.2998 332.3999 69.2998 C331.7002 69.2998 331.1001 69.2998 330.3999 69.2998 Cf190.2998 60.2998 m190.1001 60.1001 189.8999 59.8999 189.7002 59.7002 C189.7002 59.7998 189.7998 59.8999 190.2998 60.2998 Cf223.3999 57.6001 m223.2002 57.3999 223 57.2002 222.7998 57 C223 57.2002 223.2002 57.3999 223.3999 57.6001 Cf188.6001 56.7998 m188.6001 56.6001 188.6001 56.3999 188.6001 56.2002 C188.6001 56.3999 188.6001 56.6001 188.6001 56.7998 Cf186.3999 52.7002 m186.2002 52.2998 186.1001 52 186 51.6001 C186.1001 52 186.2002 52.2998 186.3999 52.7002 Cf214.3999 51.7998 m214 51.5 213.7002 51.1001 213.2998 50.7998 C213.7002 51.1001 214 51.5 214.3999 51.7998 Cf210.2002 48.1001 m210.1001 48 210 47.8999 209.7998 47.7002 C210 47.8999 210.1001 48 210.2002 48.1001 Cf176.7002 17.8999 m187.1001 27.7998 196.6001 36.7998 208.2002 46.2998 C197.3999 36.2002 186.8999 27.7002 176.7002 17.8999 Cf0 g193.6001 31.8999 m193 31.2998 192.5 30.7998 191.8999 30.2002 C192.5 30.7998 193 31.2998 193.6001 31.8999 Cf185.6001 24.8999 m186 25.7998 187 25.3999 187.3999 26.2998 C186.8999 25.6001 186.3999 24.7002 185.6001 24.8999 Cf1 g180.7998 20.7998 m180 20 179.2002 19.2998 178.3999 18.5 C179.2002 19.2998 180 20 180.7998 20.7998 Cf176.1001 17.5 m175.6001 17 175.1001 16.5 174.7002 16 C175.1001 16.5 175.6001 17 176.1001 17.5 Cf175.2998 15 m175 15 174.7998 15 174.7002 15.2002 C175.2998 15.7002 177.8999 18.7998 176.7002 16.2998 C176 16.6001 175 15.7002 175.2998 15 CfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF