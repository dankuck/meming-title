%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%AI8_CreatorVersion: 10.0%%For: (\601\613) ()%%Title: (flame_064.eps)%%CreationDate: 03.8.5 9:56 PM%%BoundingBox: 6 15 288 303%%HiResBoundingBox: 6.3999 15.7998 287.5371 302.2002%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 1.1%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI3_TemplateBox: 153.5 155 153.5 155%AI3_TileBox: -133.5 -254 438.5 562%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 596 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -638.5 731 1 1266 977 18 0 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-133.5 -254%%AI3_PaperRect:-11 831 585 -11%%AI3_Margin:11 -12 -13 11%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.4 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.4 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 70 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin		Adobe_blend_AI5_vars begin			/_contoneDevice where			{				pop			}			{				/_contoneDevice false def				} ifelse								/_dpiThreshold where			{				pop			}			{					/_dpiThreshold 600 def			} ifelse						/_screenFreqThreshold where			{				pop			}			{					/_screenFreqThreshold 150 def			} ifelse						/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def	/invertXfer	{		[		{			1 exch sub				} /exec load systemdict/currenttransfer get exec /exec load				] cvx systemdict/settransfer get exec			} bd			/spotDict 3 dict dup begin				/nSpots 2 def				/spot1 7 dict def				/spot2 7 dict def		 end			def			composite?			{				/_setgray_ /setgray load def				/_fill_ /fill load def				/_image_ /image load def			}			{				/_setgray_ systemdict/setgray get def				/_fill_ systemdict/fill get def				/_image_ systemdict/image get def			} ifelse		} bd		/terminate		{			currentdict Adobe_blend_AI5_vars eq			{		 end			currentdict Adobe_blend_AI5 eq			{		 end		} if	} if} bd/_compositeSpotDevice where{ begin		_compositeSpotDevice 0 ne {userdict /composite? true put} if end}{	/_compositeSpotDevice 0 def	} ifelse	/nullString () def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/d255- 256 array def0 1 255{	d255- exch 1 d255 2 index get sub put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 89 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where{	pop lv1Fix}{	false} ifelsedef/ccAry1 5 array def/ccTint 0 def/spotColor? false def/colorimage? true def[/tint1Data/tint2Data/spotDict/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/setCustomColor{	dup /ccTint exch store	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/currentCustomColor{	ccAry1 aload pop ccTint} bd/nsetcustomcolor where {	pop}{	/nsetcustomcolor	{		pop setcmykcolor		} bd} ifelse/nsetcustomcolorend where {	pop}{	/nsetcustomcolorend	{	} bd} ifelse/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop				spotColor?			{			dup 1 exch sub /ccTint exch def			ccAry1 4 /Black put			} if		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/bwImage{	setImgSpace cData /_image_ load	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		expandCMYK		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd} if/expandOne{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if} bd/expandSpot{	spotColor?	{		spotDict begin			spot1 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end			spot2 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end	 end	} if} bd/expandCMYK{	4	{		expandOne 4 1 roll	} repeat} bd/colorimage where dup{	exch pop		/ncolorimage where	{		pop	}	{		/ncolorimage {pop colorimage} bd	} ifelse} ifnot{	/ncolorimage where 	{		pop	}	{		/colorimage? false store		/ncolorimage		{			pop pop pop			setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind			_image_ 		sSave restore	} bd	} ifelse} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		colorimage? 		{			expandCMYK		} if		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		bwImage		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		spotColor?		{			spotDict begin				spot1 begin					currentCustomColor makeByte /tintImage exch def					/name exch def					/spot_K exch def					/spot_Y exch def					/spot_M exch def					/spot_C exch def			 end				spot2 initSpotData		 end		} if		currentcmykcolor		4		{			makeByte 4 1 roll		} repeat		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			spotColor?			{				spotDict begin					/spotDict cvx /begin cvx					spot1 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx					spot2 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/spotDict cvx				/nsetcustomcolor cvx			}			{				/setcmykcolor cvx			} ifelse		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg		{			{				_fill			}		}		{			{				_of true eq				{					currentgray 1 ne					{						bwFill					} if				}				{					bwFill				} ifelse			}		} ifelse		def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq				{					setSSave					/cData whiteByte store					/cDataLen 8 store					bwImage					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		/_setgray_ cvx	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if	} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse	} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					_setgray_ 					_fill_ 				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse							nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq			{				/blend? false store			} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt		{			/blend? false def		} if		blend?		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/initSpotData{ begin		/name null def		/tintImage null def		/tintValue null def		/spot_C  null def		/spot_M  null def		/spot_Y  null def		/spot_K  null def end} bd/getRData{	/colorType gMark store	_compositeSpotDevice 0 ne	{		spotDict begin			spot1 initSpotData			spot2 initSpotData	 end		/spotColor? colorType 2 eq colorType 3 eq or def	} 	{		/spotColor? false store	} ifelse	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			_compositeSpotDevice 0 ne			{				spotDict begin					spot1 begin						/name 3 index def						/spot_K 4 index def						/spot_Y 5 index def						/spot_M 6 index def						/spot_C 7 index def				 end			 end			} if			7		} ifelse	} ifelse	/tmp exch def	tmp index 100 div /endPoint xs	_compositeSpotDevice 0 ne	{		tmp 2 add index 3 eq		{			/tmp tmp 4 add def			tmp index dup 			spotDict begin				spot1/name get ne				{					spot2 begin						/name exch def						/spot_K tmp 2 add index def						/spot_Y tmp 3 add index def						/spot_M tmp 4 add index def						/spot_C tmp 5 add index def				 end				}				{					pop				} ifelse		 end		} if	} if	/color? colorType 0 gt store		colorType 3 eq	{		/tint2Data gMark store	} if		colorType 2 ge	{		/tint1Data gMark store	} if	_compositeSpotDevice 0 ne	{		spotDict begin					colorType 2 ge			{				colorType 3 eq				{					spot2 begin						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def						name null eq {/name /Black def} if				 end				} if				spot1 begin					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def					colorType 2 eq 					{						name null eq 						{							/name spot2/name get def							spot2/name null put						} if					}					{						name null eq {/name /Black def} if					} ifelse			 end			} if	 end	} if		/cData gMark store	setCDataLen	colorType 0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		_eo {eoclip} {clip} ifelse		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/bwImage		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq	{		0	}	{		bDataLen ubAxis div	} ifelse	store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where dup	{		exch pop _compositeSpotDevice 1 ne and	} if	{		0 0 bInc 1 /rectfill cvx		}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		/_fill_ cvx	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	spotColor? {nsetcustomcolorend} if		grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt		{			exch		} if		pop store		/pChange ubAxis 0 eq		{			0		}		{			bDataLen ubAxis div		} ifelse		store		pChange .5 gt noImg not and dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	spotColor? {nsetcustomcolorend} if	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put end} if} bd/Bn{1 add dictdup nullString null put/_bn xs} bd/Bd{Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store			/_fill			{				_of true eq				{					currentgray 1 ne					{						__fill					} if				}				{					__fill				} ifelse			} def	} ifelse	/fill	{	} def	} bd	/BB	{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 kPc1 1 1 1 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(\203\214\203C\203\204\201[ 1) Ln0 A0 O0 g2 J 0 j 1 w 2 M []0 d204.7002 300.2998 m206.1001 300.2002 207.1001 298.8999 208.2002 297.8999 C208.1001 296.6001 209.1001 295.2002 210 294.7998 C212.7002 290.3999 216.1001 286.2998 219.1001 282 C218.6001 281.2998 220.1001 281 220.2998 280.3999 c221.7002 276.7002 225.5 274.7002 226.7002 270.7002 c227 268.8999 229.2002 268.6001 229.6001 266.6001 C232 265.3999 230.7002 263.1001 233.1001 262.2998 C234.8999 259.7002 236.5 257.1001 238.3999 255.1001 C238.2002 254 239.5 253.7998 240.1001 253.2002 C241.2998 250.2998 244.2002 247.7998 244.7998 244.7998 C247.2998 243.6001 246.5 240.3999 249.5 239.7002 C251.1001 237.6001 254.1001 236 255.2998 233.5 C256.7998 233 256.8999 231.6001 258 230.7998 C257.8999 229.7998 258.7002 229.2002 259.6001 229.2002 C261.8999 228.3999 260.7998 225.1001 263.5 225 C263.8999 223.2998 266.2002 223.2998 266.6001 221.6001 C268.8999 219.7998 269.7998 217.7002 272.3999 216.2002 C273.1001 214.2002 274.8999 214.2998 275.7002 212.2998 C276.6001 212.3999 277.2002 211.7998 277.8999 212.7002 C279.2998 212.2002 281 213.7998 281.6001 212.1001 C284 212.6001 284.2002 209.8999 285.8999 209.3999 C287.3999 206.7002 288.3999 202.7002 287 199.7002 C287.1001 198.7002 285.7998 197.3999 284.8999 196.8999 C285.2002 195.3999 282.2998 195.5 283.7002 193.7998 C283 192.3999 281.6001 191.5 281 189.8999 C279 189.2002 279 187.1001 277.8999 186.2002 C276.8999 183.7002 274.3999 182.2998 274 179.7998 C273.2998 178.3999 273.1001 176.6001 271.7002 175.7002 C272 174.8999 271.2998 174.2998 271.1001 173.7998 C270 172.5 269.3999 170.6001 267.7998 169.2998 C267.6001 168 268 166.3999 266.2002 166.2002 C265 163.7998 265.3999 161.8999 263.2998 159.7998 C263.8999 158.2002 261.7998 158.2002 261.5 157 c260.7998 154.1001 257.7002 152.6001 258 149.6001 C257.6001 147.5 255.7998 146.3999 255.2998 144.6001 C253.6001 142 251.7002 139.1001 250.7998 136 C249.1001 134.6001 247.7002 132.3999 246.2002 130.6001 C245.2998 128.5 243 126.7002 242.7002 124.2998 C239.7002 120.7002 237.6001 116.2002 234.7002 112.5 C232.7998 111.2998 233.5 109.5 231.6001 108.2002 C231.7002 107.2002 232.5 106.7998 231.6001 105.8999 C231.2002 103.3999 228.7002 106.5 226.8999 104.8999 C226.6001 104.7998 225.8999 104 225.2998 103.7002 c223 102.8999 220.7002 102 218.5 101.2002 C215.8999 102.6001 214.6001 100.2002 212.1001 101 C211.2002 100.1001 209.5 101.2002 208.7998 99.7998 C207.1001 101 206 98.2002 204.5 99.7998 C202.7998 98.2998 200.5 98.5 198.5 97.8999 C197.2002 99.1001 195.8999 97.2002 194.6001 97.5 C193.2002 99.1001 191.7002 97.1001 190.1001 97.2998 C188.8999 95.7998 186.6001 96.1001 184.8999 95.5 C182.8999 97.1001 181.3999 94.1001 179.3999 95 C178.2002 93.2002 176.1001 95.3999 174.8999 93.7998 C173 93.3999 170.8999 92.6001 168.7002 92.7998 c166.5 93.1001 165 91.7002 163.5 90.1001 C162.6001 88.1001 161.7998 85.7002 161.8999 83.5 C160.7998 82.8999 162.2002 82 161.5 81.2998 C160.3999 77.5 161.2002 73 159.7998 69.2998 C160.2998 65.5 159.6001 61.8999 159.7998 58.3999 C159.5 58 159.7002 56.1001 159.6001 55.2998 C160.1001 53.7998 159.1001 53.1001 159.3999 51 C159.1001 48.8999 160 47 159.3999 45.1001 C160.1001 41.1001 159.7998 38.1001 160.7002 34.6001 c161 33.2998 159.1001 32.1001 160.7002 31.2998 C160.2998 28.8999 162.2998 27.1001 160.8999 25.1001 C161.6001 24.7002 161.1001 23.7002 161.2998 23 c161.5 21.7002 164.3999 20.7998 162.7002 19.1001 C161.7998 18.7998 161.2002 17.7002 160.8999 17.2998 C159.2002 16.5 156.1001 15.2998 153.8999 16.7002 C153.2002 16.8999 152.6001 16.3999 152.3999 15.7998 C149.8999 16.3999 149.1001 18.3999 148.2998 20.6001 C145.2998 22.3999 144.7998 26.3999 141.7002 28.2002 C140.6001 30.2002 139.2002 32.1001 138 34.1001 C137.8999 34.7002 137.6001 35.6001 136.7998 35.6001 C136 38.2998 133.5 39.2998 133.1001 42.2002 C129.7002 45.3999 128.1001 49.7002 125.2998 53.2998 c122.2002 58.3999 119.3999 63.6001 115.6001 67.8999 c114.2002 69.1001 113.5 71.3999 111.8999 72.3999 C111.6001 75.3999 107.7002 76.3999 106.7998 79.2002 C105.2998 79.7002 105.2002 80.8999 103.8999 81.8999 C99.2998 82 94.3999 80.7998 89.7002 81.2998 C89.5 81.1001 89.3999 81 89.2998 80.7998 C76.7998 80.8999 64.6001 80.8999 51.3999 80 C47.5 80.5 42.8999 79 39.5 81.8999 C36.7002 82.6001 37.2998 86.1001 35.7998 88 c33.2998 91.2002 33.2002 96 31.8999 99.6001 C32.2002 101.2002 30.5 101.7998 31.7002 103.2998 C31.2998 104.7998 29.2998 105.6001 30.7002 107.3999 C28 109.2998 29.7998 112.2002 28.3999 114.6001 C29.5 117.3999 25.6001 117.2002 25.5 120.1001 C24.7002 123.7998 22.8999 127.3999 23 131.2002 C20.7002 131.2998 23.2998 133.3999 21.6001 134.1001 C21.5 136 21.2998 137.6001 20.6001 139.5 c19.7998 141.7998 17.1001 143.7998 17.7002 146.8999 C16.1001 147.7002 17.3999 149.8999 15.7998 150.6001 C15.3999 151.7998 15.8999 153.2998 15 154.2998 C16.2002 154.7998 14.6001 155.2002 14.7998 155.8999 C13.7998 156.5 14.2998 158 13.3999 158.7998 C13.7998 160.5 12.7002 161.6001 12.5 163.1001 C11.7002 164 11.7998 164.7998 11.1001 165.7998 C9.6001 171.5 7.2002 176.6001 7.7998 182.7002 C6.7002 183.7002 6.5 185 6.3999 186.3999 c6.2998 186.7002 6.5 187.3999 7 186.6001 C7.3999 187.2998 7.7998 188.2002 8.7998 188.3999 c9.5 188.5 10.2998 188.3999 10.2998 187.6001 C9.7002 186.7002 10.8999 186.5 11.1001 185.6001 C13.3999 182.3999 16.8999 187.8999 18.5 184.2998 C18.2002 182.2002 18.8999 180 19.2998 177.8999 C20.3999 177.3999 19 176.6001 19.7002 175.8999 C20.6001 174.2998 20.7998 172.5 20.6001 171.2002 C21.8999 170.2002 20.5 168 21.7998 167 C21.7998 166.2002 21.7998 165.3999 22.3999 164.7998 C21.3999 162.3999 24.2998 161.3999 23.8999 159.2002 C25.5 158.5 23.1001 156.6001 25.1001 156.1001 C24.7998 154.1001 26.1001 152.5 25.8999 150.2002 C26.7002 148.6001 26.8999 146.7002 28 145.2002 C27.1001 143.7998 28.8999 142.2002 28.6001 140.7002 C29.8999 137.6001 30.8999 134.3999 31.7002 131 C32.6001 129.7998 32.2002 127.7002 33.5 126.5 C33.2002 124.1001 35 122.1001 35 119.5 C36.7002 117.2002 35.7002 114.6001 37.3999 112.2998 C38.5 107.7998 39.2998 103.6001 41.1001 99.3999 C41.1001 97.7998 41.8999 96.1001 42.7998 94.6001 C42.3999 94.3999 42.3999 94.1001 42.7998 93.7998 C44.8999 91.7002 48.7998 93.2998 51.3999 92 C53.6001 92.7998 56.1001 92.1001 58.2002 91.7002 C58.7002 92.3999 59.7002 92.2002 60.2998 92 C61.8999 90.2002 64.6001 91.2002 66.2002 89.5 C66.8999 89.2998 67.8999 89.7998 68.2998 89.1001 C71 89.5 73.6001 88.2002 76.2998 88.7002 C79.5 86.7002 83 89.1001 86.3999 87.3999 C88.1001 88.6001 90.5 86.7002 91.7002 88.2998 C93.7002 86.5 95.5 89.2002 97.5 88.5 C98.5 89.2998 99.3999 88.5 100.6001 88.8999 C102.6001 88.5 106.1001 90.6001 107.7998 88.7002 C109.1001 88.5 110.5 88.3999 111.2998 87 C110.8999 87.1001 109.7002 86.8999 110.1001 86 c110.5 84 113.3999 85.5 114.7998 85.2002 c116.1001 85 115.8999 83.6001 116.2002 82.7002 c117.2998 80.5 117.8999 77.7998 120.2998 76.5 c122.8999 75 122.7998 72.2998 125.2998 70.7998 C126.2998 66.7002 130.3999 63 133.2998 59.2002 C134.5 56.7002 136.2002 53.8999 138.2002 52 C139.5 50.2002 140.7002 48.3999 141.2998 46.2998 C142.5 45.2002 143.8999 43.7002 143.7998 41.7998 C144.3999 41.2002 144.3999 40.2002 145.2002 40.1001 C145.6001 40.2998 145.6001 40.7002 145.8999 40.8999 C144.7998 48 146.7998 54.2998 147.2998 61.7002 c147.2998 65.2998 148.8999 68.3999 148.2998 72 C148.5 72.2002 148.8999 72.3999 148.7002 72.7998 c147.7002 74.7002 149.7998 76.7002 149.2998 78.6001 c149.2998 79.2002 149.5 79.6001 148.8999 80.2002 C148.7002 82.5 150.2002 84.7998 150 87 C151 89.6001 149.1001 90.7002 148.2998 92.7998 C146.3999 94.6001 146.7998 97.1001 147.5 99.2002 c147.7002 99.6001 149.2002 99 148.7002 100.2002 C151 102.2002 154.5 102.1001 157.2002 102.7002 C160.3999 102.2002 163.1001 98.2998 166 101.2002 C170.3999 100.2998 174.2998 103.2998 178.3999 102.2002 C181.7002 103.7998 186 103.2002 189.2998 104.8999 C189.8999 106 190.8999 104.3999 191.5 105.5 C193.2998 106 196.1001 105.2998 197.7002 107 C198.3999 106.8999 199.1001 106.7002 200 106.7998 C200.8999 107.6001 202.7002 107.7998 203.7002 107.3999 C204.2998 108.2002 205.2998 107.2002 205.8999 108 C206.5 107.2998 206.8999 108.2998 207.3999 108.6001 C209.7002 108.7002 212.1001 109.2002 214.1001 109.3999 C215 111.1001 218 110.2998 219.5 112.2998 C220.3999 112.7998 220.2998 114.1001 221.6001 114.2002 C224.2002 113.5 226.2998 115.8999 228.1001 118.1001 C229.2002 121.5 232.3999 123.5 233.5 126.8999 C236 129.2998 236.7002 133.5 239.7002 135.7998 C240.7002 137.2998 241.5 139.2998 242.8999 140.8999 C243.3999 142.2998 245.1001 143.8999 245.6001 145.6001 C247.7002 147.5 247.5 150.2998 249.5 152.2002 C250.5 153.8999 250.7002 156 252 157.3999 C253.2002 159.1001 250.7002 160.7002 251.3999 162.5 C252.2002 163.3999 252.1001 164.7002 252.3999 165.7998 C253.3999 167.5 254.7998 169.1001 255.2998 170.8999 C256 171.6001 257.1001 173.1001 257.6001 174 C258.2998 174.3999 257.7002 174.8999 257.6001 175.2998 C259.2002 176.5 258.3999 179.3999 260.6001 180.2002 C260.7002 182.6001 262.6001 184.2998 263.2998 186.2002 c264.5 188.5 265 190.5 266.7998 192.5 C267.6001 195.5 269.7002 198 271.5 200.6001 c273.7002 202.8999 272.2002 207 274.2002 209.2002 C270.5 212.1001 266.5 216.1001 262.8999 218.8999 C261.1001 221.3999 258.3999 222.7002 256.5 225.7002 C255.6001 225.2998 255.7002 226.2998 255.2998 226.7002 c249.1001 231.7002 244 236.6001 239.3999 242.7002 c234.5 248 230.3999 253.2998 225.7002 259 C224.6001 259 224.7002 260.2002 224.2002 260.7998 c216.8999 269.3999 210.3999 278.1001 202.6001 286.1001 c201.8999 287 201.3999 288.7002 200.2002 289.2002 C195.8999 286.3999 191.7002 288.2998 186.7998 286.6001 c184.7002 286.2002 182.3999 286.1001 180 285.8999 c175.6001 285.1001 171 285.1001 167 284.2998 C163.2002 284.2002 159.3999 283.5 155.5 284.1001 C149.2998 283.3999 144.1001 283.8999 138 282.8999 c135.8999 282.2002 133.6001 283.2998 131.8999 282 C126.7998 280.6001 120.8999 283.2002 116 281.3999 C108.6001 281.2002 101.2002 280.3999 93.7998 278.8999 C90.7002 277.6001 87.2998 281.2002 85.6001 277.2998 C83.6001 274.7002 80.2998 271.8999 78.3999 268.8999 c75.3999 264.8999 73.6001 260.8999 69.7002 257.6001 C66.8999 253.1001 63.5 248.6001 60.5 244.6001 C60.2998 244.6001 60.2002 244.6001 60.1001 244.6001 C56.7998 239.2998 52.5 234.3999 49.3999 229.6001 c45.3999 221.2998 37.7998 214.7998 33.2998 206.8999 C33.6001 206.2998 32.5 205.8999 31.8999 205.7002 C31 204.7002 30.6001 203 29.7998 202.3999 C30.2002 201.1001 27.8999 201.2002 27.6001 199.7002 C26.2998 199 25.2998 197.2002 23.8999 196 c22.1001 194 19.6001 191.8999 18.1001 189.7002 C17 189.1001 15.7002 187.2998 14.6001 189.1001 C12.6001 189.3999 11.1001 187.3999 9.5 189.2998 C8.7998 191.3999 11.2998 192.6001 12.5 194.2002 C11.7998 195.1001 12.2998 196 12.1001 196.8999 C10.8999 196.8999 9.3999 194.2002 8 194.6001 C11.1001 196.3999 13.2002 200.3999 16 202.6001 C19.2998 204.2998 18.6001 208.2998 21.3999 210 C23.5 209.5 23.2998 212 25.2998 211.7002 C27.6001 213.7998 29.8999 215.5 31.2998 218.8999 C33.1001 219 32.5 221.1001 34.3999 220.8999 C34.3999 223.7998 37.7002 222 38.1001 224.6001 C39.1001 226.1001 40.1001 223.6001 40.8999 224.6001 C41.5 225 42 225.3999 42.7998 225.2998 C43.5 226.2002 44 227.8999 45.5 227.7002 C46 228.8999 46.2002 230.6001 47.1001 231.2002 c49.3999 233 49.1001 235 51.6001 236.2002 C51.3999 236.8999 53.8999 237.2998 52.2998 237.7998 C52.6001 240.3999 55.3999 241.5 56.2002 244 C55.2002 245.2998 57.7002 243.8999 57.7998 245.2002 C58.7002 245.6001 58.5 247 59.7002 247.2998 C59.6001 248.2002 59.7002 249.2998 60.2998 249.7002 C60.7002 249.7002 61.1001 249.7998 61.2998 250.1001 C61.1001 252.3999 63.2002 252.7998 63.2002 255.2998 C63.5 255 64.2002 254.7002 64.6001 255.5 C64.2002 256.8999 65.3999 258.7002 65.7998 259.3999 c66.3999 260.5 68 260.3999 67.7002 262.1001 C69 263.7998 70.7998 265.6001 70.3999 267.7998 C69.5 266.7998 69.5 267.2002 70.1001 268 C70.2002 268.7998 71.2998 268.7002 71.7998 269.2998 C72.3999 271 74.2002 271.2002 74.8999 273 C73.7002 273.6001 73.7998 275 74.2998 276.1001 C75 276.8999 76.1001 277.7002 76.1001 278.5 C77.3999 279.2998 76.8999 281.6001 78.2002 282.2002 C78.3999 283.3999 79.6001 284.7998 78.3999 286.1001 C79.2002 287.8999 81 289.2002 81.5 291.2998 C83.7998 294.2002 87.2998 295.1001 90.7002 294.7998 C92.7002 293.8999 95.6001 294.7998 97.7002 294.7998 C99.7002 295.6001 102.2002 295.2002 104.2998 295.7998 C113.7002 295.2002 123.2002 296.1001 131.7002 295.7998 C138.2998 297.7998 144.8999 296.2998 152 297.2998 C160 296.7998 169.3999 297 177.7002 298.7002 C179.7002 298.2002 181.7002 299.6001 183.7002 299.1001 C186.6001 300.7998 189.8999 298.2002 192.5 300.5 C193.3999 300.3999 194.2002 300 195.2002 300.1001 C196.6001 302.1001 199.3999 300.6001 201 302.2002 C202.2002 301.6001 203.7998 301.5 204.7002 300.2998 Cf66 262.1001 m65.1001 260.6001 63.8999 259.2998 62.5 258.3999 C62.2998 258.5 62.2998 258.7998 62.2998 259 C63.6001 259.6001 64.8999 260.7998 65.3999 262.2998 C65.7002 262.3999 65.7002 261.8999 66 262.1001 Cf61.8999 257.6001 m61.2998 256.3999 59.7998 256.2998 58.6001 256.1001 C59.6001 256.6001 61.1001 256.8999 61.5 258 C61.8999 258 62 257.8999 61.8999 257.6001 Cf60.2998 255.7002 m60.3999 255.7002 60.5 255.7002 V60.5 255.5 60.5 255.2998 60.2998 255.7002 Cf59.8999 255.2998 m59.7002 255 59.5 255.1001 59.2002 255.1001 C59.1001 255.5 59.8999 255.7002 59.8999 255.2998 Cf57.2002 252.7998 m57.2002 252.8999 57.2002 253 Y57.2002 252.8999 57.2002 252.7998 Vf53.5 248.1001 m53.2998 247 51.7998 248 52 246.8999 C50.2002 246.2002 54.1001 245.6001 51 245.7998 C52 246.8999 51.5 248.8999 53.5 248.1001 Cf54.5 244.6001 m52.5 243.2002 55.3999 247 55.2998 245 C55 245.5 54.1001 244.8999 54.5 244.6001 Cf48.5 242.2998 m48.8999 242.7002 48.8999 243.5 49.6001 243.6001 C49.2998 243.1001 49 242.7998 48.5 242.2998 Cf42 232.5 m40.2998 231.2002 42.7998 233.3999 42.6001 234.1001 C42.7002 233.8999 42.5 232.8999 42 232.5 cf245.6001 126.8999 m245.6001 126.7998 245.5 126.7002 245.3999 126.5 C245.5 126.7002 245.6001 126.7998 245.6001 126.8999 Cf245 125.5 m245.1001 125.5 245.1001 125.6001 245.2002 125.7002 C245.1001 125.6001 245.1001 125.5 245 125.5 Cf244.6001 124.8999 m244.8999 124.8999 245.1001 124.8999 245.3999 124.8999 C245.1001 124.8999 244.8999 124.8999 244.6001 124.8999 CfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF