%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%AI8_CreatorVersion: 10.0%%For: (\601\613) ()%%Title: (flame_030.eps)%%CreationDate: 03.8.5 9:40 PM%%BoundingBox: 6 35 387 415%%HiResBoundingBox: 6 35.3999 386.5 414.8999%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 1.1%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI3_TemplateBox: 204.5 209.5 204.5 209.5%AI3_TileBox: -82.5 -199.5 489.5 616.5%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 596 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -587.5 785.5 1 1266 977 18 0 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-82.5 -199.5%%AI3_PaperRect:-11 831 585 -11%%AI3_Margin:11 -12 -13 11%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.4 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.4 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 70 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin		Adobe_blend_AI5_vars begin			/_contoneDevice where			{				pop			}			{				/_contoneDevice false def				} ifelse								/_dpiThreshold where			{				pop			}			{					/_dpiThreshold 600 def			} ifelse						/_screenFreqThreshold where			{				pop			}			{					/_screenFreqThreshold 150 def			} ifelse						/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def	/invertXfer	{		[		{			1 exch sub				} /exec load systemdict/currenttransfer get exec /exec load				] cvx systemdict/settransfer get exec			} bd			/spotDict 3 dict dup begin				/nSpots 2 def				/spot1 7 dict def				/spot2 7 dict def		 end			def			composite?			{				/_setgray_ /setgray load def				/_fill_ /fill load def				/_image_ /image load def			}			{				/_setgray_ systemdict/setgray get def				/_fill_ systemdict/fill get def				/_image_ systemdict/image get def			} ifelse		} bd		/terminate		{			currentdict Adobe_blend_AI5_vars eq			{		 end			currentdict Adobe_blend_AI5 eq			{		 end		} if	} if} bd/_compositeSpotDevice where{ begin		_compositeSpotDevice 0 ne {userdict /composite? true put} if end}{	/_compositeSpotDevice 0 def	} ifelse	/nullString () def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/d255- 256 array def0 1 255{	d255- exch 1 d255 2 index get sub put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 89 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where{	pop lv1Fix}{	false} ifelsedef/ccAry1 5 array def/ccTint 0 def/spotColor? false def/colorimage? true def[/tint1Data/tint2Data/spotDict/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/setCustomColor{	dup /ccTint exch store	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/currentCustomColor{	ccAry1 aload pop ccTint} bd/nsetcustomcolor where {	pop}{	/nsetcustomcolor	{		pop setcmykcolor		} bd} ifelse/nsetcustomcolorend where {	pop}{	/nsetcustomcolorend	{	} bd} ifelse/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop				spotColor?			{			dup 1 exch sub /ccTint exch def			ccAry1 4 /Black put			} if		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/bwImage{	setImgSpace cData /_image_ load	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		expandCMYK		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd} if/expandOne{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if} bd/expandSpot{	spotColor?	{		spotDict begin			spot1 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end			spot2 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end	 end	} if} bd/expandCMYK{	4	{		expandOne 4 1 roll	} repeat} bd/colorimage where dup{	exch pop		/ncolorimage where	{		pop	}	{		/ncolorimage {pop colorimage} bd	} ifelse} ifnot{	/ncolorimage where 	{		pop	}	{		/colorimage? false store		/ncolorimage		{			pop pop pop			setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind			_image_ 		sSave restore	} bd	} ifelse} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		colorimage? 		{			expandCMYK		} if		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		bwImage		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		spotColor?		{			spotDict begin				spot1 begin					currentCustomColor makeByte /tintImage exch def					/name exch def					/spot_K exch def					/spot_Y exch def					/spot_M exch def					/spot_C exch def			 end				spot2 initSpotData		 end		} if		currentcmykcolor		4		{			makeByte 4 1 roll		} repeat		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			spotColor?			{				spotDict begin					/spotDict cvx /begin cvx					spot1 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx					spot2 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/spotDict cvx				/nsetcustomcolor cvx			}			{				/setcmykcolor cvx			} ifelse		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg		{			{				_fill			}		}		{			{				_of true eq				{					currentgray 1 ne					{						bwFill					} if				}				{					bwFill				} ifelse			}		} ifelse		def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq				{					setSSave					/cData whiteByte store					/cDataLen 8 store					bwImage					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		/_setgray_ cvx	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if	} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse	} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					_setgray_ 					_fill_ 				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse							nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq			{				/blend? false store			} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt		{			/blend? false def		} if		blend?		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/initSpotData{ begin		/name null def		/tintImage null def		/tintValue null def		/spot_C  null def		/spot_M  null def		/spot_Y  null def		/spot_K  null def end} bd/getRData{	/colorType gMark store	_compositeSpotDevice 0 ne	{		spotDict begin			spot1 initSpotData			spot2 initSpotData	 end		/spotColor? colorType 2 eq colorType 3 eq or def	} 	{		/spotColor? false store	} ifelse	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			_compositeSpotDevice 0 ne			{				spotDict begin					spot1 begin						/name 3 index def						/spot_K 4 index def						/spot_Y 5 index def						/spot_M 6 index def						/spot_C 7 index def				 end			 end			} if			7		} ifelse	} ifelse	/tmp exch def	tmp index 100 div /endPoint xs	_compositeSpotDevice 0 ne	{		tmp 2 add index 3 eq		{			/tmp tmp 4 add def			tmp index dup 			spotDict begin				spot1/name get ne				{					spot2 begin						/name exch def						/spot_K tmp 2 add index def						/spot_Y tmp 3 add index def						/spot_M tmp 4 add index def						/spot_C tmp 5 add index def				 end				}				{					pop				} ifelse		 end		} if	} if	/color? colorType 0 gt store		colorType 3 eq	{		/tint2Data gMark store	} if		colorType 2 ge	{		/tint1Data gMark store	} if	_compositeSpotDevice 0 ne	{		spotDict begin					colorType 2 ge			{				colorType 3 eq				{					spot2 begin						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def						name null eq {/name /Black def} if				 end				} if				spot1 begin					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def					colorType 2 eq 					{						name null eq 						{							/name spot2/name get def							spot2/name null put						} if					}					{						name null eq {/name /Black def} if					} ifelse			 end			} if	 end	} if		/cData gMark store	setCDataLen	colorType 0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		_eo {eoclip} {clip} ifelse		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/bwImage		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq	{		0	}	{		bDataLen ubAxis div	} ifelse	store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where dup	{		exch pop _compositeSpotDevice 1 ne and	} if	{		0 0 bInc 1 /rectfill cvx		}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		/_fill_ cvx	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	spotColor? {nsetcustomcolorend} if		grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt		{			exch		} if		pop store		/pChange ubAxis 0 eq		{			0		}		{			bDataLen ubAxis div		} ifelse		store		pChange .5 gt noImg not and dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	spotColor? {nsetcustomcolorend} if	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put end} if} bd/Bn{1 add dictdup nullString null put/_bn xs} bd/Bd{Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store			/_fill			{				_of true eq				{					currentgray 1 ne					{						__fill					} if				}				{					__fill				} ifelse			} def	} ifelse	/fill	{	} def	} bd	/BB	{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 kPc1 1 1 1 kPcPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(\203\214\203C\203\204\201[ 1) Ln0 A0 O0 g2 J 0 j 1 w 2 M []0 d291.8999 413.5 m292.3999 412 291.6001 410.6001 292.7002 409.3999 C292.7998 407.7002 293.2002 405.3999 294 404 C294.2998 402.7002 293.3999 402 293.1001 400.8999 C293.1001 401.2002 293.2998 401.6001 292.8999 401.7998 C286.8999 390.2998 281.1001 377.2998 281.2002 364.1001 C283.2998 361.3999 286.6001 359.1001 290.2998 359.7998 c301.5 362.7998 310.5 371.1001 320.8999 376 c325.6001 378.7002 330.7002 380.7002 335.1001 383.7002 c336.5 384.5 337.8999 383.7002 339 382.7998 C340.3999 381.1001 339.7002 378.5 340.5 376.5 C340.2002 375.7002 340 374.3999 340.7002 373.7998 c342 372.6001 339.2998 372.1001 339.6001 370.8999 C336.8999 368 335.1001 364.2998 333.2998 360.7998 c329.6001 354.3999 326.8999 347.2002 326.1001 339.3999 C331.7002 333.7998 338.8999 340.2002 345.2002 341.1001 C349.7002 342.7002 354.2002 344.3999 358.7998 346 c365.7002 348.6001 373 350 380.2002 352 C381.1001 353.2998 382.8999 352.6001 384.2998 352.7998 C386.2002 351.7998 386.5 350.2002 386.5 348.1001 C385.5 346.2002 387.7998 343.6001 385.2998 342.2998 C385.6001 342 386.3999 342.2002 386.1001 341.5 C385.2002 341.1001 385.7002 342 385.2998 342.2998 C381.7002 339.5 378.7998 335 375 332.6001 C368.3999 325 359.7998 318 351.6001 311.7002 C350.2998 311.6001 349.2998 310.3999 348.5 309.6001 c344.3999 306.5 340.7002 302.3999 336.5 299.5 C335.1001 298 333.7002 296.7002 332 295.2002 C331.3999 295.1001 330.7998 294.7002 330.3999 294.2002 C330.7998 293.3999 329.3999 294 329.1001 293.2998 C326.2002 289.1001 320.8999 286.6001 318.6001 283.1001 C317.7002 283 317.5 281.8999 316.7998 282 C316.3999 280.7998 314.6001 280.6001 314.1001 279.6001 C314.2998 279.3999 314.3999 279.3999 314.5 279.6001 C313.3999 279.6001 312.7002 277.8999 312.1001 277.2998 C311.8999 276.7998 310.3999 276.7002 310.7998 276.1001 C310.2002 276.6001 309.7998 275.2998 309.2002 275.2002 C308.8999 274.6001 310.5 274.8999 309.3999 274.7998 c308.7002 274.8999 308.2002 274 307.5 273.6001 C307.1001 272.7998 305.7002 272.5 305.7002 271.5 C304.8999 271.8999 304.7002 270.1001 304.2002 270.2998 C303.8999 269.1001 302.7998 269.7002 302.6001 268.5 C302.1001 267.3999 300.1001 267.2002 299.8999 266.3999 C298.1001 264 295.7998 262.2002 293.2998 260.2002 c292.3999 259.7002 293.6001 258.7998 292.2998 258.6001 C291.2002 259.2998 290.8999 257.1001 290.5 257.1001 C289.7002 256.7002 288.8999 255.8999 288.6001 255.2998 C287.2002 255.6001 288.3999 253.5 287 254.1001 C287.1001 252.6001 284.7998 252.7002 285.1001 251.6001 C284 250.8999 282.6001 249.6001 282 248.7002 C282.2998 248.7002 282.5 248.7002 282.6001 248.8999 C279.7002 247.3999 277.8999 244.7998 276.1001 242.5 C276 242.6001 275.8999 242.7002 Y273.2002 240 270.2998 237.3999 268.2002 234.7002 C268.5 233.7002 267.7002 235 267.3999 234.2998 C263.8999 230.7002 259.7998 226 256.5 222.6001 c248.7002 214.7002 239.1001 203.8999 231.6001 194.7998 C230.1001 194.6001 230.7002 193 229.3999 192.7998 C218.8999 180.7998 208.8999 168.7998 199.1001 156.2998 c178.6001 130.7998 160.6001 103 143.2002 76.2998 c134.8999 62.7002 126.7998 48.8999 117.8999 36.2002 c117.3999 35.6001 116.2002 35.7002 115.3999 35.3999 C114.2998 36.2002 112.5 36.2002 111.2998 37.2002 c108.2998 39.2002 107.7998 43.2002 106.7998 46.5 c106.1001 51.6001 107 57.2998 107.6001 62.1001 c108.3999 72.7998 110 83.8999 111.1001 94.3999 C108.1001 93.7998 105.2998 90.2002 103.2998 88 c100.7998 85.3999 98.5 83.7998 96.7002 80.7998 c96.5 80.3999 95.7998 80.7998 95.8999 80.2002 c96.2002 79.1001 94.2998 79.2002 94 78 C91.3999 75.7002 89.7002 73.2002 87.3999 70.6001 C90.8999 76.5 96.8999 80.2998 100 86.2002 C99.6001 85.8999 99.3999 85.3999 98.8999 85.3999 C98.7998 85.6001 98.7002 85.6001 98.5 85.3999 c98.2002 84.5 98 84.6001 97.5 83.5 C97.1001 83.6001 96.7002 83.5 96.5 83.1001 C96.6001 83 96.7002 82.7998 96.8999 82.8999 C96.1001 82.2002 95.1001 81.3999 94.6001 80.7998 C94.7998 79.7002 93.2002 80.5 93.2002 79.3999 c93.1001 78.2998 91.7002 78.3999 92 77.6001 C84.5 69.7002 79.8999 59.1001 69.7002 54.1001 C70.6001 53 71.5 54.3999 72.3999 54.5 C77.7998 57.6001 81.5 62.7002 85.3999 67.8999 C82.1001 62.6001 77 56.1001 70.6001 53.1001 C70.1001 53.2002 69.2998 53.3999 69.2998 53.8999 c69.3999 54.5 68 54.3999 67.2998 54.7002 c65.6001 55.2998 64 56.7998 62.5 57.2002 C60 61 58.1001 65.2998 58.7998 69.8999 C58.2002 71.5 59.1001 72.7998 58.7998 74.5 C59.2998 79.8999 61 84.8999 62.1001 90.1001 c63.5 97.5 66.7002 104.2002 68.8999 111.2998 C67.1001 111.2002 65.8999 109.2002 64.3999 108.2002 c54.6001 99.6001 45.6001 90.5 40.2998 78.7998 c35.8999 71.7002 31 66.2002 25.1001 60.1001 c23 58.2002 19.7998 57.7998 17.1001 58.6001 C13.8999 60.8999 8.2998 62.8999 7.6001 67.2998 C6.7998 68.7002 6.7998 70.6001 6 72 C7.1001 72.3999 6.2998 74.7998 7 75.5 C7.8999 83.1001 11.3999 90.2002 13.6001 97.5 c23.2002 123.3999 35.3999 148.3999 50 172.3999 C50.2002 173.6001 51.3999 174.2998 51.7998 175.5 C58.2998 185.8999 64.6001 196.1001 71.6001 206.1001 C73.5 207.3999 73.1001 209.1001 74.8999 210.8999 c80 217.5 84.2998 224.6001 89.5 231 C89.7002 231.3999 91 231.8999 90.5 232.7002 C92.7998 235.5 95.3999 239.3999 97.7002 241.5 C97.6001 242.2998 98.2998 243 98.8999 243.6001 c100.2002 244.8999 101.1001 247.2002 102.7002 247.7002 C101.8999 247.8999 103.1001 249 103.2998 249.2998 C104.7002 250.5 105.2002 252.7998 107 253 C107 253.5 106.7002 253.2998 106.3999 253.2002 C107.2998 254 107.7998 256.1001 109.2002 255.5 C110.7998 256.8999 107.8999 256 109.8999 257.6001 C110.2002 258 110.8999 257.5 111.1001 258.2002 C111 258.3999 110.7002 258.3999 110.5 258.3999 C111.7998 260 113.7998 262.7998 115.2002 263.8999 C115.1001 263.6001 114.2998 263.3999 114.7998 263.1001 C116.2998 263.2002 115.1001 265.8999 116.6001 265 C116.7998 265.2002 117.1001 265.2998 117.1001 265.6001 C116.8999 265.7998 116.7002 265.7998 116.3999 265.7998 C118.1001 267.2998 119.3999 269.7998 120.7998 270.7002 C121 270.2002 121.2002 270.7998 121.3999 270.8999 C121.5 271.2002 121 271.2002 121.2002 271.5 C126.2998 277.1001 131.7002 284.7002 137 289 C136.5 289.3999 136.7998 289.2002 137.2002 289.2002 C137.3999 289.3999 137.3999 289.5 137.2002 289.6001 C137.1001 289.6001 137.1001 289.6001 137 289.6001 C138.2002 291.2998 140.5 292.8999 141.1001 294.3999 c141.7002 295.7998 144 295.6001 143.6001 297 C145.6001 298 146 300.7998 148.2998 301.3999 C147.6001 301.5 148.6001 302.6001 148.8999 302.7998 c150.7002 304.1001 152 306.6001 153.5 307.1001 C153.2998 307.1001 153.2002 307.1001 153.1001 307.1001 C153.5 308.5 156.1001 308.2998 155.5 309.6001 C156.2998 308.8999 155.8999 310.2002 156.1001 310.2002 C157 311.2002 158.2002 312.5 159.2002 312.8999 C159.1001 313.8999 160.2998 314.3999 161.1001 315.3999 C161.3999 315.6001 161.7998 316.3999 162.1001 316 C162.2002 316.7998 163.5 317.7998 164.2002 318.2002 C164.2998 318.3999 164.3999 318.5 164.3999 318.6001 C166.2998 320.3999 168.1001 322.8999 170.5 324.2002 C171.5 326.1001 174.2998 328 175.8999 329.6001 C176.2998 329.6001 176.2002 330.6001 177.1001 330.7998 C177.3999 331.7998 178.8999 331.2002 179.2002 332.2002 C179 332.8999 178.1001 331.7998 178.7998 332.3999 C179.2998 332.5 180.2998 332.8999 180.6001 333.7002 C181 335.8999 184.7002 337.3999 185.2998 338.6001 C188 341.3999 191.3999 343.7002 194.3999 346.7998 C195.5 346.7998 195.2002 348.1001 196.5 348.2998 C196.2998 348.2002 197.3999 348.5 197.7002 349.1001 c197.7998 349.2998 197.6001 349.3999 197.5 349.5 C195.7998 348.5 198 349.7002 198.1001 350.1001 C199 349.8999 198.5 350.8999 198.8999 351.2002 C199.5 351.8999 201 352 201 352.7998 C202.7998 353.2998 203.2002 356 205.2998 355.8999 C206.2002 356.2002 205.2002 356.7998 204.8999 356.2998 C209.7998 360.6001 215.5 365.6001 221.1001 369.5 C221 369.7998 221.5 369.7998 221.2998 370.1001 C226 374 231.1001 377.2002 235.5 381.2002 C236.5 381.3999 237.2998 382.8999 238.6001 382.7998 C241.8999 386.2998 246.6001 388.8999 250.6001 391.8999 c255.7998 395.8999 260.5 398.6001 266.2002 402.3999 c273.5 407.2002 280.8999 411.6001 288.7998 414.8999 C290 414.8999 291 414.2998 291.8999 413.5 Cf1 g277.2998 396.2002 m277.1001 396.1001 276.8999 395.8999 276.7002 395.7998 C276.6001 395.7002 276.6001 395.7002 277.2998 396.2002 Cf279.6001 358.3999 m284.3999 353.6001 289.7998 348.2002 296.6001 350.1001 c297.7998 350.5 299.5 350.8999 301 351.3999 C300 352.3999 298.3999 350.5 297 351.2002 C303.7002 353 309.2998 356.8999 315.2002 360.6001 c318.2002 362.5 321.2998 364.1001 324.3999 365.7998 C318.6001 362.2998 313.1001 358.7002 307.1001 355.2998 C307.5 355 308.2002 355 308.6001 355.2998 c313.6001 358.5 318.6001 361.5 323.7998 364.2998 C320.5 356.1001 317 346.5 320.5 337.7998 c323.2002 332.6001 328.1001 328.2998 333.7002 326.7002 C339.7998 326 345.5 329.2002 350.8999 331 C347.2998 331.1001 344.3999 328.5 340.7002 328.2998 C339.7002 327.7002 338.5 327.7998 337.3999 327.5 C338 327.7998 339.2998 327.7002 339.7998 328.2998 C338.8999 328.3999 337.6001 328.2002 336.5 328.1001 C347.5 330.7002 357.8999 335.6001 368.2002 338.6001 C367.5 337.7998 366.5 336.7998 365.2998 336.5 C365.5 336.3999 365.6001 336.2998 365.7998 336.2998 C349.7998 321.2002 332.2002 308.2998 315.6001 292.5 c276.2998 257.7002 244 221.6001 210 182.8999 c196.1001 165.5 183.3999 149.6001 170.7002 132.5 c167.2002 126.8999 163.2998 122.6001 160.2998 116.7998 c157.2998 112.7998 154.7002 108.2002 151.3999 104.2998 c144.7998 93.7002 137.1001 82.7998 130.7998 71.7998 c128.5 66.8999 124.7998 62.3999 122.3999 57.7998 c119.7998 53.5 116.7998 48.8999 114 45.1001 C113.7002 48.5 113.7002 52 114 55.7002 C114.7998 56.3999 114.7002 57.3999 114.3999 58.3999 C114.1001 58.7998 114.7002 59.2002 114.7998 59.7002 c115.1001 62.1001 115 64.6001 115.3999 66.2002 C115.6001 71.2002 116.7002 76.7002 117.5 81.8999 c117.7998 86.3999 118.5 91.8999 118.5 96.2998 C116.5 100 116.7002 105.8999 111.2998 107 c103.7002 107.6001 99.2998 100.7002 94 95.8999 c84.2002 86.5 77.3999 74.7002 67.8999 65.2002 C66.8999 67.2998 68.7002 69.7998 68.1001 72.2002 C67.8999 71.7998 67.7002 71.3999 67.5 71 C68.1001 72.8999 67.8999 75.7998 68.5 77.1001 C69.1001 76.3999 69 77.6001 69.2998 77.7998 C69.1001 78.5 69.8999 79 69.2998 79.6001 C69 79.3999 69 79 68.7002 78.7998 C69.1001 80.5 69.5 82.2002 69.8999 83.8999 C70 82.6001 68.8999 81.5 69.2998 80.2002 C70.7002 81.2002 70 83.5 71 84.5 C71.2002 87.6001 72.8999 90.2998 73.3999 93 C73.1001 94.6001 75 95.7998 74.8999 97.5 C77.2002 102.1001 77.7002 106.8999 79.6001 111.5 c80.3999 113.5 78.1001 115.2002 79.2002 117.1001 C78.8999 118.6001 76.7002 120 77.2998 121.7998 C76.8999 124.2998 74.5 126 72 126.7002 c66.7998 127.6001 62.7998 123.2002 58.6001 120.2998 c48 111.7002 38.6001 101.8999 32.8999 90.1001 c28.6001 83.6001 23.6001 77.5 18.5 71.6001 C19.2002 76.1001 21 82.2002 22.6001 87 c26.1001 97.5 30.7002 107.5 35 117.7002 c36.3999 121.8999 38.5 126.2998 40.7002 130.3999 c49.7998 149.2998 60.2002 167.8999 72 185.6001 C72 186.1001 73.1001 186.3999 72.3999 187 C70.1001 184.5 68.5 181.2002 66.3999 178.6001 C66.3999 178 65.7002 177.1001 65.2002 176.7002 C68.6001 181.7998 71.5 187.2002 75.1001 191.5 C74.6001 190.5 73.5 189.5 73.6001 188.3999 C80.8999 198.1001 87.2002 209 94.3999 218.2998 C93.7998 218.7998 93.3999 217.5 92.7998 217.3999 C94.6001 219.2002 95 221.3999 97.1001 223.2002 C97.2002 222.2998 95.1001 221.7002 96.7002 221.2998 C102 228.1001 106.6001 235 112.1001 241.8999 C111.7002 242.5 111.2998 241.7998 110.8999 241.7002 C111.5 240.7002 109.7998 241.2002 110.2998 240.7002 C111.2002 242.6001 112.8999 244 114 245.3999 C113 244.3999 112.8999 243.7002 111.8999 242.2998 C112.7998 241.8999 112.7998 243 113.2998 243.6001 c118.7998 250.7002 125.7998 258.2998 131 265.6001 C129.3999 265.2002 128.6001 262.5 126.8999 261.7002 C129.1001 264.3999 130.7998 266.1001 132.7002 268.2002 C132.5 268 132.1001 267.7998 132.2998 267.3999 C132.3999 267.2998 132.3999 267.2998 132.5 267.2002 C139.3999 274.7002 145.6001 282.6001 152.2002 289.3999 C152.1001 289.7998 151.7002 289.6001 151.3999 289.6001 C151.2002 288.7998 150.7998 288.3999 150 288.2002 C151.1001 288.5 150.8999 290.3999 152.2002 289.3999 C153.8999 290.8999 155.5 293 157 294.6001 C156.5 295 155.7998 294.5 155.7002 294 C155.6001 293.7002 155.2998 293.7998 155.1001 293.7998 C155.5 294.2998 156.1001 295.3999 157 295.2002 C156.8999 295 157.1001 294.8999 157.2002 294.7998 C158.7998 296.2998 160.5 298.2002 162.1001 299.7002 C160.7998 300.7002 160.6001 298.1001 159.2002 298.1001 C159.7998 298.7998 161.6001 300 162.5 301.6001 C162.8999 301 161.5 300.8999 162.2998 300.2998 C172.7002 310.7002 182.7002 320.5 193.3999 330.3999 c201.7998 337.6001 209.7998 346 218.2998 352.6001 C216.7998 353.5 219.1001 353.8999 219.2998 354.6001 C224.3999 358.2002 228.2002 362.6001 233.2998 365.7998 C232.7002 365 231.1001 364.1001 230.6001 363.2998 C228.6001 362.6001 228.1001 360.7002 226.1001 360 C225.5 359.2002 224 358.2002 223.2002 357.5 c221.7998 356.1001 219.5 354.7998 218.1001 353 C218.1001 352.8999 218.2002 352.8999 218.2998 352.7998 C228.2002 359.5 236.8999 367.8999 246.8999 374.3999 c251.6001 378.2002 257.1001 381.7002 261.8999 385.5 C266.7998 387.8999 270.3999 391.5 275.2002 393.2998 C276.2998 394.7998 277.8999 395.2998 279.3999 396.2002 C275.6001 385.1001 269.5 368.6001 279.6001 358.3999 cf0 g278.2998 395.2002 m277.8999 394.8999 277.5 394.6001 277.1001 394.3999 C277.5 394.6001 277.8999 394.8999 278.2998 395.2002 Cf274.2002 392.7002 m274 392.6001 273.7998 392.3999 273.6001 392.2998 C273.7998 392.3999 274 392.6001 274.2002 392.7002 Cf1 g267.3999 390.3999 m267.6001 390.3999 267.7998 390.3999 268 390.3999 C267.7998 390.3999 267.6001 390.3999 267.3999 390.3999 Cf264.7998 388.3999 m264.6001 388.2998 264.5 388.1001 264.2998 388 C264.5 388.1001 264.6001 388.2998 264.7998 388.3999 Cf263.2998 387.6001 m263.3999 387.6001 263.6001 387.6001 263.7002 387.6001 C263.3999 387.3999 263 387.2998 263.2998 387.6001 Cf261.2998 385.8999 m261.2998 386 261.3999 386 261.5 386.1001 C261.3999 386 261.2998 386 261.2998 385.8999 Cf259.2002 384.5 m254.2002 381.2998 250.3999 377.7998 245.2002 375 C247.7998 376.6001 249.6001 378.1001 252 379.5 C253.5 381 255.2998 381.1001 256.1001 382.7998 C257.3999 383.2998 258 384 259.2002 384.5 Cf248.8999 379.2998 m248.7998 379.2002 248.6001 379.1001 248.5 378.8999 C248.6001 379.1001 248.7998 379.2002 248.8999 379.2998 Cf244 373.7998 m242.6001 372.2998 241 371.6001 239.3999 370.1001 C238.7002 370.7998 240.2002 370.1001 239.8999 370.8999 C241.8999 371.6001 242 373.2002 244 373.7998 Cf238.7998 369.8999 m238.7002 369.7002 238.5 369.6001 238.3999 369.5 C238.2002 369.5 238 369.5 238.7998 369.8999 Cf237.7998 369 m237.1001 368 235.1001 367 234.7002 366.6001 C234.2002 367 234.5 366.7002 234.8999 366.7998 C235.7998 367.7998 236.8999 368.6001 237.7998 369 Cf233.8999 366.3999 m234 366.2998 234 366.2002 234.1001 366.2002 C234 366.1001 234 366 233.8999 366.3999 Cf301.6001 353.6001 m302.1001 354.1001 302.7998 354.2002 303.3999 354.3999 C302.7002 354.3999 302.2998 353.7002 301.6001 353.6001 Cf212.8999 348.8999 m214 350.2002 215.7002 351.3999 217.3999 353 C217.3999 352.8999 217.3999 352.7002 217.3999 352.6001 C216 351.2002 214.1001 350.1001 212.8999 348.8999 Cf214.1001 352 m214 351.7998 213.8999 351.7002 213.7002 351.6001 C213.8999 351.7002 214 351.7998 214.1001 352 Cf290.1001 351.2002 m290.5 351.1001 290.8999 351 291.2998 350.8999 C290.8999 351 290.5 351.1001 290.1001 351.2002 Cf296.6001 350.7002 m296.1001 350.6001 295.7998 351 296.3999 351.2002 C296.7998 351.2998 296.6001 350.8999 296.6001 350.7002 Cf327.8999 351.2002 m327.8999 350.8999 327.8999 350.6001 327.8999 350.2998 C327.7998 350.2998 327.7998 350.2002 327.8999 351.2002 Cf294.2002 350.7002 m294.2998 350.7002 294.5 350.7002 294.6001 350.7002 C294.5 350.6001 294.2998 350.5 294.2002 350.7002 Cf207.6001 344.3999 m206.2002 343 204.6001 341.2998 203 340 C205.7002 343.2002 209.3999 345.7002 212.1001 348.5 C211.3999 347 209.1001 345.6001 207.6001 344.3999 cf209 347.3999 m208.7002 347.2002 208.2998 346.8999 208 346.6001 C208.2998 346.8999 208.7002 347.2002 209 347.3999 Cf326.7002 347.2002 m326.7002 347 326.7002 346.7998 326.7002 346.6001 C326.6001 346.5 326.5 346.5 326.7002 347.2002 Cf207.3999 346.2002 m207.2002 346.1001 207.1001 345.8999 206.8999 345.7998 C207.1001 345.8999 207.2002 346.1001 207.3999 346.2002 Cf202 341.2998 m201.8999 341.1001 201.7002 341 201.6001 340.8999 C201.7002 341 201.8999 341.1001 202 341.2998 Cf0 g384.7002 339.2002 m384.7998 339.1001 385.2002 341.1001 386.1001 340.8999 C385.3999 340.3999 385.2002 339.6001 384.7002 339.2002 Cf1 g200.7998 340.2002 m200.6001 340 200.3999 339.7998 200.2002 339.6001 C200.3999 339.7998 200.6001 340 200.7998 340.2002 Cf190.1001 328.5 m189.2998 327.5 188.2998 326.2998 187 325.6001 C192.1001 331.2002 197.5 334.3999 202.2002 339.6001 C203.2998 340.1001 202 339.2998 202 339 C200.2998 337.7998 199.1001 336 197.2998 334.7002 c194.7998 332.5 192.8999 330.3999 190.1001 328.5 Cf0 g364.7002 336.2998 m364.8999 336.2998 365 336.2998 365.1001 336.2998 C365 336.2998 364.8999 336.2998 364.7002 336.2998 Cf353 332.6001 m352.7002 332.3999 352.2998 332.2002 352 332 C351.8999 332 351.7998 332 353 332.6001 Cf344.6001 330 m345.3999 330.6001 346.5 330.5 347.3999 330.7998 C346.3999 330.7998 345.6001 329.8999 344.6001 330 Cf343.1001 329.2998 m342.2998 329.3999 342.7002 329.2002 343.1001 329.6001 c343.3999 329.7998 343.3999 329.1001 343.1001 329.2998 Cf339.7998 328.5 m340.2998 328.7998 341.1001 328.7002 341.5 328.7002 C340.7998 329 340.5 328.2998 339.7998 328.5 Cf1 g186.2002 324.3999 m184.7998 323.6001 183.6001 321.6001 182.1001 320.8999 C182.8999 321.6001 185.2998 324.5 186.7998 325.2002 C186.8999 324.6001 186.1001 325 186.2002 324.3999 Cf178.1001 317 m178.3999 318.3999 180.2002 318.2998 180.6001 319.7002 C180.7998 319.7002 181 319.7002 181.2002 319.7002 C180.1001 318.7998 179.2998 317.7998 178.1001 317 Cf176.2998 315.2002 m176.2998 314.5 173.3999 312.7002 175.2998 314.5 C175.1001 314.3999 178.7998 317.3999 176.2998 315.2002 Cf0 g177.1001 314.1001 m177.1001 314 177.1001 314 177.1001 313.8999 C177 313.7998 176.7998 313.6001 177.1001 314.1001 Cf1 g172.7998 311.8999 m172 310.8999 171.2002 309.5 169.7002 309.2002 C171.3999 310.2998 172.2998 312 174 312.8999 C173.3999 312.7998 173.2998 312 172.7998 311.8999 Cf167.2002 308.3999 m167 308.2002 166.7998 308 166.6001 307.7002 C166.7998 308 167 308.2002 167.2002 308.3999 Cf166.6001 305.7002 m167.2002 306.3999 167.7998 307.6001 168.8999 308.2002 C168.8999 307.5 167.5 306.2998 166.6001 305.7002 Cf165.7998 306.8999 m165.7002 306.7998 165.5 306.6001 165.3999 306.5 C165.5 306.6001 165.7002 306.7998 165.7998 306.8999 Cf166.2002 305.1001 m166 305.1001 165.6001 305 166 305.2998 C166.2002 305.2998 166.2002 305.2998 166.2002 305.1001 Cf165.7998 304.5 m165.5 304.2998 165.2002 303.8999 164.7998 304 C165.1001 304.2002 165.3999 305.1001 165.7998 304.5 Cf0 g166.7998 303.7998 m166.5 303.5 166.1001 303.1001 165.7998 302.7998 C166.1001 303.1001 166.5 303.5 166.7998 303.7998 Cf1 g162.5 303.6001 m162.5 303.5 162.5 303.3999 V162.3999 303.2998 162.3999 303.2998 162.5 303.6001 Cf162.8999 301.7998 m163.2998 302 163.7002 302.8999 164.2002 303.2002 c166.1001 304.2998 163.2998 302.2998 162.8999 301.7998 Cf160.5 301.3999 m160.2998 301.2002 160.2002 301.1001 160 301 C160.2002 301.1001 160.2998 301.2002 160.5 301.3999 Cf157.6001 298.5 m156.7002 297.5 155.7998 296.3999 154.8999 295.3999 C155.7998 296.3999 156.7002 297.5 157.6001 298.5 Cf158.2002 297.2998 m158.1001 297.1001 157.8999 297 157.7998 296.7998 C157.8999 297 158.1001 297.1001 158.2002 297.2998 Cf157.3999 296.2002 m157.3999 296.1001 157.3999 295.8999 157.3999 295.7998 C157.2002 295.7998 157.1001 295.7998 157.3999 296.2002 Cf152.6001 293.1001 m152.3999 292.8999 152.2002 292.7002 152 292.5 C152.2002 292.7002 152.3999 292.8999 152.6001 293.1001 Cf152.7998 291.2998 m153.5 292 153.8999 292.2002 154.2998 292.8999 C154.1001 292.1001 153.2002 291.3999 152.7998 291.2998 Cf152.2002 290.7002 m152.3999 290.7002 152.5 290.7002 152.6001 290.7002 C152.3999 290.5 152.2002 290.3999 152.2002 290.7002 Cf146.8999 286.7998 m147.3999 287.6001 148.7002 288.8999 147.2998 287.2002 c147.2002 287 147 286.8999 146.8999 286.7998 Cf148.2998 286.1001 m148.8999 286.7002 149.2998 287.2998 149.6001 287.7998 C149.7002 287.1001 148.6001 286.6001 148.2998 286.1001 Cf146.2998 286.1001 m145.8999 285.7002 145.6001 285.2002 145.2002 284.7002 C145.1001 284.7002 146.2998 286.1001 Vf145.3999 282.8999 m145.3999 284.3999 147.2002 284.2002 147.7002 285.5 C147.2002 284.3999 146.3999 283.8999 145.3999 282.8999 Cf144.2002 284.1001 m144.1001 284 144.1001 283.7998 144 283.7002 C144.1001 283.7998 144.1001 284 144.2002 284.1001 Cf142.3999 282 m142.7002 282.5 144.3999 283.7998 143 282.2002 C142.7002 282.3999 142.7002 281.8999 142.3999 282 Cf144.6001 282.3999 m144.6001 282.2002 144.6001 282 144.6001 281.7998 C144.3999 281.7002 144.2002 281.7002 144.6001 282.3999 Cf141.8999 281.3999 m141.2002 280.6001 140.6001 279.7998 139.8999 278.8999 C140.6001 279.7998 141.2002 280.6001 141.8999 281.3999 Cf143.7998 280.6001 m142.7998 279.7998 142.6001 278.7998 141.2998 278.7002 C141.7998 279.5 142.7002 279.3999 142.6001 280 C143.6001 279.6001 142.7002 281.1001 143.7998 280.6001 Cf127.2998 278.2998 m127.2002 278.2002 127.1001 278 126.8999 277.8999 C127.1001 278 127.2002 278.2002 127.2998 278.2998 Cf139.2998 278.2998 m137.5 276.2998 135.7998 274.2998 134.1001 272.3999 C135.7998 274.2998 137.5 276.2998 139.2998 278.2998 Cf140.8999 278.2998 m141 278.2998 141 278.2998 141.1001 278.2998 C141 278.2998 141 278.2998 140.8999 278.2998 Cf140.5 277.7002 m140.6001 277.7002 140.7998 277.7002 140.8999 277.7002 C140.7002 277.5 140.5 277.2998 140.5 277.7002 Cf139.5 276.1001 m139.7002 275.7002 139.2002 275.8999 139.1001 275.8999 C138.6001 276.8999 141.2998 277 139.5 276.1001 Cf137 273.6001 m137.2998 274.2002 138.5 275.6001 138.7002 275 C138.1001 274.5 137.5 273.7002 137 273.6001 Cf122.7998 273 m122.7002 272.8999 122.5 272.7002 122.3999 272.6001 C122.5 272.7002 122.7002 272.8999 122.7998 273 Cf135.6001 271.5 m135.1001 271.5 135.6001 272 135.7998 272.2002 C136.2998 272 135.6001 271.7002 135.6001 271.5 Cf132.1001 269.7002 m130.6001 268.3999 132.2002 270.2002 132.2998 270.5 C132.8999 270.3999 131.8999 270 132.1001 269.7002 Cf133.1001 268.7002 m132.8999 268.7998 135.5 272.1001 133.7002 269.5 C133.3999 269.2998 133.3999 268.8999 133.1001 268.7002 Cf128 265.3999 m129.1001 266.2998 130 267.7002 131 268.8999 C130.6001 267.8999 128.7998 266.2002 128 265.3999 Cf0 g131 265.7998 m131.1001 266 131.6001 267 132.2998 267.2002 C132.2998 266.6001 131.6001 266 131 265.7998 Cf1 g127.7002 265 m127.7002 264.8999 127.7002 264.7998 Y127.6001 264.6001 127.5 264.5 127.7002 265 Cf125.1001 261.7002 m125.2002 262.2002 125.7998 262.5 126.1001 262.8999 C126 262.3999 125.2998 261.8999 125.1001 261.7002 Cf126.2998 260.6001 m125.8999 260.2998 125.2002 259.6001 124.8999 259.2002 C125 260 127.7002 262.3999 126.2998 260.6001 cf120.7998 256.2998 m120.8999 256.7002 122.5 258.5 123.3999 259.6001 C122.7998 258.3999 121.3999 257.2998 120.7998 256.2998 Cf121.7998 255.2998 m122 256.2002 126.3999 261.2002 123.6001 257.2998 c123 256.7002 122.2002 256.1001 121.7998 255.2998 Cf118.8999 251.6001 m119.2998 252.3999 120.2998 253.8999 121.3999 254.8999 C120.7998 253.7002 120.2002 252.7002 118.8999 251.6001 Cf119.2998 254.2998 m118.7998 253.6001 118.7002 254 119.1001 254.5 C119.2998 254.5 119.2998 254.3999 119.2998 254.2998 Cf117.8999 252.7998 m117.8999 252.7002 117.8999 252.5 117.8999 252.3999 C117.7998 252.2998 117.7002 252.2998 117.8999 252.7998 Cf116.6001 251.2002 m116.6001 251.1001 116.6001 251 Y116.6001 250.8999 116.5 250.7998 116.6001 251.2002 Cf118.5 251 m116.7002 249.2998 112.2998 242.3999 116.6001 249.1001 C117.6001 249.3999 117.7002 250.5 118.5 251 Cf112.5 246 m113.3999 247.1001 114.2998 248.2002 115.2002 249.2998 C114.2998 248.2002 113 246.7002 112.5 246 Cf0 g219.8999 247.2998 m219.5 246.6001 219.2998 247.5 219.7002 247.7002 c220.1001 247.8999 219.7998 247.3999 219.8999 247.2998 Cf1 g111.1001 244.3999 m111.2002 244.3999 111.3999 244.3999 111.5 244.3999 C111.3999 244.3999 111.2002 244.3999 111.1001 244.3999 Cf110.2998 243.3999 m110.2002 243.2002 110.1001 243.1001 110.1001 242.8999 C110.1001 243.1001 110.2002 243.2002 110.2998 243.3999 Cf107.3999 239.3999 m107.7002 239.6001 110.2002 243.5 109 241.5 C108.2998 240.8999 107.8999 240.1001 107.3999 239.3999 Cf106.6001 238.3999 m106.6001 238.2998 106.6001 238.2998 106.6001 238.2002 C106.3999 238 106.1001 237.7998 106.6001 238.3999 Cf108.3999 237.7998 m108.2002 237.7002 108.1001 237.2998 107.7998 237.3999 C107.8999 237.6001 108.7998 239.2998 108.3999 237.7998 Cf107.3999 237 m107.2998 236.7998 107.1001 236.6001 107 236.3999 C107.1001 236.6001 107.2998 236.7998 107.3999 237 Cf105.1001 236.6001 m105 236.3999 105 236.2002 104.8999 236 C104.7998 236 104.7998 236 105.1001 236.6001 Cf106.3999 235.2998 m106.2002 235.1001 106 235.1001 105.7002 235.1001 C105.8999 235.2998 106.3999 235.7998 106.3999 235.2998 Cf105.7002 234.5 m105.2998 233.6001 104.2998 232.5 103.5 232 C104 233 105.2002 233.8999 105.7002 234.5 Cf100.3999 230.2002 m100.3999 230.7002 105.5 237.2002 102 232.2002 C101.2998 231.7002 101.1001 231 100.3999 230.2002 Cf100.6001 228.2998 m101.7002 229.2998 102 230.8999 103.2998 231.3999 C102.5 230.2998 102.2002 229.1001 100.6001 228.2998 Cf99.7998 229.3999 m99.6001 229.2002 99.5 229 99.3999 228.7998 C99.2998 228.7002 99.2002 228.6001 99.7998 229.3999 Cf100 227.2998 m100 227.2002 100 227.2002 100 227.1001 C99.7998 227 99.7002 226.7998 100 227.2998 Cf99.2002 225.7002 m99 224.7998 97.5 224.6001 97.7002 223.7998 C97.5 224.2998 99.6001 227.1001 99.2002 225.7002 cf95.5 223.3999 m95.6001 223.6001 95.7002 223.7998 95.8999 224 C95.7002 223.7998 95.6001 223.6001 95.5 223.3999 Cf95 223 m95 222.8999 95 222.8999 95 222.7998 C95 222.7002 94.8999 222.7002 95 223 Cf91.7002 218.5 m92.3999 219.7002 93.7002 220.7998 94.2002 222 C93.7002 221.1001 92.5 219.2998 91.7002 218.5 Cf0 g96.2998 220.7002 m96 220.5 95.7998 220.2002 95.5 220.2998 C95.5 220.6001 96.3999 221.7998 96.2998 220.7002 Cf95 219.2998 m94.8999 218.8999 94.5 219.1001 94.6001 219.5 C94.7998 219.3999 95.2002 219.7002 95 219.2998 cf1 g91.2998 218.1001 m91.1001 217.6001 90.8999 217.2002 90.7002 216.7998 C90.8999 217.2002 91.1001 217.6001 91.2998 218.1001 Cf84.7998 206.1001 m87.1001 209.2002 89.8999 214.1001 92.7998 217 C90 213.2998 87.5 209.5 84.7998 206.1001 Cf89.8999 215.6001 m89.3999 214.8999 89.2998 215.2998 89.7002 215.7998 C89.8999 215.7998 89.8999 215.7998 89.8999 215.6001 Cf86.3999 210.8999 m86 210.7002 89.8999 215.7998 87 211.2998 C86.8999 210.8999 86.5 211.2002 86.3999 210.8999 Cf85.7998 210 m85.7002 209.7998 85.7002 209.6001 85.6001 209.3999 C85.3999 209.2998 85.2998 209.1001 85.7998 210 Cf84.1001 207.7998 m84.1001 207.6001 84 207.3999 83.8999 207.2002 C84 207.3999 84.1001 207.6001 84.1001 207.7998 Cf82.1001 204.8999 m82.7002 205.2002 82.7998 206.2002 83.2998 206.7002 C83.3999 206.2998 82.6001 205.2998 82.1001 204.8999 Cf84.2998 205.5 m84.2998 205.2998 84.2002 205.1001 84.1001 204.8999 C84 204.8999 84.2998 205.5 Vf81.7002 203.8999 m81.7998 204 81.8999 204.1001 V81.7998 204 81.7002 203.8999 Yf82.5 202.6001 m82.2998 203 83.2002 203.8999 83.5 204.5 C84.1001 204.2002 83.1001 203.1001 82.5 202.6001 Cf80.6001 202.7998 m80.5 202.6001 80.3999 202.2998 80.2002 202 C80.3999 202.2998 80.5 202.6001 80.6001 202.7998 Cf82.2998 202 m81.2998 200.7002 80.2002 198.7998 79.2002 198.1001 C80.7998 199.3999 81 201.5 82.2998 202 Cf79 200.3999 m79.1001 200.3999 79.1001 200.3999 79.2002 200.3999 C79.1001 200.3999 79.1001 200.3999 79 200.3999 Cf76.5 196.5 m76.7998 197.7998 80.8999 202.2998 77.6001 197.8999 C77 197.5 76.8999 196.8999 76.5 196.5 Cf78.2002 196 m76.7002 194.7998 78.2998 196.6001 78.3999 196.8999 C79 196.7002 78 196.3999 78.2002 196 Cf76.2998 195.7998 m76.1001 195.3999 75.6001 195.8999 76.1001 196 C76.2998 196.1001 76.2998 196 76.2998 195.7998 Cf75.7002 195 m75.5 194.5 75 195 75.5 195.2002 C75.7002 195.2002 75.7002 195.2002 75.7002 195 Cf77.6001 195 m77.2002 194.5 76.6001 194.5 76.5 194 C77.1001 194.2002 76.7002 195.7002 77.6001 195 Cf75.1001 194.3999 m74.7998 194 74.5 193.6001 74.2998 193.2002 C74.5 193.6001 74.7998 194 75.1001 194.3999 Cf75.8999 192.5 m75.7002 192.3999 75.6001 192.1001 75.2998 192.1001 C75.7998 193 76.8999 194.2002 75.8999 192.5 Cf0 g229.3999 191.5 m229.2002 191.2998 229 191.2998 228.7998 191.2998 C228.8999 191.5 229.3999 192 229.3999 191.5 Cf1 g71.2002 188.6001 m71.6001 189.3999 74 192.5 72 189.7002 C71.6001 189.3999 71.3999 188.7998 71.2002 188.6001 Cf0 g72.6001 187.6001 m72.6001 187.3999 72.6001 187.2002 72.6001 187 C72.6001 187.2002 72.6001 187.3999 72.6001 187.6001 Cf1 g69.7002 186.3999 m69.8999 186.8999 71.2998 189.1001 70.7998 187.6001 C70.3999 187.3999 69.7998 186.7002 69.7002 186.3999 Cf66 180.6001 m66.5 181.8999 67.5 182.6001 68.1001 183.7002 C67.2002 182.5 67.1001 181.7002 66 180.6001 Cf58.2002 165.2002 m59.8999 168.2002 62.6001 172.7002 65 176.1001 C62.7998 172.2002 60.2002 168.8999 58.2002 165.2002 Cf63.2002 175.8999 m63 175.7002 62.8999 175.5 62.7002 175.2998 C62.8999 175.5 63 175.7002 63.2002 175.8999 Cf0 g219.7002 174.8999 m219.7998 174.8999 219.7998 174.8999 219.8999 174.8999 C219.8999 174.7002 219.8999 174.6001 219.7002 174.8999 Cf1 g61.8999 174.2002 m62 174.2002 62.2002 174.2002 62.2998 174.2002 C62.1001 174 61.8999 173.7998 61.8999 174.2002 Cf61.2998 173 m61.2002 172.7998 61 172.6001 60.8999 172.3999 C61 172.6001 61.2002 172.7998 61.2998 173 Cf60.2998 171.6001 m60.2002 171.3999 60.1001 171.2998 60.1001 171.2002 C60.1001 171.2998 60.2002 171.3999 60.2998 171.6001 Cf57.2002 163.7002 m57.2998 163.7002 57.5 163.7002 57.6001 163.7002 C57.3999 163.5 57.2002 163.2998 57.2002 163.7002 Cf55.1001 160 m55.2002 160 55.2998 160 Y55.1001 159.7998 54.8999 159.5 55.1001 160 Cf52.5 155.7002 m52.6001 155.7002 52.7002 155.7002 52.8999 155.7002 C52.7002 155.7002 52.6001 155.7002 52.5 155.7002 Cf47.5 146.5 m47.5 146.2998 47.5 146.2002 47.5 146.1001 C47.3999 145.8999 47.2002 145.7998 47.5 146.5 Cf46.5 144.3999 m46.3999 144.2002 46.3999 144 46.2998 143.7998 C46.3999 144 46.3999 144.2002 46.5 144.3999 Cf45.2998 141.7002 m44.6001 141.8999 45.7998 142.2998 45.5 142.7998 C45.8999 142.7002 45.3999 142 45.2998 141.7002 Cf43.3999 141.7002 m43.2998 141.5 43.2998 141.2998 43.2002 141.1001 C43.2998 141.2998 43.2998 141.5 43.3999 141.7002 Cf44.6001 141.1001 m44.7002 141.1001 44.7998 141.1001 Y44.7998 141 44.7998 140.7998 44.6001 141.1001 Cf44 139.5 m44 139.3999 44 139.2998 Y43.8999 139.1001 43.7002 139 44 139.5 Cf43 137.6001 m43 137.3999 43 137.2002 43 137 C43 137.2002 43 137.3999 43 137.6001 Cf39.2998 133.1001 m39.1001 132.7002 38.8999 132.2998 38.7002 131.8999 C38.8999 132.2998 39.1001 132.7002 39.2998 133.1001 Cf40.2998 132.1001 m40.2002 131.8999 40.2002 131.7002 40.1001 131.5 C40.2002 131.7002 40.2002 131.8999 40.2998 132.1001 Cf38.1001 130.3999 m38 130.2998 37.8999 130.2998 37.8999 130.2002 C37.8999 130.2998 38 130.2998 38.1001 130.3999 Cf34.7998 120.1001 m34.7002 120 34.6001 119.8999 34.6001 119.7002 C34.6001 119.8999 34.7002 120 34.7998 120.1001 Cf63.2002 109.3999 m63 109.2998 62.8999 109.2002 62.7002 109 C62.8999 109.2002 63 109.2998 63.2002 109.3999 Cf62.1001 108.6001 m61.2002 107.7998 60.3999 107 59.5 106.1001 C60.3999 107 61.2002 107.7998 62.1001 108.6001 Cf73.3999 95.2002 m73.2998 94.8999 73.2002 94.6001 73 94.2002 C73.2002 94.6001 73.2998 94.8999 73.3999 95.2002 Cf105.2998 91.5 m105.7998 92.6001 107.2998 93.2998 108.2002 94.2002 C107.3999 93.3999 106.2002 92.2998 105.2998 91.5 Cf72.3999 92.3999 m72.2998 92.1001 72.2998 91.7998 72.2002 91.5 C72.2998 91.7998 72.2998 92.1001 72.3999 92.3999 Cf71.3999 89.1001 m71.3999 89 72 92.5 71.7998 90.1001 C71.3999 89.8999 71.7998 89.2998 71.3999 89.1001 Cf104.5 90.8999 m104.6001 90.8999 104.6001 90.8999 104.7002 90.8999 C104.3999 90.6001 104 90.2002 104.5 90.8999 Cf70.3999 85.6001 m70.2002 85.8999 70.6001 86.7998 70.7998 87.3999 C70.7002 86.7998 70.8999 86 70.3999 85.6001 Cf100.6001 86.6001 m100.5 86.5 100.2998 86.2998 100.2002 86.2002 C100.2998 86.2998 100.5 86.5 100.6001 86.6001 Cf0 g68.5 75.5 m68.6001 75.3999 68.6001 75.3999 68.7002 75.2998 C68.7002 75.2002 68.7002 75.2002 68.5 75.5 Cf86.2002 68.8999 m86.2998 69 86.5 69.2002 86.6001 69.2998 C86.5 69.2002 86.2998 69 86.2002 68.8999 Cf1 g67.2998 69.1001 m67.2002 68.7998 67.1001 68.6001 67.1001 68.2998 C67.1001 68.6001 67.2002 68.7998 67.2998 69.1001 CfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF