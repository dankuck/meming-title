%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%AI8_CreatorVersion: 10.0%%For: (\601\613) ()%%Title: (flame_024.eps)%%CreationDate: 03.8.5 9:38 PM%%BoundingBox: 6 7 366 291%%HiResBoundingBox: 6.5498 7.2002 365.6377 290.8999%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 1.1%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI3_TemplateBox: 188 151 188 151%AI3_TileBox: -99 -258 473 558%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 596 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -604 727 1 1266 977 18 0 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-99 -258%%AI3_PaperRect:-11 831 585 -11%%AI3_Margin:11 -12 -13 11%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.4 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.4 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 70 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin		Adobe_blend_AI5_vars begin			/_contoneDevice where			{				pop			}			{				/_contoneDevice false def				} ifelse								/_dpiThreshold where			{				pop			}			{					/_dpiThreshold 600 def			} ifelse						/_screenFreqThreshold where			{				pop			}			{					/_screenFreqThreshold 150 def			} ifelse						/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def	/invertXfer	{		[		{			1 exch sub				} /exec load systemdict/currenttransfer get exec /exec load				] cvx systemdict/settransfer get exec			} bd			/spotDict 3 dict dup begin				/nSpots 2 def				/spot1 7 dict def				/spot2 7 dict def		 end			def			composite?			{				/_setgray_ /setgray load def				/_fill_ /fill load def				/_image_ /image load def			}			{				/_setgray_ systemdict/setgray get def				/_fill_ systemdict/fill get def				/_image_ systemdict/image get def			} ifelse		} bd		/terminate		{			currentdict Adobe_blend_AI5_vars eq			{		 end			currentdict Adobe_blend_AI5 eq			{		 end		} if	} if} bd/_compositeSpotDevice where{ begin		_compositeSpotDevice 0 ne {userdict /composite? true put} if end}{	/_compositeSpotDevice 0 def	} ifelse	/nullString () def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/d255- 256 array def0 1 255{	d255- exch 1 d255 2 index get sub put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 89 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where{	pop lv1Fix}{	false} ifelsedef/ccAry1 5 array def/ccTint 0 def/spotColor? false def/colorimage? true def[/tint1Data/tint2Data/spotDict/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/setCustomColor{	dup /ccTint exch store	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/currentCustomColor{	ccAry1 aload pop ccTint} bd/nsetcustomcolor where {	pop}{	/nsetcustomcolor	{		pop setcmykcolor		} bd} ifelse/nsetcustomcolorend where {	pop}{	/nsetcustomcolorend	{	} bd} ifelse/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop				spotColor?			{			dup 1 exch sub /ccTint exch def			ccAry1 4 /Black put			} if		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/bwImage{	setImgSpace cData /_image_ load	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		expandCMYK		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd} if/expandOne{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if} bd/expandSpot{	spotColor?	{		spotDict begin			spot1 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end			spot2 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end	 end	} if} bd/expandCMYK{	4	{		expandOne 4 1 roll	} repeat} bd/colorimage where dup{	exch pop		/ncolorimage where	{		pop	}	{		/ncolorimage {pop colorimage} bd	} ifelse} ifnot{	/ncolorimage where 	{		pop	}	{		/colorimage? false store		/ncolorimage		{			pop pop pop			setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind			_image_ 		sSave restore	} bd	} ifelse} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		colorimage? 		{			expandCMYK		} if		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		bwImage		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		spotColor?		{			spotDict begin				spot1 begin					currentCustomColor makeByte /tintImage exch def					/name exch def					/spot_K exch def					/spot_Y exch def					/spot_M exch def					/spot_C exch def			 end				spot2 initSpotData		 end		} if		currentcmykcolor		4		{			makeByte 4 1 roll		} repeat		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			spotColor?			{				spotDict begin					/spotDict cvx /begin cvx					spot1 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx					spot2 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/spotDict cvx				/nsetcustomcolor cvx			}			{				/setcmykcolor cvx			} ifelse		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg		{			{				_fill			}		}		{			{				_of true eq				{					currentgray 1 ne					{						bwFill					} if				}				{					bwFill				} ifelse			}		} ifelse		def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq				{					setSSave					/cData whiteByte store					/cDataLen 8 store					bwImage					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		/_setgray_ cvx	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if	} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse	} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					_setgray_ 					_fill_ 				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse							nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq			{				/blend? false store			} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt		{			/blend? false def		} if		blend?		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/initSpotData{ begin		/name null def		/tintImage null def		/tintValue null def		/spot_C  null def		/spot_M  null def		/spot_Y  null def		/spot_K  null def end} bd/getRData{	/colorType gMark store	_compositeSpotDevice 0 ne	{		spotDict begin			spot1 initSpotData			spot2 initSpotData	 end		/spotColor? colorType 2 eq colorType 3 eq or def	} 	{		/spotColor? false store	} ifelse	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			_compositeSpotDevice 0 ne			{				spotDict begin					spot1 begin						/name 3 index def						/spot_K 4 index def						/spot_Y 5 index def						/spot_M 6 index def						/spot_C 7 index def				 end			 end			} if			7		} ifelse	} ifelse	/tmp exch def	tmp index 100 div /endPoint xs	_compositeSpotDevice 0 ne	{		tmp 2 add index 3 eq		{			/tmp tmp 4 add def			tmp index dup 			spotDict begin				spot1/name get ne				{					spot2 begin						/name exch def						/spot_K tmp 2 add index def						/spot_Y tmp 3 add index def						/spot_M tmp 4 add index def						/spot_C tmp 5 add index def				 end				}				{					pop				} ifelse		 end		} if	} if	/color? colorType 0 gt store		colorType 3 eq	{		/tint2Data gMark store	} if		colorType 2 ge	{		/tint1Data gMark store	} if	_compositeSpotDevice 0 ne	{		spotDict begin					colorType 2 ge			{				colorType 3 eq				{					spot2 begin						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def						name null eq {/name /Black def} if				 end				} if				spot1 begin					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def					colorType 2 eq 					{						name null eq 						{							/name spot2/name get def							spot2/name null put						} if					}					{						name null eq {/name /Black def} if					} ifelse			 end			} if	 end	} if		/cData gMark store	setCDataLen	colorType 0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		_eo {eoclip} {clip} ifelse		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/bwImage		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq	{		0	}	{		bDataLen ubAxis div	} ifelse	store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where dup	{		exch pop _compositeSpotDevice 1 ne and	} if	{		0 0 bInc 1 /rectfill cvx		}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		/_fill_ cvx	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	spotColor? {nsetcustomcolorend} if		grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt		{			exch		} if		pop store		/pChange ubAxis 0 eq		{			0		}		{			bDataLen ubAxis div		} ifelse		store		pChange .5 gt noImg not and dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	spotColor? {nsetcustomcolorend} if	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put end} if} bd/Bn{1 add dictdup nullString null put/_bn xs} bd/Bd{Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store			/_fill			{				_of true eq				{					currentgray 1 ne					{						__fill					} if				}				{					__fill				} ifelse			} def	} ifelse	/fill	{	} def	} bd	/BB	{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 kPc1 1 1 1 kPcPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(\203\214\203C\203\204\201[ 1) Ln0 A0 O0 g2 J 0 j 1 w 2 M []0 d201.3999 289 m202.5 286 205.8999 284.1001 205.2998 280.2002 C206.3999 277.6001 207.2002 275 208.6001 272.6001 C208.6001 271.1001 209.7002 270.8999 210.3999 270.1001 C211 268 213.1001 266.7998 213.7002 264.7998 C215.6001 264.1001 215.2002 261.7998 217 261.2998 C217.5 258.8999 220.7998 258.1001 221.7998 255.8999 C224.2002 254.8999 225 252.1001 227.7002 252 C229 250.1001 231.6001 250 233.5 248.7002 C236.6001 247.2998 239.8999 246.6001 242.7002 244.6001 C244.2002 244.5 246 244.5 246.8999 243.3999 C250.5 242.7998 254.1001 242 258 241.8999 C259.5 241.2998 262 241.3999 263.7002 241.2998 c267.3999 241.2998 271 242.7998 274.3999 244 C280.2002 244.8999 284.5 248.2002 289.3999 251.3999 c292.3999 253.1001 292.8999 256.2002 293.7998 259 C293.6001 261.2998 294 264 296.2002 265.3999 c297.2998 266 297.8999 264.2002 299.1001 264.5 C300.5 263.1001 302.7998 262.2002 301.6001 260 C301.2002 256.1001 296.2002 255.1001 296.6001 251 C294.8999 249.2002 295.8999 246.2998 294.2002 244.6001 C294.7998 243.7998 294 243 293.6001 242.2998 C294 237.2002 291.7002 233.1001 294 228.7998 C293.7002 225.8999 295.2002 223.7002 295.7998 220.7002 c296.1001 218.8999 296.2998 216.5 297.8999 215 C299.5 214.1001 298 212.5 299.7002 211.8999 C299.6001 211.2002 300.6001 210.7998 300.1001 210.2002 C302.2002 208.7998 302.7002 205.7002 304.5 204.5 C304.7002 203.2998 306.5 202.7998 306.1001 201.3999 C309.5 198.1001 313.2998 195.7002 317 193 C319.3999 192 321.2998 190.6001 323.7998 189.8999 C325.1001 189.7998 325.6001 188.3999 326.7002 188.3999 C331.2002 187.7002 337.5 186.3999 342.5 187.2002 C345.1001 186.6001 347.8999 188.2002 350.7002 188.2002 c353.7998 188.5 356.1001 190.6001 359 191.2998 C360.5 193.2002 362.7002 192.7002 364.8999 193.3999 C366.1001 191.7998 365.6001 189.7998 365.1001 188 C364 185.7998 360.8999 187.2002 359.3999 185.2998 C356.2002 184.8999 354.7002 183 351.7998 182.1001 C349.1001 179.5 345.2998 178.7998 342.1001 177.1001 c336.6001 174.7998 330.7998 170.7002 327.1001 166.2002 C325.7998 163.5 323.1001 161.1001 321.8999 158.2002 C319.7998 157 321 154.1001 318.8999 152.7998 C318.7002 150.7998 317.7002 148.5 317.2002 146.2998 C316.2002 145.8999 317.2002 145.2002 316.6001 144.7998 C316.1001 142.5 315.7002 138.8999 315.3999 136.6001 C314.7002 136.2998 315 135.7002 314.8999 135.2002 C315.7002 134.1001 314.2998 132.3999 315.3999 131.2002 C314.7002 126.2998 315.6001 121.7002 315.6001 116.3999 C316.6001 110.8999 317.1001 105.7998 319.5 100.2002 C319.3999 98.8999 320.2998 97.6001 321.1001 96.5 C321.3999 94.1001 323 92.7002 323.2002 90.5 C326.5 87.1001 327.2002 82.2998 330.7998 78.7998 C331.2002 77.5 330.6001 75.8999 330.7998 74.2998 C330.2998 73.5 329.2998 74 328.5 73.8999 C327.6001 74.6001 327.1001 75.7002 325.6001 75.5 C322.7998 77.3999 319 77.7998 315.3999 78.3999 c310.8999 79.1001 305.8999 79.2998 301.3999 80.2002 c300.1001 80.3999 298.5 79.7002 297.7002 80.7998 C296.1001 80.5 294.2002 80.6001 292.8999 81.5 C289.3999 81.2998 284.7998 82 281.6001 80.7998 C279.7998 80.7002 278 80.1001 276.2998 81.1001 C274.3999 79.7002 271.7002 79.3999 269.5 78.6001 C268.2998 79 267.3999 77.5 266.2002 77.2998 C262.2998 75.8999 259.2998 72.3999 256.1001 70.1001 c254.6001 69 252.7998 67.2002 251.7998 65.3999 C248.3999 62.5 246.5 58.2002 245.6001 53.8999 C243.7002 51.3999 243.6001 48.1001 242.5 45.2998 c241.7998 43.2998 241.6001 42 241.1001 39.8999 c240.7998 37.3999 239.2002 35.8999 239.7002 32.8999 C237.7002 30 239.2002 27.1001 237.6001 24.1001 C238 22.3999 236.8999 20.8999 237 19.1001 C236.7998 18.8999 236.6001 18.7002 236.3999 18.5 C236.2002 17.3999 236.7002 15.5 236 14.3999 C237.5 12.3999 234.8999 10.7998 235.2998 9.1001 C234.7998 8.2002 234.2998 7.7002 233.5 7.2002 C231.8999 7.2002 230.6001 7.8999 229.3999 8.7998 C228.6001 10.1001 227.5 11.5 227.8999 13 C227.3999 13.2002 227.5 13.7002 227.5 14.2002 C227.6001 14.5 228.5 14.5 227.8999 14.7998 C227.7998 14.7998 227.7002 14.7998 227.5 14.7998 C228.2002 17.2998 227.1001 19.7998 226.8999 22.6001 C226.3999 24.6001 224.8999 25.1001 224 26.8999 C223.2002 28 222.7998 29 222 30 C222.1001 31.2002 220.7998 31.7998 221.1001 33.1001 C220.3999 33.7998 220 35 220.1001 35.7998 c220 38.6001 216.5 39.8999 215.6001 42.3999 C212 46.5 208.1001 49.7998 204.1001 52.8999 C204.1001 54.2998 202.1001 53 202 54.5 C198.8999 55.5 196.1001 57.2002 193 58.2002 C191.8999 59.7998 190 59.2998 188.7998 60.7002 C186 61.1001 183.6001 62.5 180.6001 62.5 C176.7002 64.2998 172.8999 63.2998 168.8999 64.2002 C168.2002 63.1001 166.7998 64.5 165.7998 63.7998 c163.8999 62.6001 161.3999 64.5 159.6001 62.8999 C157.2998 63.2002 155.5 61.6001 153.5 61.8999 C149.3999 60.6001 145.6001 58.7002 141.5 57.6001 C139.7998 55.5 137 55.5 135.6001 53.2998 C135.2002 52.2998 134.2002 53 133.7002 52.2998 c132.5 50.6001 130 51.2002 129.3999 49.2002 C125 47.2998 122.1001 43.6001 118.2998 41.1001 C117.3999 40.2998 116.3999 39 115 38.8999 C111.2998 34.2002 106.5 30.7002 102.8999 26.2998 C100.7002 26.3999 100.3999 21 98.8999 24.5 c98.7002 25.3999 97.7002 26 97.5 27.2002 C98.8999 28.7002 98.7002 31.2998 100.2002 32.5 C100.7002 34.7998 102.5 37.2002 103.5 39.2998 C103.8999 39.8999 104.2998 40.3999 104.2998 40.8999 C104.8999 42.6001 106.6001 44.7002 107.7998 45.7002 C109.6001 49.7998 110.7002 54 113.1001 58.2002 C114 62.7998 117.2002 68.1001 117.1001 72.7998 C117.7002 77 118.2998 80.8999 118.1001 85 C116.8999 85.7002 118.7998 87 117.2998 87.6001 C117.2998 87.8999 117.1001 88.2998 117.5 88.5 C114.6001 91.2002 115.3999 94.7998 112.2998 97.2998 C112.1001 100.2002 108.7998 101 108 103.5 C106 105.7002 103.1001 107 101.6001 109.6001 C99.6001 109.6001 99.5 112.5 97.2998 112.2998 C95.3999 113 95.2002 115.2002 93 115 C92.5 115.3999 91.3999 115.7998 91.5 116.2002 C91.5 116.2998 91.5 116.3999 Y90.1001 116.8999 88.2998 117.2998 87.3999 118.2998 C85.3999 119.8999 83.2002 119.1001 81.5 121.3999 c80.1001 123.3999 76.5 122.2998 75.1001 124.7002 C72.8999 125.3999 70.8999 126.7998 68.7002 127.5 C69.7998 128.1001 68.2002 128.3999 67.8999 128.6001 C66.2998 128.2998 66.1001 129.8999 64.6001 129.3999 C61.7002 132 57.2998 132.6001 54.5 135.2002 C51 136.1001 47.8999 138.1001 44.3999 139.1001 c42.7998 139.7998 41.2998 140.7002 39.5 140.8999 C37.2002 142 34.7002 142.2998 32.5 143.6001 C27.7998 144.7998 24.3999 145.8999 20.2002 147.8999 c15.7998 149.7002 10.2002 144.3999 7 149.7998 c6 151.7002 6.6001 153.7998 7.6001 155.5 C9.7002 157 11.7998 156.8999 14 158.2002 C17.7002 158.2998 21.2002 158.7998 24.2998 158.6001 c26.3999 158.7998 28.3999 159.2002 30.3999 159.6001 C31.8999 158.8999 33.5 160.2002 35 160.5 c38.8999 161 42.5 162.6001 46.2998 162.8999 C48.8999 164.7002 52.3999 164.8999 54.7002 167 C58.2998 168.2998 60.7998 169.3999 64 171.2002 c65.1001 171.7998 66.1001 172.8999 67.5 173 C68.2998 174.2002 69.8999 175.2002 71.6001 175.2998 C73.7998 177 75 179.7002 77.7998 180.2002 C79.2998 182.3999 81.7002 183.2998 83.5 185.2998 C85.6001 186.2002 86.7998 188.6001 88.8999 189.5 C90.7002 191.5 92.7998 193.6001 94 196.2998 C96.2002 197.7002 96 200.2998 98.1001 202 C99.2998 203.8999 99.6001 206.2002 101.2002 208 C101.7002 209.1001 101.7002 209.7002 102.2002 210.8999 C103.7002 211.8999 102.7002 213.8999 103.8999 215 C104.2002 217.1001 107 218.3999 106.1001 220.8999 C107.7002 224 108 228.2002 109.8999 231.2002 C109 233 110.5 233.6001 110.2998 235.2998 C111.5 236.3999 109.6001 238.1001 111.1001 239 C112.2002 240.2998 110.7998 241.6001 111.5 243.2002 c112.2998 244.3999 110.7998 245.3999 110.8999 246.8999 C109.7998 247.8999 110.2998 249.2998 110.5 250.3999 C110.3999 252 112.6001 251.8999 112.8999 253.2002 C115.3999 254.1001 118.2002 253.8999 120.2998 255.5 C121.7998 255.2998 122 254.3999 122.3999 253.2002 C122.3999 251.8999 121.5 251.6001 121.7998 250.3999 C121.6001 250.2998 121.2998 250.3999 121.2002 250.1001 C122.7998 249.2002 121.2998 246.2002 123.2002 245 C124.5 243.6001 123.2998 241.7002 124.2998 240.5 C125.3999 237.5 128.6001 234.7998 131.7002 234.2998 C132.6001 233.1001 134.5 233.3999 135.7998 232.5 C140.3999 231.7002 145 231.8999 149.2998 233.1001 C152.5 234.7002 156.7998 234.7998 159.6001 237 c161.5 238.5 164.6001 238.2998 165.3999 240.8999 C166.6001 242.2998 168.2998 243.3999 169.1001 245 c169.5 245.6001 170.7998 245.2998 170.2998 246.2002 C172.1001 248.2002 174.2002 250.3999 175.5 252.7998 c175.7998 253.2002 176.5 252.7998 176.7002 253.3999 C176.8999 254.6001 177.3999 255.7998 178.6001 256.2998 C180.2002 260.3999 182.7998 264.2002 185.6001 267.7998 C185.7998 269.7998 187.7998 271.6001 188.2002 273.7998 c188.6001 275.2002 189.7002 275.7002 189.7002 277.2998 C190.6001 279.2002 191 281.2998 192.5 282.8999 C193.6001 284.7998 194.3999 287.1001 195.7998 288.7998 C196.1001 289.7998 196.8999 290.7002 197.8999 290.8999 C199.2998 290.8999 200.5 290.2002 201.3999 289 Cf1 g200.2002 278.8999 m201 277 202.2998 275.6001 203 273.7998 C203.7998 270 206.2998 266.7002 207.6001 263.2998 C208.8999 262.1001 208.8999 260 210.8999 259.3999 C210.7002 258.6001 211.7002 258.6001 212.1001 258.3999 C212.8999 254.7002 216.6001 254.1001 218.2998 251.2002 C220.2002 250.3999 221.5 248 223.6001 247.7002 C225.6001 246.8999 226.7002 244.7002 229.2002 244.3999 C232.8999 242.8999 235.2002 241.2998 239.2002 240.5 c242.2002 239.5 245.2002 237.8999 248.1001 237.3999 c254.3999 236.1001 261.2998 235 268 236.3999 C269.7002 237.3999 271.7998 237.2998 273.3999 238.3999 C276 237.7002 276.6001 240.5 279.2002 240.1001 C280.7998 240.8999 282.6001 241.7998 283.8999 243.2002 C285.2998 243 286.1001 245.1001 287.2002 244.2002 C289 241.6001 288.8999 239.3999 288.7998 236.6001 C288 233.2998 289.2998 230.7002 289.3999 227.5 C288.5 226.6001 289.3999 224.8999 289.3999 223.6001 c289.8999 217.3999 293.5 213 296.3999 207.7998 C296 205.2998 299.7998 205.5 298.7002 203 C301.6001 199.8999 304 195.7002 307.2998 193.6001 C308 192.8999 308.2998 191.7002 309.3999 191.5 c309.7998 191.3999 310.7998 191.7998 310.3999 190.8999 C314.7998 186.5 320.1001 184.7002 325.6001 182.7002 C328.5 182.2998 330.6001 181.8999 333.5 181.3999 C334.5 179.7002 332.5 178.7002 332 177.1001 C329 175.8999 328.7002 173.7002 326.1001 172 C323.7998 168.7002 320.3999 165.5 319.5 161.5 C316.5 158.8999 315.2002 154.5 314.8999 151 C314.7002 150.7002 314.3999 150.6001 314.5 150.2002 C314.3999 149.6001 314.2998 149.1001 314.2998 148.5 C313.2998 146.6001 313.8999 144.5 312.8999 142.7998 C313.1001 140.7002 312.1001 139.1001 312.5 137 C311.6001 135.7002 312.2002 134 312.1001 132.5 c311.5 130.3999 312.7998 128 312.1001 126.1001 C312.6001 124.2002 312.7002 123 312.5 121.6001 C312.8999 120.7002 312.3999 119 312.8999 117.8999 C312.7998 115.7998 313.8999 114 313.5 112.1001 C314.2002 111.1001 313.8999 109.7002 314.5 108.6001 C314.5 105.6001 316.2002 102.8999 316.2002 99.3999 C317.2998 98.2002 316.6001 97 317.3999 95.7002 c318.2002 93.8999 318.7002 91.2002 320.5 89.5 C321.2002 88.2002 321.6001 87.2002 321.8999 85.7998 C321.2998 84.2998 319.5 84.7002 318.2002 84.2998 C312.7002 84.8999 308.7998 86.6001 303.2002 86.2002 c302.7998 86.2002 301.7998 85.8999 301.3999 86.6001 C298.1001 86 295 87.7002 291.8999 87.3999 C286.3999 88.1001 281.2998 87.2002 275.7002 86.6001 C273.6001 85.7002 271.7002 86.2002 269.7002 85.2002 C266.5 84.3999 264.1001 82.3999 261 80.7998 C261.1001 80.2998 260.2002 80.2998 259.7998 80 C257.5 77.5 253.6001 75.1001 252.2002 72.6001 C248.3999 69.8999 246.7002 65.3999 244.6001 61.2998 C244.7002 60.7002 243.6001 59.5 244 58.6001 C242.7998 56.8999 242.2002 54.7998 241.1001 53.1001 C241.2002 52.2998 241.2998 51 240.7002 50.2002 C240.7002 48.6001 238.8999 46.7998 239.8999 45.1001 C239 44.6001 239.7998 43.5 239.2002 43 C238.7998 42.1001 238.6001 41.2002 238 40.2998 C238.2998 36.2998 235.8999 32.7002 236.3999 28.7998 C235.2998 27.8999 236.7002 26.7998 235.5 25.8999 C235.2002 24.3999 235 22.7998 234.5 21.3999 C234.1001 21.2998 233.7002 20.6001 233.2998 21.2002 c231.7002 23 230 25.2998 230 27.6001 c230.3999 30.3999 228.8999 33.8999 226.5 35.7998 C226.6001 36.3999 226.2998 36.8999 225.8999 37.2002 C225 42.8999 220.3999 47.2998 216 50.6001 C215.3999 52.5 213 52.7998 212.2998 54.5 C208.7998 57.5 204.5 60.3999 200.3999 61.2998 C198.6001 63.2002 196.2002 64.3999 193.6001 64.7998 C191.7002 66.3999 188.5 65.7998 186.6001 67.7002 C173.7998 70.7002 159.2002 71.2002 147.5 65.6001 c138.2998 62.7998 130.8999 57 123.6001 51.3999 C122.7002 50.2998 122.1001 49.2002 120.5 48.7998 C118.2998 46.5 114.6001 44.3999 112.7002 42 C111 41.2002 109.6001 39.7002 108.6001 38.7002 C108.5 40.7002 109.6001 41.2998 109.8999 43.3999 C110.8999 44.3999 111 46 111.8999 46.8999 C111.2002 49.2002 114.3999 50.2002 113.7998 52.2998 C114.7002 53.3999 114.3999 54.5 115.3999 55.5 C116.2998 59.1001 118.2998 62.7002 118.1001 66.2002 C119 69.2998 118.7998 72 119.8999 74.8999 C119.7002 78 120.6001 81.8999 119.1001 85 C119.6001 87.7002 117.8999 90 117.1001 92.3999 c116.7002 94.2002 115.2998 95.5 114.3999 97.1001 C114.3999 97.8999 113.5 98.7998 113.6001 99.7998 C113.1001 100.3999 111.7998 101.2002 111.7002 102 C109.7998 104.1001 108.2002 106.1001 105.8999 108.2002 c102.8999 110.5 100.2002 113 96.8999 115 C93.7002 118.2998 89.8999 118.7998 86.3999 121.2002 C83.7002 121.2998 81.6001 124 78.6001 124.5 C74.7002 126.3999 70.7998 128 67.1001 130.2002 C64.2998 130.2002 62.7002 132.6001 60.1001 132.8999 C54.6001 136.1001 48.3999 138.6001 42.6001 140.8999 c35.6001 143.1001 28.8999 146 22 148.2998 C22.5 150.2002 24.7002 149.2002 25.1001 151.2002 C26 150.8999 26.5 151.7002 27.2002 152 C30.2002 151.6001 32.7002 152.7998 35.3999 152.6001 C37.3999 154.6001 41.3999 152.8999 43.6001 154.8999 C48.5 156.3999 53.5 158.2002 57.7998 160.7002 C58.2998 162.8999 61.2002 160.8999 61.8999 162.7002 C63.8999 164.1001 67.1001 164.7998 68.5 166.7998 C71.2002 167.8999 73 170.7002 75.8999 171.3999 C78.7998 175.3999 83.8999 177.3999 87.6001 181 c88.7002 182.5 90.3999 183.7998 91.7002 184.8999 C92 187.1001 94.3999 187.2002 95.2002 189.1001 c96.7002 192.2002 99.1001 193.7998 99.6001 196.8999 C102.3999 200.1001 102.7998 204.1001 105.1001 207.2002 C105.1001 208.8999 107 210.3999 107 212.5 C107.7002 214.6001 108.7998 216.6001 109.2002 218.8999 C111.1001 221.1001 109.7002 224.6001 111.5 226.8999 C111.3999 228.2998 112.3999 229.6001 112.2998 230.7998 C113.2998 231.7998 112.1001 233.1001 112.8999 233.8999 C113.5 235.7998 113.6001 237.6001 114.6001 239.7002 C116.2998 239.3999 117 237.2998 117.8999 236 c119 234.3999 119.2998 232.3999 121.2002 231.3999 C123.5 229 126.2998 226.1001 130 226.1001 C134 223.7002 138.7998 223.7998 143.6001 223.6001 C145.3999 224.7998 147.7002 224.7002 149.7998 225.2998 c152.7002 225.8999 156 227.1001 159 228.1001 C159.3999 229.2002 160.7002 228.5 160.8999 229.6001 C163 230.7002 164.5 232.2002 166.6001 233.5 C169.3999 237 173.2998 239.2998 174.7002 243.6001 C177.7002 246 179.2998 249.7002 182.1001 252.6001 C181.7002 253.1001 182.7002 253.5 182.7002 254.1001 C183.2002 255.7002 184.6001 256.3999 185.1001 258 C187.1001 260.3999 187.7998 262.8999 189.5 265.6001 c189.8999 266.5 190.5 268.1001 191.1001 268.7002 C192 271.3999 193.8999 273.6001 195 276.2998 C196.2998 277.5 194.7998 281.2002 197.8999 280.3999 C198.6001 279.8999 199.2998 279.2998 200.2002 278.8999 CfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF