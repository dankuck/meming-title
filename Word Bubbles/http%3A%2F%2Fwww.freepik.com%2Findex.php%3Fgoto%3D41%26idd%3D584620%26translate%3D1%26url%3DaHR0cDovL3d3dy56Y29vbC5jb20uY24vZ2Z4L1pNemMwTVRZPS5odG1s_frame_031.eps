%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%AI8_CreatorVersion: 10.0%%For: (\601\613) ()%%Title: (flame_031.eps)%%CreationDate: 03.8.5 9:41 PM%%BoundingBox: 42 14 401 393%%HiResBoundingBox: 42.1626 14 400.5 392.7002%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 1.1%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI3_TemplateBox: 204.5 209.5 204.5 209.5%AI3_TileBox: -82.5 -199.5 489.5 616.5%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 596 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -358.5 641.5 1 1266 977 26 0 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-82.5 -199.5%%AI3_PaperRect:-11 831 585 -11%%AI3_Margin:11 -12 -13 11%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.4 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.4 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 70 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin		Adobe_blend_AI5_vars begin			/_contoneDevice where			{				pop			}			{				/_contoneDevice false def				} ifelse								/_dpiThreshold where			{				pop			}			{					/_dpiThreshold 600 def			} ifelse						/_screenFreqThreshold where			{				pop			}			{					/_screenFreqThreshold 150 def			} ifelse						/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def	/invertXfer	{		[		{			1 exch sub				} /exec load systemdict/currenttransfer get exec /exec load				] cvx systemdict/settransfer get exec			} bd			/spotDict 3 dict dup begin				/nSpots 2 def				/spot1 7 dict def				/spot2 7 dict def		 end			def			composite?			{				/_setgray_ /setgray load def				/_fill_ /fill load def				/_image_ /image load def			}			{				/_setgray_ systemdict/setgray get def				/_fill_ systemdict/fill get def				/_image_ systemdict/image get def			} ifelse		} bd		/terminate		{			currentdict Adobe_blend_AI5_vars eq			{		 end			currentdict Adobe_blend_AI5 eq			{		 end		} if	} if} bd/_compositeSpotDevice where{ begin		_compositeSpotDevice 0 ne {userdict /composite? true put} if end}{	/_compositeSpotDevice 0 def	} ifelse	/nullString () def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/d255- 256 array def0 1 255{	d255- exch 1 d255 2 index get sub put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 89 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where{	pop lv1Fix}{	false} ifelsedef/ccAry1 5 array def/ccTint 0 def/spotColor? false def/colorimage? true def[/tint1Data/tint2Data/spotDict/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/setCustomColor{	dup /ccTint exch store	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/currentCustomColor{	ccAry1 aload pop ccTint} bd/nsetcustomcolor where {	pop}{	/nsetcustomcolor	{		pop setcmykcolor		} bd} ifelse/nsetcustomcolorend where {	pop}{	/nsetcustomcolorend	{	} bd} ifelse/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop				spotColor?			{			dup 1 exch sub /ccTint exch def			ccAry1 4 /Black put			} if		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/bwImage{	setImgSpace cData /_image_ load	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		expandCMYK		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd} if/expandOne{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if} bd/expandSpot{	spotColor?	{		spotDict begin			spot1 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end			spot2 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end	 end	} if} bd/expandCMYK{	4	{		expandOne 4 1 roll	} repeat} bd/colorimage where dup{	exch pop		/ncolorimage where	{		pop	}	{		/ncolorimage {pop colorimage} bd	} ifelse} ifnot{	/ncolorimage where 	{		pop	}	{		/colorimage? false store		/ncolorimage		{			pop pop pop			setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind			_image_ 		sSave restore	} bd	} ifelse} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		colorimage? 		{			expandCMYK		} if		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		bwImage		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		spotColor?		{			spotDict begin				spot1 begin					currentCustomColor makeByte /tintImage exch def					/name exch def					/spot_K exch def					/spot_Y exch def					/spot_M exch def					/spot_C exch def			 end				spot2 initSpotData		 end		} if		currentcmykcolor		4		{			makeByte 4 1 roll		} repeat		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			spotColor?			{				spotDict begin					/spotDict cvx /begin cvx					spot1 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx					spot2 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/spotDict cvx				/nsetcustomcolor cvx			}			{				/setcmykcolor cvx			} ifelse		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg		{			{				_fill			}		}		{			{				_of true eq				{					currentgray 1 ne					{						bwFill					} if				}				{					bwFill				} ifelse			}		} ifelse		def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq				{					setSSave					/cData whiteByte store					/cDataLen 8 store					bwImage					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		/_setgray_ cvx	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if	} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse	} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					_setgray_ 					_fill_ 				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse							nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq			{				/blend? false store			} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt		{			/blend? false def		} if		blend?		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/initSpotData{ begin		/name null def		/tintImage null def		/tintValue null def		/spot_C  null def		/spot_M  null def		/spot_Y  null def		/spot_K  null def end} bd/getRData{	/colorType gMark store	_compositeSpotDevice 0 ne	{		spotDict begin			spot1 initSpotData			spot2 initSpotData	 end		/spotColor? colorType 2 eq colorType 3 eq or def	} 	{		/spotColor? false store	} ifelse	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			_compositeSpotDevice 0 ne			{				spotDict begin					spot1 begin						/name 3 index def						/spot_K 4 index def						/spot_Y 5 index def						/spot_M 6 index def						/spot_C 7 index def				 end			 end			} if			7		} ifelse	} ifelse	/tmp exch def	tmp index 100 div /endPoint xs	_compositeSpotDevice 0 ne	{		tmp 2 add index 3 eq		{			/tmp tmp 4 add def			tmp index dup 			spotDict begin				spot1/name get ne				{					spot2 begin						/name exch def						/spot_K tmp 2 add index def						/spot_Y tmp 3 add index def						/spot_M tmp 4 add index def						/spot_C tmp 5 add index def				 end				}				{					pop				} ifelse		 end		} if	} if	/color? colorType 0 gt store		colorType 3 eq	{		/tint2Data gMark store	} if		colorType 2 ge	{		/tint1Data gMark store	} if	_compositeSpotDevice 0 ne	{		spotDict begin					colorType 2 ge			{				colorType 3 eq				{					spot2 begin						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def						name null eq {/name /Black def} if				 end				} if				spot1 begin					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def					colorType 2 eq 					{						name null eq 						{							/name spot2/name get def							spot2/name null put						} if					}					{						name null eq {/name /Black def} if					} ifelse			 end			} if	 end	} if		/cData gMark store	setCDataLen	colorType 0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		_eo {eoclip} {clip} ifelse		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/bwImage		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq	{		0	}	{		bDataLen ubAxis div	} ifelse	store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where dup	{		exch pop _compositeSpotDevice 1 ne and	} if	{		0 0 bInc 1 /rectfill cvx		}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		/_fill_ cvx	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	spotColor? {nsetcustomcolorend} if		grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt		{			exch		} if		pop store		/pChange ubAxis 0 eq		{			0		}		{			bDataLen ubAxis div		} ifelse		store		pChange .5 gt noImg not and dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	spotColor? {nsetcustomcolorend} if	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put end} if} bd/Bn{1 add dictdup nullString null put/_bn xs} bd/Bd{Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store			/_fill			{				_of true eq				{					currentgray 1 ne					{						__fill					} if				}				{					__fill				} ifelse			} def	} ifelse	/fill	{	} def	} bd	/BB	{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 kPc1 1 1 1 kPcPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(\203\214\203C\203\204\201[ 1) Ln0 A0 O0 g2 J 0 j 1 w 2 M []0 d306.1001 385.2998 m306.6001 384.2998 307.2998 383.2002 308.2002 382.2002 C307.7002 381.8999 308.3999 381.7002 308.6001 381.3999 C307.8999 375.5 306 370.2002 303.7998 364.8999 C303.6001 363.7002 302.8999 362.6001 302.3999 361.3999 c300.2998 354.6001 298.3999 346.7998 298.8999 339.6001 C300.2002 338.6001 301.8999 339.8999 303.3999 340 C310.1001 343.6001 316.2998 348.3999 322.6001 353 c331.5 359.6001 341.2002 366 350.2998 371.7002 C351.7002 372.1001 353.2998 371.2998 354.2002 370.2998 c356.1001 368.1001 356.8999 365 358.3999 362.7002 C359 362.3999 359 361.6001 359.6001 361 C360.1001 359.7998 358.7002 359.2998 358.6001 358.3999 C358.1001 357 357.1001 355.3999 356.1001 354.6001 C356.2002 354.3999 356.5 354.3999 356.7002 354.3999 C356.2002 354.2998 355.7002 354.2998 355.5 353.6001 C355.2002 353.5 355.2998 353.2002 355.2998 353 C355.7998 352.5 355.7002 353.7002 356.2998 353.6001 C355.7002 352.2998 355.1001 350.3999 353.7998 349.8999 C352.6001 348.7002 353 346.7998 351.6001 345.6001 C349.7002 341 346.8999 337.3999 346 332.3999 C345.8999 332.2998 345.7002 332.1001 345.6001 332 C344.3999 327.5 343.8999 322.3999 342.2998 318.2002 C343.1001 316.2002 340.7002 314 342.8999 312.8999 C355.5 315.1001 366.1001 322.5 376.7002 328.8999 c382.7998 332.6001 388.1001 336.7998 395.2002 338 C395.7002 337.7998 396.3999 337.3999 397 337 C398.2002 334.5 399.2002 332.6001 399.8999 330 c400.1001 328.8999 400.2998 327.8999 400.5 326.8999 C399.6001 325.6001 397.3999 324.7998 397.3999 323.2002 C397.2002 323.8999 396.3999 323.3999 396.3999 322.7998 C393.1001 319.5 389.5 315.7002 385.5 312.8999 c384.1001 311.6001 382.5 309.6001 380.7998 308.6001 C380.7002 310.2002 379.7002 308.7002 378.8999 308.6001 C377.2998 307.2002 375.7998 305.6001 374 304.2002 C374.2002 305.2998 376.6001 306 376.5 307.2998 C375 305.7002 372.7002 304.6001 371.2998 302.7998 C372.1001 302.2998 372.6001 303.6001 373.3999 303.7998 C372.1001 302.7002 370.7002 301.2002 369 300.1001 C369.7002 301 370.7998 301.3999 370.7002 302.3999 C368 300.1001 365.1001 297.6001 362.2998 295.2002 C363.2002 295.5 362.1001 296.1001 361.7998 295.6001 c360.7998 294 358.8999 292 357.1001 290.8999 C357.5 291 356.5 291.6001 356.2998 290.8999 C356.2002 290.7002 356.3999 290.6001 356.5 290.5 C355.7998 289.2002 353.8999 288.8999 353.7998 288.3999 C353 288.6001 353.7002 287.8999 353.2002 287.7998 C351 286.3999 348.7002 282.6001 346 282.2002 C346 280.7002 343.2998 278.8999 342.1001 278.2998 C341.7002 278.3999 341.1001 277.8999 340.8999 277.5 C342 277.3999 339.7002 275.7998 340.5 277.2998 C339.6001 276.2002 339.7002 275.5 338.2002 274.6001 C338 275.8999 337.2002 274.1001 336.7998 273.7998 C337.1001 272.8999 335 273.2002 335.2998 272.3999 C334.6001 271.3999 333.2002 269.7002 331.7998 269.8999 C331.7998 269.3999 330.7998 269.1001 331.2002 268.7002 C332.7998 270.6001 331.7998 268.2998 330.7998 268 C330.7998 268.6001 330.5 268.2998 330.2002 268.2002 C328 267 331.7998 268.2002 329.7998 267.2002 C329.2998 267.1001 328.5 267.2002 328.2998 266.3999 C328.5 265.8999 328.7002 266.5 328.8999 266.6001 C328.6001 265.7998 325.7002 265 326.2998 263.8999 C326 263.6001 325.7002 263.3999 325.3999 263.1001 c325.1001 262.7998 326.1001 263.5 325.3999 263.7002 C323.8999 263 323.5 261.2002 322.6001 260.3999 c322.3999 260.3999 322.1001 259.7998 322.1001 260.2002 C322.2002 260.3999 322.8999 260.6001 322.3999 260.7998 C321.7998 260.7002 321.5 260.1001 321.1001 259.7998 C321.7998 259.6001 321.2002 259.3999 321.1001 259 C320.7002 258.8999 320.3999 258.5 320.1001 258.2002 C320.1001 258.3999 320.1001 258.7002 319.8999 258.7998 C319.6001 258.5 319.1001 258.2002 319.1001 257.7998 C319.5 257.3999 318.6001 257.1001 318.3999 256.7002 C318.2998 256.7002 318.2002 256.7998 318 256.8999 C317.2998 255.7998 316.2998 256 316.2002 254.8999 C316.5 254.7998 316.6001 255.2002 316.7998 255.2998 C316.2998 254.3999 314.7002 254.6001 314.7002 253.6001 C315.6001 253 313.2998 254.2002 314.1001 252.6001 C312.3999 253.1001 313.2002 250.7998 312.1001 251.6001 C311.8999 251.2998 311 250.8999 311.3999 250.6001 C312.5 250.6001 311.1001 250.3999 311 249.8999 C310.7002 249.6001 310.2002 249 309.7998 249.5 C309.2002 248.7998 308.3999 248.2002 308 247.5 C308.6001 247.6001 308.2002 247 307.7002 247.5 C307 246.3999 304.2998 244.7002 305.1001 244 C304.7998 243.7998 304.7998 244.2998 304.5 244.2002 C302.1001 241.7002 299.3999 239.5 297.7002 237 C297.8999 237.2002 297.2998 235.7002 297.5 236.7998 C297.3999 236.8999 297.2998 236.8999 297.2998 237 C295.7998 235.7002 293.7002 233.7998 292.7002 232.2002 C290.3999 231.6001 289.8999 228.6001 287.7998 227.8999 C287.3999 227.1001 286.8999 226.1001 285.8999 225.7002 C285.2998 225.7998 284.8999 225.5 284.5 225.2998 C284.6001 225 284.8999 225 285.1001 225 C284.5 224.2998 284.1001 223.5 283.8999 222.7998 C284 223 284.5 223.3999 284.1001 223.6001 C281.5 221.2998 279.7002 219.6001 277.7002 217.2002 C277.2002 216.8999 276.3999 217.2002 276.1001 216.3999 C276.8999 216.5 277.1001 216.2998 276.2998 215.7998 C275.7998 215.6001 275.6001 216.2002 275.2002 215.6001 c275.2002 215.3999 275.2998 215.2998 275.3999 215.2002 C277 214.7002 273.8999 215.8999 275 214.3999 C271.1001 210.7998 268 205.7998 264.1001 202.6001 C263.7998 203.1001 263.3999 202.2998 263.2998 202 C263.3999 201.8999 263.6001 201.7998 263.5 201.6001 C261.2998 201.7998 262.6001 199.6001 261 199.5 C261 198.7998 260.3999 197.6001 259.6001 197.1001 C257.1001 197 260.2002 196.6001 258.2002 195.3999 C257.8999 194.7002 256.3999 195.7002 257.2998 194.6001 C257.1001 194.3999 256.8999 194.2002 256.7002 194 C256.8999 193.2998 256.5 195.2998 255.8999 194 C256.2998 192.7002 255 192 254.2998 191.1001 C254 191.2002 253.2998 191 253 190.5 C253.2002 190.2002 253.3999 190.2998 253.6001 190.2998 C252.7002 189.8999 251.7002 187.2998 251.6001 188.7998 C251.2002 188.3999 250.7998 186.5 250.3999 186.6001 C250.3999 186.7998 250.2002 186.8999 250.1001 187 C248.8999 186.1001 247.6001 184.7002 247.2998 183.5 C246.2998 183.2998 246.5 180.7002 245 181.3999 C244.3999 180.8999 243.8999 180.1001 243.3999 179.3999 C244.5 179.7002 243.7998 178.7998 243.2002 178.6001 C243.2002 178.5 243.2002 177.7998 243.2002 178.3999 C242.7998 178.7998 242.5 177.8999 242.1001 177.8999 C242.1001 177.7002 242.1001 177.5 242.2998 177.2998 C240.7998 175.7002 239.6001 173.2998 237.7998 173 C237.3999 172.1001 236.2998 171.6001 236.7998 170.8999 C237.7002 170.5 235.3999 171.3999 236.3999 170.1001 C235.6001 169.5 235.2998 167.7998 234.1001 168.2998 C233.8999 168 233.6001 167.7998 233.7002 167.5 C234.5 167.2002 233.1001 166.2998 232.7002 166 C232.3999 166 232.2002 166.1001 232 165.7998 C232.2002 165.5 232.3999 165.6001 232.7002 165.6001 C232.7998 164 230.2998 164.7998 230.7998 163.2998 C229.2998 161.2998 227.8999 158.8999 225.8999 157 C225.2002 157.1001 224.3999 156.8999 224.2002 156.1001 C224.2998 155.2998 224.6001 156.2002 225 155.8999 C224.2002 154.6001 222.7998 153.7998 222.7998 152.3999 C223.3999 152.7998 221.6001 149.7998 222.2002 152 C220.2002 149.7002 218.3999 147.2998 216.7998 144.7998 C215.2998 143.3999 214.7002 142.7002 213.8999 141.1001 C212.1001 140.2998 211.8999 138 210.3999 137.7998 C210.3999 137.6001 210.5 137.5 210.7002 137.3999 C211.2002 137.2998 209.2002 135.3999 210.3999 137 C209.5 137.1001 209 135.5 208.2002 134.7002 C207.6001 133.8999 206.7998 132.7998 206.8999 131.8999 C205.8999 130.1001 204.3999 128.2998 203.2002 126.7002 C203.6001 126.7998 202.6001 127.5 202.3999 126.7002 C202.2998 126.5 202.5 126.3999 202.6001 126.2998 C203.2998 126.3999 202.7998 126.1001 202.6001 125.8999 C201.3999 126.1001 202 123.5 201.3999 124.2998 C201.5 124.3999 201.2998 124.5 201.2002 124.7002 C200.7998 124 200.2002 123.2002 200 122.7998 C201.2998 122.6001 199 122.3999 200 121.7998 C199.3999 121.3999 199.1001 121.8999 198.7002 121.2002 C199 121 198.8999 120.7998 198.8999 120.5 C198.2002 120.5 197.8999 120.1001 197.5 119.5 C198.2002 119.6001 198.1001 118.8999 198.7002 119.1001 C197.3999 120 196.8999 117.2998 196.5 118.1001 C196.5 117.7998 196.3999 117.6001 196.7002 117.5 C194.7998 117.2998 196.6001 115.8999 194.7998 115 C195.2998 115 195.2998 114.7998 194.7998 114.3999 C194.8999 114.6001 194.7002 114.7002 194.6001 114.7998 C194.2002 114.1001 194.2002 114.2002 193.3999 113.2998 C194.8999 114 193 111.2998 192.1001 111.1001 C192.2998 111 192.3999 110.7998 192.5 110.8999 C192.7998 109.5 190.2998 111 191.7002 109.6001 C191.2002 108.6001 188.7002 107.7002 189.7002 106.3999 C189.1001 105.3999 188.6001 104.2002 187.3999 103.8999 C188.2002 103 186.8999 103 186.7998 102.2002 c186.6001 100.5 184.7998 98.7998 184.1001 97.8999 C184.2998 97.7998 184.3999 98 184.5 98.1001 C184.2002 97.2002 183.2998 96.3999 182.8999 95.7002 C182.6001 96.1001 182.2002 95.2998 182.1001 95 C182.3999 94.3999 182.3999 94.7002 182.1001 94 C181.7998 93.8999 181.3999 94.2002 181.2002 93.7998 C181.3999 93.3999 181.7998 93.7002 181.2002 93.6001 C181.1001 93.5 181 93.3999 181 93.2002 C181.7998 93.6001 180.6001 90.3999 180.3999 92.2002 C179.6001 91.8999 180.2998 91.2998 180.3999 90.8999 C177.8999 89.8999 179.3999 88.2002 177.5 86.3999 C175.7998 86.3999 177.8999 85.2998 176.7002 85.2002 C176.2998 85.7002 176.3999 84.8999 176.1001 84.7998 C175.7998 84 175.7998 82.7002 174.7002 82.2998 C174.1001 81.2002 174.3999 78.7998 172.6001 78.6001 C173 77.6001 172.2002 76.5 171.6001 75.8999 C169.5 74.5 168.3999 71 166.7998 68.5 c163.8999 63.3999 162 58.7998 158.7998 54.1001 C159 54 159.2002 53.3999 159.3999 53.8999 C159.7998 54 159.6001 53.5 159.6001 53.2998 C158.2002 54.2998 158.2002 51.6001 157.2002 50.7998 C157.2002 50.6001 157.1001 50.2998 157.3999 50.2002 C157.6001 50.2998 157.7002 50.7002 158 50.6001 C157.8999 48.7002 155.3999 49.3999 155.5 47.2998 C154.5 46.7998 155 45.7002 154.2998 45.1001 C149.3999 36.2002 145.2002 27.6001 140.2998 18.7002 C139.2998 18 139.5 17.3999 139.1001 16.7002 C140.7002 16.2998 138.7002 15.1001 138.3999 14.3999 C136.7998 13.2998 134.5 13.7998 132.2998 14 c127.8999 14.2998 126.1001 18.7998 124.7002 22.2002 C123.5 29 123.2998 36.5 124 43.7998 c125.3999 51.8999 126.2002 59 128.2002 66.7002 c129.5 70.5 131.2002 75.2998 131.7002 79.6001 C124 74 116.7998 66.2002 110.5 58.7998 c101.8999 48.2002 95.5 35.7998 86.2002 25.8999 c83 22.8999 78.7002 24.7998 74.8999 24.8999 C72.3999 25.7002 69.2002 26.7002 68.2998 29.3999 c66.6001 34.3999 67.6001 40.2998 67.8999 45.7002 C68.6001 48 69 51.2998 69.1001 53.8999 C64.2002 50.1001 59.2998 47.2998 56.3999 41.7998 C57.2002 40.1001 54.8999 40.7002 54.8999 39.5 C54.5 39.1001 53.8999 39 53.2998 39.1001 C52 40.7002 50 39.5 48.5 40.1001 C47 39.5 45 40.2998 43.3999 40.7002 C42.5 41.7002 41.3999 43.1001 42.2002 44.6001 c43.2998 47.5 44.1001 50.6001 44.6001 53.7002 c51 75.5 59.3999 96.2998 68.1001 117.5 C69.5 118.7998 69.5 121.1001 70.6001 122.7998 c74.8999 131.1001 77.8999 138.7002 82.1001 147.1001 C83.8999 149.3999 85.1001 152.7002 86.6001 155.5 c90.3999 161.8999 93.7998 168.8999 97.2998 175.1001 c112.6001 200.8999 130.7002 226.1001 148.8999 250.1001 c150.7002 252 152.3999 254.2998 154.1001 256.2998 c190.7998 301.2998 226.7998 343.6001 274 379.5 c281.8999 385.2998 290 390.5 299.2998 392.7002 C303.5 392.2998 303.6001 387.3999 306.1001 385.2998 Cf1 g288.2002 355.5 m287 349.5 287.3999 342.7002 291.1001 338 C297.3999 333.3999 304.2998 326.3999 313.1001 330.3999 c321.6001 335.2998 329.5 341.7002 337.7998 347.2002 C334.2998 337.1001 331 327.1001 331.7998 316.3999 C333.8999 312.8999 336.3999 308.2998 340.7002 306.8999 C342.2002 305.7998 344 304.2998 345.7998 303.3999 C347.3999 303.2998 349.2998 301.7998 350.5 303.2002 C348.2002 303.8999 351.6001 302.7002 352.2002 303.3999 C355 303.7002 357.2998 305.2002 359.7998 306.1001 C310.3999 265.2002 262.7002 218 223.6001 168.7002 c195.2998 134 171.6001 96.8999 151.6001 58.2002 c145.2002 46.8999 139.7002 35.2998 133.5 24.2998 C133.2002 25.7998 133.2002 27.8999 133.5 29.2002 C132.5 30.3999 132.8999 32.8999 133.1001 34.3999 C133.6001 34.7002 133.7998 35.6001 133.7002 36.3999 C134.7002 41.8999 135.1001 46.7002 135.7998 51.7998 C135.8999 51.6001 135.7998 51.1001 136.3999 51 C138.1001 60.2002 140.7002 68.2998 143.2002 77.1001 C143.7002 76.2002 142.3999 75.2998 143.2002 74.2998 C144.7002 75.8999 144.2998 78 145.8999 79.7998 C147.2002 84 149.1001 87.8999 149.7998 92.3999 C150.1001 92.7002 150.6001 93 150.3999 93.6001 C147.7998 94.6001 148.8999 97.1001 146.7002 98.1001 C145.2002 99.7998 144.3999 102.6001 141.8999 103.5 C137.5 104.1001 135.7998 99.3999 132.5 97.5 C116.1001 83.1001 97.7002 66.8999 86.7998 47.5 C84.1001 44.3999 82.3999 40.6001 79.3999 37.2002 C79.5 43.6001 80.7998 50.7002 82.1001 57.2002 C80.2998 61.2998 77.2998 64.2998 74.1001 67.7002 c70.6001 70.2998 66.2998 67.3999 63.2002 65.3999 C63 65.2998 62.8999 65.1001 62.7002 65 C69.6001 86.2002 78.2002 106.7002 87.2002 126.8999 c88.5 129.1001 89.2002 131.2998 90.5 133.7002 c94.6001 141.8999 98.6001 150.1001 103.2998 158 c104.2998 160.2002 105.2002 161.8999 106.3999 164.2002 c108.5 168.2998 111.7998 173.7998 114.3999 177.5 C114.6001 178.3999 116.3999 178.3999 115.6001 179.3999 C115.6001 180.2002 116.3999 181.2998 116.6001 181.3999 C117.7998 180.7998 116.2998 182.7998 117.7002 182.7002 C118.2002 183.8999 118.3999 184.5 119.5 185.1001 C120 186.7998 120.2998 187.5 121.6001 188.7998 C121.7002 189.1001 122.2998 189.2998 121.7998 189.5 C122.1001 190.2998 123.5 190.2002 123 191.2998 C123.7002 192.2998 124.2998 193.7998 125.7002 194 C125.7002 194.2998 125.2998 194.5 125.1001 194.7998 C126.8999 195.5 126.5 198.3999 128.7998 198.2998 C128.8999 199.2002 127.5 199.1001 129 199.7002 C128.8999 199.5 128.5 199.3999 128.6001 199.1001 C129 198.7002 129.7002 199.2002 129.7998 199.7002 C130 199.8999 130 200 129.7998 200.2002 C128.3999 199.6001 130.2998 201.6001 130.2002 200.6001 C130 200.7002 131.6001 202.1001 130.2002 201.7998 C130.7002 202.2002 131 201.2998 131.5 202.2002 C131.3999 202.7002 130.7002 202.2002 130.7998 202.6001 C132.8999 201.8999 130.7002 204.3999 132.2998 203.2002 C132.3999 204.7998 132.8999 203.8999 133.1001 205.2998 C134.2002 205.2998 134.2998 206.2002 134.7002 206.8999 C134.2998 207.7002 136.2002 207.8999 136.3999 209.2002 C136.2998 209.5 136 209.3999 135.7998 209.3999 C136.8999 209.1001 137.1001 210.8999 137.7998 211.2998 C137.1001 211.6001 139.1001 212.1001 138.7002 212.8999 c138.2998 213.5 139 213.3999 139.5 213.5 C140.1001 214.3999 141 215.5 141.2998 216 C140.6001 218 141.6001 214.7002 142.3999 217.3999 C142.3999 218.2998 143 218.2002 142.7998 219.1001 C142.7002 218.8999 142.8999 218.7998 143 218.7002 C143.5 218.7002 143.6001 219.2998 143.6001 219.7002 C142 220 144.7002 220.7998 144.7998 221.7998 C145.7998 221.3999 146.1001 223.1001 146.8999 223.3999 C146.8999 223.7002 146.7998 224.2002 147.2998 224 C147.8999 224.5 147.8999 225.7002 148.7002 226.1001 C148.2002 226.2002 148.7002 227 148.2998 226.5 C149 225.7002 148.7002 227.1001 149.2998 226.8999 C149.1001 227.7002 150.8999 227.5 150 228.7998 C150.7998 228.5 150.8999 229.2002 151.3999 229.6001 C151.2998 229.8999 151.8999 230 151.3999 230.2002 C150 229.7998 151.5 230.2998 151.7998 230.3999 C152.6001 231.6001 154 233.6001 154.2998 233.8999 C155.1001 233.8999 155.3999 235.5 155.8999 236.3999 C155.6001 237.1001 157.3999 237.5 157.2002 238 C156.8999 238.2998 157.6001 240.1001 158.2002 238.7998 C159.6001 241 162.1001 243 162.7002 245.2002 C162.3999 245.2002 162.2002 244.7998 161.8999 244.6001 C162.1001 246.2002 163.6001 244.2998 163.5 246 C164.7002 246.7002 165.1001 247.8999 166 249.1001 c168.3999 252.2998 171.2002 255.1001 173.7998 258.6001 C176.6001 260.7998 178.6001 265.1001 181.2002 267.2002 C184.1001 271.2002 186.8999 274 190.1001 277.7002 c195.1001 283.8999 201.2998 290.7002 206.1001 296.3999 C207.8999 297.2998 208.3999 300 210.3999 300.5 C210.3999 300.7998 210.3999 301 210.3999 301.2002 C212.7998 303.6001 215.3999 306.1001 217.3999 308.7998 C217.7002 308.8999 218 308.8999 218.2998 309.2002 c221.1001 312.2998 224 315.3999 226.8999 318.3999 c247.2998 337.7998 268.1001 359.7002 293.1001 375 C291.1001 368.6001 288.6001 362.2002 288.2002 355.5 cf243.3999 336.1001 m243.5 336.1001 243.6001 336.1001 243.7998 336.1001 C243.6001 336 243.3999 335.8999 243.3999 336.1001 Cf227.2998 320.1001 m227.2998 320 227.2998 320 227.2998 319.8999 C227.2002 319.7998 227 319.6001 227.2998 320.1001 Cf220.1001 312.7002 m220.2002 312.6001 220.2002 312.6001 220.2998 312.5 C220.2002 312.5 220 312.5 220.1001 312.7002 Cf381.3999 309.6001 m380.7002 309.3999 381.2002 310 381.2002 310.2002 C382.2002 311.5 382.3999 310.2002 381.3999 309.6001 Cf218.1001 310.3999 m217.7998 310.1001 217.6001 309.8999 217.3999 309.6001 C217.6001 309.8999 217.7998 310.1001 218.1001 310.3999 Cf378.5 309 m378 308.5 377.6001 308 377.1001 307.5 C377.6001 308 378 308.5 378.5 309 Cf0 g373 302.3999 m373.2998 303.2002 377.7002 306.3999 374.6001 303.3999 C373.7002 303.6001 373.8999 302.2002 373 302.3999 Cf1 g206.8999 298.5 m206.7002 298.2002 206.5 297.8999 206.2998 297.7002 C206.5 297.8999 206.7002 298.2002 206.8999 298.5 Cf363.2998 296.3999 m363.2002 296.2998 363 296.1001 362.8999 296 C363 296.1001 363.2002 296.2998 363.2998 296.3999 Cf203.8999 295.2002 m204 295.2002 204.1001 295.2002 204.2998 295.2002 C204.1001 295.2002 204 295.2002 203.8999 295.2002 Cf0 g358.7998 289.6001 m358.8999 289.7998 359.7998 291 360.6001 291.1001 C360 290.2002 359.3999 290.2998 358.7998 289.6001 Cf1 g199.5 290.2998 m199.7002 290.2998 199.7998 290.2998 200 290.2998 C199.7998 290.2998 199.7002 290.2998 199.5 290.2998 Cf198.2998 288.6001 m198.2998 288.5 198.2998 288.5 198.2998 288.3999 C198.1001 288.2002 197.8999 288 198.2998 288.6001 Cf0 g354.8999 287 m354.7002 286.7998 354.6001 286.7002 354.3999 286.6001 C354.6001 286.7002 354.7002 286.7998 354.8999 287 Cf351.6001 285.1001 m351.3999 285 351.2998 284.7998 351.2002 284.7002 C351.2998 284.7998 351.3999 285 351.6001 285.1001 Cf1 g347.8999 283.5 m347.7002 283.2998 347.6001 283.2002 347.3999 283.1001 C347.6001 283.2002 347.7002 283.2998 347.8999 283.5 Cf0 g349.5 283.5 m349 283 348.6001 282.5 348.1001 282 C348.6001 282.5 349 283 349.5 283.5 Cf1 g191.8999 281 m192 281.1001 192.1001 281.1001 192.1001 281.2002 C192.1001 281.1001 192 281.1001 191.8999 281 Cf0 g346.6001 281 m346.6001 280.8999 346.6001 280.8999 346.6001 280.7998 C346.5 280.7002 346.2998 280.5 346.6001 281 Cf1 g187.3999 276.1001 m187.2002 275.7998 187 275.5 186.7998 275.2002 C187 275.5 187.2002 275.7998 187.3999 276.1001 Cf333.7002 271.2998 m333.7998 271.2998 333.8999 271.2998 V333.6001 271.1001 333.2998 270.7998 333.7002 271.2998 Cf0 g330.6001 265.2002 m330.7002 265.2002 330.7002 265.2002 330.7998 265.2002 C330.7002 265 330.5 264.8999 330.6001 265.2002 Cf1 g323 261.5 m323.1001 261.5 323.2002 261.5 V323 261.2998 322.7998 261 323 261.5 Cf0 g320.5 256.7002 m320.6001 256.7002 320.7998 256.7002 320.8999 256.7002 C320.7998 256.7002 320.6001 256.7002 320.5 256.7002 Cf321.1001 256.2998 m320.7998 256.1001 320.6001 255.8999 320.2998 255.7002 C320.6001 255.8999 320.7998 256.1001 321.1001 256.2998 Cf315.2002 251 m315 250.7998 314.8999 250.7002 314.7002 250.6001 C314.8999 250.7002 315 250.7998 315.2002 251 Cf1 g311 250.3999 m311 250.2998 311 250.2002 311 250.1001 C310.8999 250 311 250.3999 Vf0 g306.7002 242.8999 m306.5 242.7002 306.2998 242.5 306.1001 242.2998 C306.2998 242.5 306.5 242.7002 306.7002 242.8999 Cf301.6001 240.7002 m301.6001 240.6001 301.6001 240.6001 301.6001 240.5 C301.5 240.3999 301.3999 240.2998 301.6001 240.7002 Cf302.3999 240.2998 m302.2998 240.1001 302.1001 239.8999 302 239.7002 C302.1001 239.8999 302.2998 240.1001 302.3999 240.2998 Cf157.7998 238.7998 m157.7002 238.7998 157.7002 238.7002 157.6001 238.6001 C157.6001 238.5 157.6001 238.2998 157.7998 238.7998 Cf294.2002 233.2998 m294 233.1001 293.8999 233 293.7998 232.8999 C293.8999 233 294 233.1001 294.2002 233.2998 Cf1 g292.1001 232.5 m291.7998 232.2002 291.6001 231.6001 291.1001 231.7998 C291.3999 231.7002 292.1001 232.8999 292.1001 232.5 Cf0 g288.7998 227.7002 m288.7002 227.6001 288.5 227.3999 288.3999 227.2998 C288.5 227.3999 288.7002 227.6001 288.7998 227.7002 Cf282.3999 221.1001 m282.2998 221.7002 283 221.7002 283.2998 222.2002 C283.2002 221.7002 282.7002 221.5 282.3999 221.1001 Cf143.7998 219.8999 m144.1001 220 144.7998 222.1001 144.7998 220.8999 C144.5 220.6001 144.1001 220.2002 143.7998 219.8999 Cf279.3999 218.2998 m279.5 218.2998 279.6001 218.2998 279.7998 218.2998 C279.6001 218.2998 279.5 218.2998 279.3999 218.2998 Cf277.7002 216.3999 m277.7998 216.3999 279.6001 218.3999 278.2998 216.7998 C278.1001 216.7002 278 216.2998 277.7002 216.3999 Cf1 g271.1001 210.7002 m270.5 209.8999 270.5 210.2998 270.8999 210.8999 C271.1001 210.8999 271.2002 210.7998 271.1001 210.7002 Cf134.1001 207.6001 m134.2002 207.5 134.2998 207.3999 Y134.2002 207.3999 134 207.3999 134.1001 207.6001 Cf266 204.7002 m265.7998 204.7002 265.3999 204.6001 265.7998 204.8999 C266 204.8999 266.3999 204.8999 266 204.7002 Cf255.5 193.2002 m255.3999 192.8999 255.2002 192.6001 255.1001 192.2998 C254.8999 192.2002 254.7002 192.1001 255.5 193.2002 Cf254.2998 192.7998 m254.2002 192.7002 254.1001 192.6001 254.1001 192.5 C254.1001 192.6001 254.2002 192.7002 254.2998 192.7998 Cf0 g119.5 184.8999 m119.3999 184.7998 119.3999 184.7002 119.2998 184.5 C119.3999 184.7002 119.3999 184.7998 119.5 184.8999 Cf248.2998 183.8999 m248.1001 183.5 247.7002 183.7998 247.8999 184.1001 C248 184 248.5 184.2998 248.2998 183.8999 cf1 g246 182.1001 m245.7998 182.1001 245.3999 182 245.7998 182.2998 C246 182.2998 246.1001 182.2002 246 182.1001 Cf0 g117.2998 181 m117.1001 180.8999 117 180.7002 116.7998 180.6001 C117 180.7002 117.1001 180.8999 117.2998 181 Cf1 g241.7002 177.1001 m241.5 176.8999 241.2998 176.7002 241.1001 176.5 C241.2998 176.7002 241.5 176.8999 241.7002 177.1001 Cf0 g113.7998 175.7002 m113.6001 175.6001 113.5 175.3999 113.2998 175.2998 C113.5 175.3999 113.6001 175.6001 113.7998 175.7002 Cf1 g235.2998 169.2998 m234.2998 168.1001 235.2002 169.2998 235.2998 169.8999 C236.2998 170 235.2002 169.7002 235.2998 169.2998 Cf0 g108.6001 167.2002 m108.7002 167.2002 108.7002 167.2002 108.7998 167.2002 C108.7998 167.1001 108.7998 167 108.6001 167.2002 Cf1 g233.2998 167.2002 m233.3999 167.2002 233.6001 167.2002 233.7002 167.2002 C233.6001 167.2002 233.3999 167.2002 233.2998 167.2002 Cf232.8999 166.6001 m233 166.6001 233.1001 166.6001 233.2998 166.6001 C233.1001 166.6001 233 166.6001 232.8999 166.6001 Cf0 g108.3999 166 m108.1001 165.5 108 166.2002 108.2002 166.3999 C108.6001 166.6001 108.2998 166.1001 108.3999 166 Cf1 g231.7998 165.2002 m231.7998 165 231.7002 164.7998 231.6001 164.6001 C231.5 164.6001 231.7998 165.2002 Vf0 g107.6001 165 m107.6001 164.8999 107.6001 164.7002 107.6001 164.6001 C107.6001 164.7002 107.6001 164.8999 107.6001 165 Cf1 g229.7998 162.7002 m229.3999 162.2002 229.1001 161.6001 228.7998 161.1001 C229.1001 161.6001 229.3999 162.2002 229.7998 162.7002 Cf0 g229.7998 161.2998 m229.7002 161.2002 229.7002 161 229.6001 160.8999 C229.7002 161 229.7002 161.2002 229.7998 161.2998 Cf1 g223.3999 155.7002 m223.7002 155.6001 223.8999 155.6001 224.2002 155.5 C224.1001 155.2998 223.8999 155.1001 223.3999 155.7002 Cf221.7998 152.3999 m221.7002 153.3999 222.8999 153.2002 223 154.1001 C222.6001 153.5 222.3999 152.8999 221.7998 152.3999 Cf0 g224.2002 154.1001 m224.1001 154 224.1001 153.7998 224 153.7002 C224.1001 153.7998 224.1001 154 224.2002 154.1001 Cf1 g218.2998 148.1001 m218.1001 147.7998 218 147.3999 217.7998 147.1001 C217.7998 147 217.7002 147 218.2998 148.1001 Cf212.2998 140.1001 m212.1001 139.8999 211.8999 139.7002 211.7002 139.5 C211.8999 139.7002 212.1001 139.8999 212.2998 140.1001 Cf211.5 139.1001 mF0 g211.7002 137.3999 m211.7002 137.2998 211.7002 137.2998 211.7002 137.2002 C211.5 137.1001 211.3999 136.8999 211.7002 137.3999 Cf1 g206.5 132.1001 m206.5 131.8999 206.3999 131.7002 206.2998 131.5 C206.3999 131.7002 206.5 131.8999 206.5 132.1001 Cf205.5 130.6001 m205.3999 130.3999 205.2002 130.2002 205.1001 130 C205.2002 130.2002 205.3999 130.3999 205.5 130.6001 Cf202 126.1001 m202.1001 126.1001 202.2998 126.1001 202.3999 126.1001 C202.2998 126.1001 202.1001 126.1001 202 126.1001 Cf0 g202.7998 122.2002 m202.7998 122.1001 202.7998 121.8999 202.7998 121.7998 C202.7998 121.8999 202.7998 122.1001 202.7998 122.2002 Cf196.2998 115.3999 m196.5 115.7998 196.6001 116.2998 197.1001 116.6001 C196.8999 116.2002 196.5 115.6001 196.2998 115.3999 Cf1 g191.2998 109.6001 m191.2998 109.5 191.2998 109.3999 V191.2002 109.2998 191 109.2002 191.2998 109.6001 Cf0 g190.1001 105.8999 m189.8999 105.5 189.7002 105 189.5 104.5 C189.7002 105 189.8999 105.5 190.1001 105.8999 Cf189.8999 102.3999 m189.3999 102.5 191.7002 104.1001 190.2998 102.7002 c190.2002 102.5 190.1001 102.3999 189.8999 102.3999 Cf187.6001 101.7998 m187.6001 101.7002 187.6001 101.5 187.6001 101.3999 C187.6001 101.5 187.6001 101.7002 187.6001 101.7998 Cf187.7998 98.8999 m187.7002 98.7998 187.7002 98.7002 187.6001 98.5 C187.7002 98.7002 187.7002 98.7998 187.7998 98.8999 Cf1 g117.8999 68.1001 m118 68.1001 118 68.1001 118.1001 68.1001 C118 68 117.7998 67.7998 117.8999 68.1001 Cf0 g165.2002 64.3999 m165.2002 64.2998 165.2002 64.1001 165.2002 64 C165.2002 64.1001 165.2002 64.2998 165.2002 64.3999 Cf163.2998 60.8999 m163.7002 62 164.3999 62 163.5 60.8999 C163.3999 60.8999 163.2998 60.8999 Vf162.1001 58.6001 m162.1001 58.3999 162.1001 58.2002 162.1001 58 C162 57.8999 162 57.8999 162.1001 58.6001 Cf162.7002 58 m162.7002 57.8999 162.7002 57.7002 162.7002 57.6001 C162.7002 57.7002 162.7002 57.8999 162.7002 58 Cf136.2002 49.7998 m136.2002 49.6001 136.2002 49.3999 136.2002 49.2002 C136.2002 49.3999 136.2002 49.6001 136.2002 49.7998 Cf156.2998 47.7002 m156.2998 47.6001 156.2998 47.6001 156.2998 47.5 C156.2002 47.3999 156.1001 47.2002 156.2998 47.7002 Cf136 46.1001 m135.6001 45.5 135.3999 46.2998 135.7998 46.5 c136.2002 46.7002 135.8999 46.2002 136 46.1001 Cf1 g95.8999 43.3999 m95.7998 43.2002 95.7002 43 95.7002 42.7998 C95.6001 42.7002 95.5 42.7002 95.8999 43.3999 Cf78.3999 43 m78.3999 42.7998 78.3999 42.6001 78.3999 42.3999 C78.3999 42.6001 78.3999 42.7998 78.3999 43 Cf0 g135.3999 43 m135.3999 42.6001 135.3999 42.2002 135.3999 41.7998 C135.2002 41.7998 135.1001 41.7998 135.3999 43 Cf1 g78.2002 41.7998 m78.2002 41.6001 78.2002 41.2998 78.2002 41.1001 C78.2002 41.2998 78.2002 41.6001 78.2002 41.7998 Cf0 g152.7998 39.5 m152.6001 39.7998 153.3999 40.6001 153.7002 41.1001 C153.6001 40.5 153.1001 40 152.7998 39.5 Cf1 g95 37.8999 m94.7998 38.5 96.3999 40.1001 95.2002 38.1001 C95.2002 38 95.1001 37.8999 95 37.8999 Cf89.8999 31.1001 m91.3999 33.1001 92.7002 35.2998 94.3999 37.2002 C93 35.6001 92.1001 32.7998 89.8999 31.1001 Cf0 g133.2998 34.1001 m133.2998 33.8999 133.2998 33.6001 133.2998 33.2998 C133.2998 33.6001 133.2998 33.8999 133.2998 34.1001 Cf1 g88 28.6001 m87.8999 29.2002 89.1001 29.7998 89.5 30.7002 C89.6001 30 88.6001 29.3999 88 28.6001 Cf86.7998 27.2002 m86 27.2002 88.7998 29.1001 87 27.3999 c86.8999 27.2998 86.8999 27.2002 86.7998 27.2002 Cf85.7998 26.5 m85.7002 26.3999 85.5 26.2998 85.3999 26.1001 C85.5 26.2998 85.7002 26.3999 85.7998 26.5 Cf138.8999 15.7998 m139 15.7998 139.1001 15.7998 139.2998 15.7998 C139.1001 15.7002 139 15.6001 138.8999 15.7998 CfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF