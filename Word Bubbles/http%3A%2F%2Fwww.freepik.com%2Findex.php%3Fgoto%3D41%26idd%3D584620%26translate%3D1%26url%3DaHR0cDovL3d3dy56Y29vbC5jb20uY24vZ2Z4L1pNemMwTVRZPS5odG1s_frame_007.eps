%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%AI8_CreatorVersion: 10.0%%For: (\601\613) ()%%Title: (flame_007.eps)%%CreationDate: 03.8.5 9:30 PM%%BoundingBox: 6 9 323 170%%HiResBoundingBox: 6.6001 9.9248 323 169.1001%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 1.1%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI3_TemplateBox: 169.5 86 169.5 86%AI3_TileBox: -117.5 -323 454.5 493%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 596 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -622.5 662 1 1266 977 18 0 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-117.5 -323%%AI3_PaperRect:-11 831 585 -11%%AI3_Margin:11 -12 -13 11%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.4 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.4 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 70 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin		Adobe_blend_AI5_vars begin			/_contoneDevice where			{				pop			}			{				/_contoneDevice false def				} ifelse								/_dpiThreshold where			{				pop			}			{					/_dpiThreshold 600 def			} ifelse						/_screenFreqThreshold where			{				pop			}			{					/_screenFreqThreshold 150 def			} ifelse						/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def	/invertXfer	{		[		{			1 exch sub				} /exec load systemdict/currenttransfer get exec /exec load				] cvx systemdict/settransfer get exec			} bd			/spotDict 3 dict dup begin				/nSpots 2 def				/spot1 7 dict def				/spot2 7 dict def		 end			def			composite?			{				/_setgray_ /setgray load def				/_fill_ /fill load def				/_image_ /image load def			}			{				/_setgray_ systemdict/setgray get def				/_fill_ systemdict/fill get def				/_image_ systemdict/image get def			} ifelse		} bd		/terminate		{			currentdict Adobe_blend_AI5_vars eq			{		 end			currentdict Adobe_blend_AI5 eq			{		 end		} if	} if} bd/_compositeSpotDevice where{ begin		_compositeSpotDevice 0 ne {userdict /composite? true put} if end}{	/_compositeSpotDevice 0 def	} ifelse	/nullString () def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/d255- 256 array def0 1 255{	d255- exch 1 d255 2 index get sub put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 89 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where{	pop lv1Fix}{	false} ifelsedef/ccAry1 5 array def/ccTint 0 def/spotColor? false def/colorimage? true def[/tint1Data/tint2Data/spotDict/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/setCustomColor{	dup /ccTint exch store	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/currentCustomColor{	ccAry1 aload pop ccTint} bd/nsetcustomcolor where {	pop}{	/nsetcustomcolor	{		pop setcmykcolor		} bd} ifelse/nsetcustomcolorend where {	pop}{	/nsetcustomcolorend	{	} bd} ifelse/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop				spotColor?			{			dup 1 exch sub /ccTint exch def			ccAry1 4 /Black put			} if		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/bwImage{	setImgSpace cData /_image_ load	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		expandCMYK		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd} if/expandOne{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if} bd/expandSpot{	spotColor?	{		spotDict begin			spot1 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end			spot2 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end	 end	} if} bd/expandCMYK{	4	{		expandOne 4 1 roll	} repeat} bd/colorimage where dup{	exch pop		/ncolorimage where	{		pop	}	{		/ncolorimage {pop colorimage} bd	} ifelse} ifnot{	/ncolorimage where 	{		pop	}	{		/colorimage? false store		/ncolorimage		{			pop pop pop			setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind			_image_ 		sSave restore	} bd	} ifelse} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		colorimage? 		{			expandCMYK		} if		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		bwImage		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		spotColor?		{			spotDict begin				spot1 begin					currentCustomColor makeByte /tintImage exch def					/name exch def					/spot_K exch def					/spot_Y exch def					/spot_M exch def					/spot_C exch def			 end				spot2 initSpotData		 end		} if		currentcmykcolor		4		{			makeByte 4 1 roll		} repeat		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			spotColor?			{				spotDict begin					/spotDict cvx /begin cvx					spot1 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx					spot2 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/spotDict cvx				/nsetcustomcolor cvx			}			{				/setcmykcolor cvx			} ifelse		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg		{			{				_fill			}		}		{			{				_of true eq				{					currentgray 1 ne					{						bwFill					} if				}				{					bwFill				} ifelse			}		} ifelse		def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq				{					setSSave					/cData whiteByte store					/cDataLen 8 store					bwImage					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		/_setgray_ cvx	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if	} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse	} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					_setgray_ 					_fill_ 				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse							nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq			{				/blend? false store			} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt		{			/blend? false def		} if		blend?		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/initSpotData{ begin		/name null def		/tintImage null def		/tintValue null def		/spot_C  null def		/spot_M  null def		/spot_Y  null def		/spot_K  null def end} bd/getRData{	/colorType gMark store	_compositeSpotDevice 0 ne	{		spotDict begin			spot1 initSpotData			spot2 initSpotData	 end		/spotColor? colorType 2 eq colorType 3 eq or def	} 	{		/spotColor? false store	} ifelse	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			_compositeSpotDevice 0 ne			{				spotDict begin					spot1 begin						/name 3 index def						/spot_K 4 index def						/spot_Y 5 index def						/spot_M 6 index def						/spot_C 7 index def				 end			 end			} if			7		} ifelse	} ifelse	/tmp exch def	tmp index 100 div /endPoint xs	_compositeSpotDevice 0 ne	{		tmp 2 add index 3 eq		{			/tmp tmp 4 add def			tmp index dup 			spotDict begin				spot1/name get ne				{					spot2 begin						/name exch def						/spot_K tmp 2 add index def						/spot_Y tmp 3 add index def						/spot_M tmp 4 add index def						/spot_C tmp 5 add index def				 end				}				{					pop				} ifelse		 end		} if	} if	/color? colorType 0 gt store		colorType 3 eq	{		/tint2Data gMark store	} if		colorType 2 ge	{		/tint1Data gMark store	} if	_compositeSpotDevice 0 ne	{		spotDict begin					colorType 2 ge			{				colorType 3 eq				{					spot2 begin						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def						name null eq {/name /Black def} if				 end				} if				spot1 begin					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def					colorType 2 eq 					{						name null eq 						{							/name spot2/name get def							spot2/name null put						} if					}					{						name null eq {/name /Black def} if					} ifelse			 end			} if	 end	} if		/cData gMark store	setCDataLen	colorType 0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		_eo {eoclip} {clip} ifelse		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/bwImage		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq	{		0	}	{		bDataLen ubAxis div	} ifelse	store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where dup	{		exch pop _compositeSpotDevice 1 ne and	} if	{		0 0 bInc 1 /rectfill cvx		}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		/_fill_ cvx	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	spotColor? {nsetcustomcolorend} if		grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt		{			exch		} if		pop store		/pChange ubAxis 0 eq		{			0		}		{			bDataLen ubAxis div		} ifelse		store		pChange .5 gt noImg not and dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	spotColor? {nsetcustomcolorend} if	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put end} if} bd/Bn{1 add dictdup nullString null put/_bn xs} bd/Bd{Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store			/_fill			{				_of true eq				{					currentgray 1 ne					{						__fill					} if				}				{					__fill				} ifelse			} def	} ifelse	/fill	{	} def	} bd	/BB	{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 kPc1 1 1 1 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(\203\214\203C\203\204\201[ 1) Ln0 A0 O0 g2 J 0 j 1 w 2 M []0 d105.2998 168.2998 m106.8999 168.1001 107.8999 168.6001 109.2002 167.7002 C111.8999 167.2998 114.2002 168.3999 116.7998 167.5 C120.2002 167.2002 125 168.1001 128.3999 166.6001 C132.3999 167.3999 137.1001 166.5 141.1001 165.7998 c150.7998 165.7002 160.2998 161.8999 170.5 162.5 C172 161.7998 173.5 162.2998 174.8999 161.8999 c179.7002 161 184.1001 160.2998 188.7998 159.7998 c193.2002 159.3999 196.7998 159.1001 201.2002 158.7998 C205.8999 157.5 210.3999 158.1001 215.3999 156.7998 C223.7998 156.1001 233.3999 154.6001 242.1001 152.7998 C242.2998 153.3999 242.5 152.7002 242.7002 152.6001 C246.5 153.3999 249.7002 150.5 253.6001 150.6001 C255.6001 149.7002 257.8999 148.8999 260 148.8999 c262.2998 148.6001 264.1001 147.1001 266.6001 147.1001 C267.5 146.2002 268.3999 146.7002 269.2998 146.2998 c272.2002 144.2998 275.7998 144.2998 278.7002 142.3999 C281.3999 142.2002 283.3999 140.2998 285.8999 139.8999 C290.8999 137.5 296.5 135.5 301 133.1001 c302.7002 132.1001 304.3999 130.7998 306.2998 130.2002 C307.6001 129.1001 309.7998 128.3999 310.2002 127.1001 C311.6001 127.3999 313 125.3999 313.7002 124.7002 C314.3999 124.2998 314.7998 122.7998 315.7998 123.6001 C317.6001 122.3999 319.2998 120.6001 320.8999 119.2998 C320.6001 118.5 320.2002 117.5 319.2998 118.5 c317.6001 120.1001 316 120.8999 314.5 122.3999 C313 123.1001 312 124.2998 310.3999 125.2998 C308.7998 125.3999 307.7002 127.5 306.1001 128 C302.6001 130.2998 298.2998 131.7002 294.3999 133.7002 C293.2998 133 292.3999 134.2002 291.7002 134.2998 C291.1001 135.2002 290.8999 134.7998 290.1001 134.8999 C283 138.1001 275.5 140.2002 268 142.6001 C267.6001 141.5 267.2002 142.7998 266.7998 143 C262.7998 143.5 259 145 255.7002 146.5 C253.7998 146.1001 252.1001 147.8999 250.1001 147.2998 C248.6001 148.7998 246.2998 148.1001 244.3999 149.1001 C241.5 149.6001 238.5 150.8999 235.7002 150.3999 C237.5 150.2998 238.5 148.2998 240.5 148.7002 C241.8999 148.1001 244 148.6001 245 147.2998 C247 147.2998 248.8999 147.2998 250.3999 145.8999 C251.7998 145.6001 253.1001 144.7998 254.7002 144.7998 C255.3999 144.5 256.7998 144.3999 257.6001 143.6001 C259.5 143.8999 260.7998 142.2002 262.5 142.6001 C263.5 141.7002 264.8999 141.7998 266 140.8999 C267.3999 140.8999 268.5 139.2998 269.8999 139.8999 C272.6001 138.7998 273.7002 136.7998 276.8999 136.7998 C277.7998 135.6001 279.2998 135.7002 280.3999 134.8999 c284.6001 132.8999 288.5 130 292.7002 128 C297 124.6001 300.7998 120.5 305.2998 117.2998 C306 114.8999 308.2998 114 309.3999 111.8999 C310.5 111.2002 310.6001 109.2998 311.7002 108.2002 C312.2002 106.5 313.2002 104.8999 313.8999 103.2998 c317.3999 94.5 321.2998 85.1001 319.8999 75.1001 C320.2002 67 319 59.2002 316.2002 51.7998 C314.7002 50.7002 314.7998 48.7998 313.7002 47.5 C313.7002 45.7998 311.2002 44.1001 310.6001 42.2002 C307.2002 38.5 304.1001 35.2998 299.7002 32.5 C297.7002 32.5 297.2998 30 295 30.7002 C292.3999 28.6001 288.7998 28 285.8999 27.2002 C283 25.7002 279.7002 25.2002 276.5 24.2998 C274.7998 24.3999 273 23.2002 271.2998 23.2002 C270.1001 22.5 267.7998 23 266.3999 22 C258.2002 20.3999 250.5 19.2998 242.5 18.8999 c234.2998 18.6001 226.5 17.8999 217.7998 17.8999 C213.8999 18.6001 210.5 17 206.7002 18.1001 C200.3999 17.7002 193.7998 17.8999 186.7998 18.2998 C185.1001 19.1001 181.8999 18.2002 179.7998 18.8999 C177.2002 18.7998 174.2002 19.1001 171.7998 20.2002 C169.2998 19.7002 166.2002 20.1001 163.7002 20.7998 c160.1001 21.7998 156.3999 22.1001 152.7998 22.2002 C149.3999 23.6001 146.2998 22 143.3999 23.8999 C140.2998 23.5 137 25.3999 133.8999 24.5 C131.6001 24.8999 129.7998 25.3999 127.2998 24.8999 C126 26.6001 123.8999 25.2002 122.2002 25.2998 c120.2002 25.7002 116.6001 25.5 114.6001 24.7002 C114.6001 24.6001 114.6001 24.5 Y116.7002 23.7998 119.2002 23.2998 121.3999 23.2002 C122.7998 22.2002 124.2998 22.8999 125.7002 21.7998 C128.5 22 130.7002 20.7998 133.1001 20.2002 C134.3999 21.2998 134.7998 19.6001 136.2002 20.3999 C141.2002 19.2998 146.8999 19.2002 151.6001 18.1001 C152.2002 18.2998 152.5 17.7998 152.7998 17.5 C155.6001 17.5 157.3999 16.3999 159.7998 16.2998 C160.6001 15.2002 162.3999 15.2002 162.5 13.6001 C163 11.3999 160.8999 10.8999 159.6001 10.1001 C153.8999 8.8999 148.1001 10.5 142.1001 11.1001 C140.8999 11.6001 139 11.7998 137.6001 12.5 C132.7998 12.3999 128.2998 13.3999 123.6001 14.7998 c118.8999 15.5 115.5 16.8999 111.2998 17.5 C108.7998 18.7998 105.7002 18.1001 103.2998 19.7002 C98.5 18.8999 95.7002 22.7002 91.2998 22.7998 C86 24.2998 82.1001 26.5 76.7002 27.3999 C74.6001 28.8999 71.5 28.2998 69.5 30.2002 C68 30.7002 66.2998 30.7998 65 31.8999 C63.2998 32.2002 61.7002 32.7002 60.5 34.1001 C57.6001 34.2002 55.3999 36.3999 52.8999 37 C49.7998 39 47.7998 40.2002 44.6001 42 c43 43 41.7002 44.2998 40.1001 45.7002 C39.7002 45.6001 39.3999 45.7998 39.1001 45.8999 C34.1001 50.5 29.6001 55.2998 25.7002 60.8999 C22.8999 63 22.7998 66.7002 20.2002 68.7002 c18 70.3999 18 73.2002 16 74.8999 c14.2998 76.5 14.2002 79.2998 12.2998 81.1001 C11.7002 83 10.7002 85 9.7002 86.6001 C9.2002 89.1001 8.1001 91.5 8.2002 94 C7.3999 96 7.3999 98.2002 6.6001 100.2002 C6.2998 103 7 106.2002 6.7998 109 C7.3999 109.7998 6.7002 111.1001 7.7998 111.8999 C7.3999 112.3999 7.7002 113.1001 7.6001 113.7998 C8.5 114.6001 8.2998 116.7998 9.1001 118.1001 c10.1001 119.5 11 121.1001 11.8999 122.6001 C12.7002 125.3999 14.5 127.7998 15.7998 130.3999 C17.3999 131.7998 18.1001 134.5 20 136 C19.8999 137.3999 21.8999 138.3999 22.2002 139.8999 C25.6001 142.6001 27 146.7998 31.1001 148.7002 c33.8999 149.8999 35.3999 152.1001 37.8999 153.8999 c40.1001 155.8999 43.2002 156.5 45.7002 158.3999 C47.2002 159.1001 48.7998 159.3999 50.2002 160.5 C51.7998 159.8999 52.3999 162.1001 54.1001 161.2998 C59.8999 163.2002 66.2998 164 72 166.2002 C73.5 167.6001 75.2998 166.1001 76.7002 167.5 C80.3999 168.5 84.2998 168 87.7998 168.7002 C90.8999 168.5 94 169 97.5 169.1001 c99.7002 169 103 167.6001 105.2998 168.2998 Cf1 g100.3999 157 m110.2998 157.2998 119.5 154.6001 128.7998 155.2998 C129.5 154.3999 131.1001 155.3999 131.8999 154.5 C135 155.1001 137.3999 153.2998 140.1001 153.7002 C144.7002 152.3999 151.6001 153.7002 156.1001 151.7998 C160.7002 151.3999 166.3999 151.8999 170.5 150.6001 C173.6001 151 176.7002 148.8999 179.7998 150 C182.3999 149.2998 184.1001 149.7002 186.6001 148.7002 C187 149.7002 187.7002 148.7002 188.2002 148.7002 C193.1001 147.7002 198.6001 148.2998 203.5 146.8999 C206.3999 146.8999 209 146.2998 211.7002 145.6001 c212.7998 145.5 214.8999 145.8999 215.7998 145.2002 C218.2998 145.2002 221.2998 143.8999 224.2002 143.7998 C228.7002 142.5 233.2998 141.3999 238 140.7002 C240.6001 139.2002 243.7998 138.6001 246.3999 138 c248.7002 137.2002 251 136.2998 253.3999 135.7998 C256.3999 133.6001 260.5 133.5 263.8999 131.8999 C266.1001 131.7002 267 129 269.5 129.3999 C271.1001 127.8999 273.2002 127.2998 275 126.7002 C278.5 124.6001 281.6001 122.7998 285.1001 120.7998 C285.7998 119.2998 287.6001 119.6001 288.3999 118.1001 C294.8999 115.6001 298.5 108.3999 302.3999 103.1001 C302.5 101.2998 303.7002 100 304.7002 98.5 c306.3999 95.5 305.2998 92 308 89.2998 C308.3999 86.2002 308.7002 83.7998 309.6001 80.7998 C310 77.7002 308.7998 75.6001 309.7998 72.3999 C309.7002 72.2998 309.5 72.1001 309.3999 72 C308.8999 69.7998 309.8999 67.5 308.7998 65.3999 C309.1001 65.1001 308.8999 64.5 309 64 C307.7002 62.1001 308.2002 58.8999 306.8999 56.7998 C306.2002 53 304.7002 49.5 302 46.8999 C301 46.7002 300.7998 45.7998 300.2998 45.1001 c298.2002 41.7002 294 40.7002 291.5 38.2998 C288.6001 36.8999 285.3999 35.5 282.3999 34.7998 c281 34.2998 278.8999 33.2998 277.1001 32.5 c271.6001 31.1001 266.2998 30.2998 260.7998 29 C258.8999 29.3999 257 28.2998 254.8999 28.3999 c250.5 28 245.3999 26.6001 240.8999 27.2002 C240.2998 26.3999 239.2002 27 238.6001 26.2998 C235.7998 26.5 231.2998 26.2002 228.7998 26.2998 C227.8999 26.2002 226.5 25.7998 225.2998 25.8999 C222.7998 25.3999 219 26.6001 216.2002 25.8999 c212.7002 25.1001 209.2998 26.5 205.2998 26.2998 C203.2002 25.5 200.5 26.2002 198.2998 25.7002 C197.7998 26.7002 197 25.3999 196.5 26.1001 C192.1001 26.7998 186.5 26.1001 181.6001 27.3999 c178.2002 27.6001 173.2002 27.3999 170.2998 29 C168.2002 29 166 30.1001 163.5 30 C159.6001 30.7002 155.2998 32.7002 151 32.5 C149.7998 33.2998 148.5 32.7998 147.2998 32.8999 c141.6001 33.8999 137.2002 33.3999 131.7002 34.1001 C129.2998 34 126.5 35.3999 124.2998 34.7998 C122.8999 35 122 35.1001 120.7998 35 C120.6001 35.1001 120.5 35.2002 120.2998 35.3999 C114.3999 35.3999 109.8999 36.1001 103.8999 35.6001 c102.3999 35.7002 100.2998 35.7998 99.3999 34.6001 C98.6001 34.2002 97.5 34 97.1001 32.8999 C95.2002 30.8999 101 27.3999 96.7002 29 c93.5 29.7998 90.7002 29.7998 87.6001 31.1001 C85.7998 31.2998 83.7998 32.2002 81.8999 32.7002 C81.2002 34 79.8999 32.7002 79 33.8999 C75 35.1001 70.5 36.5 66.3999 38.1001 C66.6001 39.5 64.8999 38.3999 64.3999 39.2998 C62.2002 40.1001 60.1001 41.2002 58.2002 42.7998 C55.7998 43.2998 54.2998 45.3999 51.7998 46.2998 C50.7002 47.6001 49.1001 48.7998 47.5 49.3999 C47 51.5 43.7002 51.7998 43.2002 54.1001 C41.2998 54.6001 39.2998 57.1001 38.7002 58.2002 C37.2998 59.1001 35.6001 60.6001 34.7998 62.1001 C31.5 65.8999 28.2002 70 25.2998 74.1001 C24.5 77.2002 21.6001 79 20.6001 82.1001 C21.7002 85.6001 17 87.6001 17.5 91.2998 C16.7998 92.1001 17.1001 93.7002 16.5 94.6001 c15.1001 96.5 17.3999 98.2998 15.6001 100 C15 102.1001 16.1001 104.7998 15.3999 107.2002 C15.7002 109.6001 16.5 111.7002 16.7002 114.2002 C17.7998 115 16.7998 116.8999 18.2998 117.5 C19.2002 119.2998 19.7002 121.3999 21 122.7998 C21 123.3999 21.6001 124.1001 21.6001 124.8999 C22.2998 126.5 23.2998 128.5 24.7002 129.7998 C24.7002 131.2998 26.7002 133.2002 27.7998 134.5 C29.5 135.6001 29.8999 137.2002 31.7002 138.2002 C33.7998 141.5 37.6001 143.6001 40.1001 146.7002 C42.2002 148.1001 44.3999 150 47.1001 150.3999 C47.1001 148.7002 44.7002 149.3999 45.5 147.7002 C44.5 145.3999 42.2002 145.3999 41.7998 143.2002 C39.2002 140.3999 37.1001 136.6001 35.6001 133.7002 c34.5 131.5 33.3999 129.7002 32.8999 127.5 C31.7002 127.2002 31.8999 125.7002 31.1001 124.8999 C31.3999 121.7002 28.7002 120.8999 28.7998 117.8999 C30.1001 120.8999 29.1001 117.7002 29 116.7998 C27.2002 111.7998 28 106.6001 29.2002 101.7998 C29.3999 99 30.3999 95.5 31.5 92.6001 c32.1001 90.7002 32.7002 89.6001 33.5 87.7998 C33.8999 86.6001 34.7998 85 35.7998 83.7002 C36.1001 82.2998 36.7002 80.1001 38.5 79.3999 C39.2002 77.7002 40.5 76.7002 41.6001 75.2998 C42.2002 75.7998 41.1001 76 41.1001 76.5 C41.6001 76.3999 42 75.3999 42 75.2998 C41.7998 75.5 41.7002 75.5 41.6001 75.2998 C41.2002 74.2002 42.7002 74.3999 42.7998 73.3999 C42.3999 75 43.2998 74 43.7998 73.2002 c44.6001 72.1001 45.6001 70.6001 46.7002 69.8999 C48.1001 67.6001 49.6001 66.3999 50.7998 64 C48.7002 65.2002 48.1001 68.2002 46.1001 69.5 C46 69.5 45.8999 69.3999 45.8999 69.2998 C48.3999 65.3999 51.2002 60.7998 55.1001 58.7998 C55.2002 59.6001 54.2998 59.8999 53.8999 60.5 C55.2998 60.5 54.6001 58.8999 56 58.7998 C56.2998 58.3999 56 57.6001 56.7998 57.6001 C56.5 57.6001 55.5 58.7002 54.8999 58.6001 C57 55.6001 60.1001 53 62.7002 50.7998 c65.7998 48.7998 68 48.2002 71.3999 47.1001 C72.7998 46.2998 73.8999 44.5 75.7002 44.6001 C75 46.7998 76.8999 44.7002 77.6001 44.6001 c79.2002 44.3999 80.7998 41.7002 82.5 43 C79.7002 45.3999 76.1001 46.5 73 48.7998 c66.7002 54.2998 59.1001 58.8999 54.5 66.7002 C51.3999 67.5 51.5 71.3999 49.6001 72.6001 C49.5 74.2998 47.7998 74.7002 47.5 76.2998 C45.2998 78.7998 45.2002 82.2002 42.7998 84.5 C42.7998 86.3999 40.8999 87.3999 40.7002 89.2998 C38.2998 91.7998 37.7998 95.7002 37.2002 98.8999 C35.8999 101.5 36.3999 105.5 36 108.3999 c35.8999 109 36.2998 109.8999 35.6001 110.2998 C35.8999 110.8999 36.1001 111.7998 36 112.2998 C35.8999 112.2998 35.7002 112.2998 35.6001 112.2998 C35.2998 117.5 38.1001 121.5 40.2998 125.7002 c40.5 126.1001 40.7002 127.2002 41.2998 127.5 C41.8999 129.1001 42.5 130.8999 43.6001 132.1001 C46.2998 137.8999 50.5 142.2002 54.8999 145.8999 C55.6001 147.5 57.5 147.5 58.2002 149.1001 C63.6001 151.6001 68.8999 156.3999 75.5 155.1001 C76.7002 156.3999 79.2998 155.2002 80.7998 156.1001 C84.7002 155.7002 88.7998 157 92.3999 156.5 C95.2002 157 97.6001 156.5 100.3999 157 cf233.7002 150.7998 m233.7998 150.7998 233.7998 150.7998 233.8999 150.7998 C234 150.7002 234 150.6001 233.7002 150.7998 Cf0 g296.2002 132.1001 m296.6001 131.8999 296.8999 131.7998 297.2998 131.7002 C297.5 131.5 297.7002 131.2002 296.2002 132.1001 Cf303.3999 128 m302.7002 128.1001 302.1001 128.7998 301.3999 129.2002 C302.2998 129 302.5 128.2998 303.3999 128 Cf321.2998 118.8999 m321.5 118.7998 321.6001 118.6001 321.7002 118.5 C321.6001 118.5 321.5 118.5 321.2998 118.8999 Cf322.7998 117.2998 m322.7998 117.2002 322.8999 117.1001 323 117.1001 C322.8999 117.1001 322.7998 117.2002 322.7998 117.2998 Cf21.2002 83.2998 m21.2998 83.2998 21.2998 83.2998 21.3999 83.2998 C21.5 83.2002 21.5 83.2002 21.2002 83.2998 Cf43.3999 72.6001 m43.5 72.6001 43.5 72.6001 43.6001 72.6001 C43.7002 72.6001 43.7998 72.5 43.3999 72.6001 Cf44.6001 71.2002 m44.8999 70.7998 45.2002 70.5 45.5 70.1001 C45.2002 70.5 44.8999 70.7998 44.6001 71.2002 Cf1 g51.6001 62.8999 m52.2998 62.2998 52.8999 61.6001 53.5 60.8999 C52.8999 61.6001 52.2998 62.2998 51.6001 62.8999 Cf71.7998 47.8999 m71.8999 47.8999 71.8999 47.7998 72 47.7002 C71.8999 47.7002 71.7002 47.7002 71.7998 47.8999 Cf73.3999 47.1001 m73.7002 46.8999 74 46.7002 74.2998 46.5 C74.2998 46.3999 74.2998 46.2998 73.3999 47.1001 Cf0 g76.7002 44.6001 m77.1001 44.3999 77.3999 44.1001 77.7998 43.7998 C77.3999 44 77.1001 44.2002 76.7002 44.6001 Cf80.6001 42.3999 m80 42.7998 79 42.8999 78.6001 43.3999 C79.5 43.5 79.7998 42.3999 80.6001 42.3999 Cf88.7002 40.1001 m87.8999 40.1001 86.7998 40 86.7998 40.8999 C87.3999 40.7002 88.2002 40.7002 88.7002 40.1001 Cf1 g111.8999 25.1001 m112.2998 25.1001 112.7002 25.1001 113.1001 25.1001 C112.7002 25.1001 112.2998 25.1001 111.8999 25.1001 CfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF