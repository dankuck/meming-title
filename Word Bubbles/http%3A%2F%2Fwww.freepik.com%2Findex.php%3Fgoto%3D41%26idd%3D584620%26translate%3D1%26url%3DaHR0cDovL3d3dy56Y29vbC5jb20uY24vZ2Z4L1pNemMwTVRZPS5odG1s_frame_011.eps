%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%AI8_CreatorVersion: 10.0%%For: (\601\613) ()%%Title: (flame_011.eps)%%CreationDate: 03.8.5 9:32 PM%%BoundingBox: 3 5 192 226%%HiResBoundingBox: 3.8999 5.7998 191.8999 225.7002%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 1.1%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI3_TemplateBox: 102 114.5 102 114.5%AI3_TileBox: -185 -294.5 387 521.5%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 596 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -690 690.5 1 1266 977 18 0 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-185 -294.5%%AI3_PaperRect:-11 831 585 -11%%AI3_Margin:11 -12 -13 11%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.4 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.4 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 70 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin		Adobe_blend_AI5_vars begin			/_contoneDevice where			{				pop			}			{				/_contoneDevice false def				} ifelse								/_dpiThreshold where			{				pop			}			{					/_dpiThreshold 600 def			} ifelse						/_screenFreqThreshold where			{				pop			}			{					/_screenFreqThreshold 150 def			} ifelse						/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def	/invertXfer	{		[		{			1 exch sub				} /exec load systemdict/currenttransfer get exec /exec load				] cvx systemdict/settransfer get exec			} bd			/spotDict 3 dict dup begin				/nSpots 2 def				/spot1 7 dict def				/spot2 7 dict def		 end			def			composite?			{				/_setgray_ /setgray load def				/_fill_ /fill load def				/_image_ /image load def			}			{				/_setgray_ systemdict/setgray get def				/_fill_ systemdict/fill get def				/_image_ systemdict/image get def			} ifelse		} bd		/terminate		{			currentdict Adobe_blend_AI5_vars eq			{		 end			currentdict Adobe_blend_AI5 eq			{		 end		} if	} if} bd/_compositeSpotDevice where{ begin		_compositeSpotDevice 0 ne {userdict /composite? true put} if end}{	/_compositeSpotDevice 0 def	} ifelse	/nullString () def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/d255- 256 array def0 1 255{	d255- exch 1 d255 2 index get sub put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 89 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where{	pop lv1Fix}{	false} ifelsedef/ccAry1 5 array def/ccTint 0 def/spotColor? false def/colorimage? true def[/tint1Data/tint2Data/spotDict/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/setCustomColor{	dup /ccTint exch store	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/currentCustomColor{	ccAry1 aload pop ccTint} bd/nsetcustomcolor where {	pop}{	/nsetcustomcolor	{		pop setcmykcolor		} bd} ifelse/nsetcustomcolorend where {	pop}{	/nsetcustomcolorend	{	} bd} ifelse/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop				spotColor?			{			dup 1 exch sub /ccTint exch def			ccAry1 4 /Black put			} if		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/bwImage{	setImgSpace cData /_image_ load	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		expandCMYK		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd} if/expandOne{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if} bd/expandSpot{	spotColor?	{		spotDict begin			spot1 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end			spot2 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end	 end	} if} bd/expandCMYK{	4	{		expandOne 4 1 roll	} repeat} bd/colorimage where dup{	exch pop		/ncolorimage where	{		pop	}	{		/ncolorimage {pop colorimage} bd	} ifelse} ifnot{	/ncolorimage where 	{		pop	}	{		/colorimage? false store		/ncolorimage		{			pop pop pop			setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind			_image_ 		sSave restore	} bd	} ifelse} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		colorimage? 		{			expandCMYK		} if		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		bwImage		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		spotColor?		{			spotDict begin				spot1 begin					currentCustomColor makeByte /tintImage exch def					/name exch def					/spot_K exch def					/spot_Y exch def					/spot_M exch def					/spot_C exch def			 end				spot2 initSpotData		 end		} if		currentcmykcolor		4		{			makeByte 4 1 roll		} repeat		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			spotColor?			{				spotDict begin					/spotDict cvx /begin cvx					spot1 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx					spot2 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/spotDict cvx				/nsetcustomcolor cvx			}			{				/setcmykcolor cvx			} ifelse		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg		{			{				_fill			}		}		{			{				_of true eq				{					currentgray 1 ne					{						bwFill					} if				}				{					bwFill				} ifelse			}		} ifelse		def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq				{					setSSave					/cData whiteByte store					/cDataLen 8 store					bwImage					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		/_setgray_ cvx	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if	} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse	} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					_setgray_ 					_fill_ 				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse							nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq			{				/blend? false store			} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt		{			/blend? false def		} if		blend?		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/initSpotData{ begin		/name null def		/tintImage null def		/tintValue null def		/spot_C  null def		/spot_M  null def		/spot_Y  null def		/spot_K  null def end} bd/getRData{	/colorType gMark store	_compositeSpotDevice 0 ne	{		spotDict begin			spot1 initSpotData			spot2 initSpotData	 end		/spotColor? colorType 2 eq colorType 3 eq or def	} 	{		/spotColor? false store	} ifelse	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			_compositeSpotDevice 0 ne			{				spotDict begin					spot1 begin						/name 3 index def						/spot_K 4 index def						/spot_Y 5 index def						/spot_M 6 index def						/spot_C 7 index def				 end			 end			} if			7		} ifelse	} ifelse	/tmp exch def	tmp index 100 div /endPoint xs	_compositeSpotDevice 0 ne	{		tmp 2 add index 3 eq		{			/tmp tmp 4 add def			tmp index dup 			spotDict begin				spot1/name get ne				{					spot2 begin						/name exch def						/spot_K tmp 2 add index def						/spot_Y tmp 3 add index def						/spot_M tmp 4 add index def						/spot_C tmp 5 add index def				 end				}				{					pop				} ifelse		 end		} if	} if	/color? colorType 0 gt store		colorType 3 eq	{		/tint2Data gMark store	} if		colorType 2 ge	{		/tint1Data gMark store	} if	_compositeSpotDevice 0 ne	{		spotDict begin					colorType 2 ge			{				colorType 3 eq				{					spot2 begin						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def						name null eq {/name /Black def} if				 end				} if				spot1 begin					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def					colorType 2 eq 					{						name null eq 						{							/name spot2/name get def							spot2/name null put						} if					}					{						name null eq {/name /Black def} if					} ifelse			 end			} if	 end	} if		/cData gMark store	setCDataLen	colorType 0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		_eo {eoclip} {clip} ifelse		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/bwImage		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq	{		0	}	{		bDataLen ubAxis div	} ifelse	store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where dup	{		exch pop _compositeSpotDevice 1 ne and	} if	{		0 0 bInc 1 /rectfill cvx		}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		/_fill_ cvx	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	spotColor? {nsetcustomcolorend} if		grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt		{			exch		} if		pop store		/pChange ubAxis 0 eq		{			0		}		{			bDataLen ubAxis div		} ifelse		store		pChange .5 gt noImg not and dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	spotColor? {nsetcustomcolorend} if	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put end} if} bd/Bn{1 add dictdup nullString null put/_bn xs} bd/Bd{Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store			/_fill			{				_of true eq				{					currentgray 1 ne					{						__fill					} if				}				{					__fill				} ifelse			} def	} ifelse	/fill	{	} def	} bd	/BB	{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 kPc1 1 1 1 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(\203\214\203C\203\204\201[ 1) Ln0 A0 O0 g2 J 0 j 1 w 2 M []0 d179.2002 221.2998 m180.2002 218.8999 179.7998 215.5 180.2002 213.2998 C179.8999 212.7002 179.7002 210.5 181.2002 210.7002 C181.8999 210.6001 183 210.2998 183.7002 209.7998 C186.7998 209.3999 190 208.6001 191.8999 205.7002 C192.5 204.1001 191.8999 203.2002 190.8999 202 C190 201.3999 188.8999 201.1001 188 200.3999 C186.2998 201.7002 185.5 198.3999 183.8999 200.2002 C182 200.1001 179.3999 199.6001 178.1001 198.1001 c176 194.2998 176.3999 189.2002 175.5 184.7002 C176 183.7998 175.2998 182.2998 175.2998 181 c174.8999 177.1001 175.3999 174.2998 174.7002 170.5 C175.1001 168 174.7002 165.2998 174.2002 162.8999 c174 161.1001 174.5 159.5 173.3999 158.2002 C173.6001 155.8999 172.8999 153.2998 174 151.3999 C173.1001 149.2002 173.3999 147 173 144.7998 c172.7002 143.7002 173.3999 143.1001 173.3999 141.8999 c173.2002 138.7998 173 135.2998 172.7998 131.7002 C173.6001 126.8999 173.1001 121.3999 172.7998 116.7998 C174 115.1001 172.2002 113.7998 173.2002 112.1001 C173.5 100.5 172.3999 88.2002 172.7998 76.2998 C171.7002 75 173.3999 72.5 172.2002 71.2002 C171.6001 69.7002 172.5 68 172.2002 66.7002 C171.2998 65.3999 172.2002 63.3999 172.2002 61.7002 C172.3999 60.5 170.7998 59 172 57.6001 C171.2002 56.7998 172.7998 55.1001 171.3999 54.2998 C171.1001 52.2998 172 50.5 171.3999 48.5 C171.5 48.3999 171.6001 48.2998 171.7998 48.1001 C171.5 45.2998 171.5 43.2002 171.7998 40.1001 C172.7002 39.2002 171.5 37.2002 172.7998 36.6001 C172.3999 34 172.6001 30.1001 172.7998 27.6001 C173.2002 27.2998 173.2002 27 172.7998 26.7002 C172.2002 24.3999 173.2002 22 172 20.2002 C173.8999 19.6001 175.2002 22.3999 177.1001 22 C178.5 24.1001 182.1001 24.3999 181 27.2002 C181.5 26.7002 182.6001 26.8999 182.5 27.7998 C182.5 28.7002 183.8999 29.7998 183.1001 31.1001 C183.2002 31.2002 183.3999 31.2998 183.5 31.5 C183.1001 32.5 183.7002 33.7002 182.8999 34.3999 C183.2002 36.5 182.1001 39.3999 183.5 40.7002 C182.5 41.6001 183.2002 44.2998 183.2998 45.1001 C183.3999 44.8999 183.5 44.7998 183.7002 44.7998 C182.7002 49.2002 184.6001 54.2002 184.5 58.6001 C184.2998 59.6001 184.8999 61 184.7002 61.8999 C184.7998 62.5 184.3999 64.2002 185.1001 65 C185.2998 61.2002 184.8999 55.2998 184.7002 51.2002 C186.5 52.1001 185.2002 53.8999 186.2002 55.5 C186.7002 62.3999 186.7002 70.6001 187 77.2998 C188.2998 78.6001 186.1001 80.7998 188.2002 80.7998 C189.2998 81.6001 188 83.2998 188.3999 84.7998 C188.8999 85.1001 189.2002 86 189.5 85 C188.3999 82.5 189.7998 80.2998 189.1001 78 C189.3999 76.7002 189.2002 74.3999 189.2998 73 C189.6001 73.1001 189.5 71.5 189.2998 71 C188.8999 70.5 190 69.6001 189.1001 69.2998 C189.3999 68.8999 190.1001 67.8999 189.2998 67.7002 c188.7002 67.5 189.3999 67.2998 189.5 67.1001 c190.1001 63.8999 189 61.3999 189.7002 58.2002 C188.8999 57.1001 190 55.7998 189.2998 54.5 C189.7002 51.3999 189.3999 48.2998 188.7998 45.2998 C188.8999 39 187.7998 33.2002 189.5 27.3999 C189.2002 25.2002 190.7002 23.3999 190.5 21 c190.2998 17.2998 191.1001 13.3999 188.2002 10.7002 c184.8999 7.1001 179.7002 7.5 175.7002 6.3999 C175 6.3999 174.2002 7.2998 173.6001 6.3999 C168.8999 7.1001 163 5 158.2002 5.7998 C156.6001 5.7002 154.6001 5.2002 152.7998 6 C152.1001 5.7002 150.3999 5.7002 149.2998 6 C147.6001 7.2002 145.7998 5.6001 144 6.6001 C142.6001 6.2998 141.1001 7 139.8999 7.6001 C138.8999 6.8999 138 7.5 137 7.7998 C133.6001 7.7002 130.3999 8.1001 126.8999 7.7998 C124.3999 9.2998 122.1001 7.6001 119.2998 8.3999 C115.5 8 111.2998 9.2998 107 8.7998 C106.1001 8.3999 104.7998 9.3999 104.1001 8.7998 C96.5 8.7002 88 9.7998 80.7998 9.8999 c78.5 10 75.7998 11.3999 73.6001 10.1001 C65.1001 10.7002 57.5 12.5 48.2998 13 C47.1001 13.8999 45.2002 12.7002 43.7998 13.7998 C43 13 42.6001 14.3999 41.7998 14.2002 C34.7998 14.3999 24.7998 11.7998 21.3999 20.2002 C17.8999 24.2998 20.5 29.2002 19.1001 34.1001 C20.2002 37.7002 19.6001 41.2002 20.3999 44.7998 C19.8999 45.1001 19.8999 45.5 20.2002 45.8999 C20.5 47.6001 20.5 49 20 50.7998 C20.8999 51.8999 19 53.3999 20 54.5 C20.2998 56.2002 19.2998 59.1001 20 60.7002 C20.2998 68.2998 20.2998 76.5 20 84.5 C19.7998 84.8999 19.5 84.6001 19.2998 85 C18.7998 89 20.2002 92.3999 20.6001 96.1001 C20.1001 97.2002 21.2998 98.6001 20.6001 99.6001 C20.8999 102.3999 21.6001 104.7998 21.2002 107.3999 c20.5 112.7998 22.5 119.2998 21.7998 124.7002 C22.7998 126.8999 21.6001 130.1001 22.7998 132.2998 C22.3999 133.6001 22.7998 135.1001 23.2002 136.3999 C23.3999 142.8999 25.3999 149.3999 24.7002 155.5 c24.7002 157.2002 24.5 160 25.5 160.8999 C24.6001 162.5 25.5 163.8999 25.5 165.3999 C25.6001 165.5 25.7998 165.7002 25.8999 165.7998 C25.8999 172.1001 26.1001 176.8999 26.2998 183.2998 C25.6001 184.7998 26.7998 185.8999 26.1001 187.2002 C25.6001 190.1001 26.1001 193.2002 26.5 196 c26.8999 199.2002 24.7002 195.8999 23.5 196.7002 C22.3999 195.1001 19.6001 194.7998 20.2002 192.7998 C19.2998 191 18.1001 188.6001 18.2998 186.3999 C20 185.1001 16.8999 185.7998 17.7002 184.1001 C17 181.1001 15.7002 177.3999 15.6001 174.3999 C15.2002 174.1001 14.7998 175.7998 14.3999 174.7002 C14.2002 173 15 172 13.6001 171.6001 C13.2998 171.3999 13.3999 171.2002 13.3999 170.8999 C14.7002 170.7002 13.2998 169.7002 13.2002 169.1001 c13.1001 168.8999 13.2998 168.7998 13.3999 168.7002 C12.8999 168.3999 13 167.8999 13 167.5 C13.1001 167.2998 13.2002 167.2002 13.3999 167.2002 C11.7998 166.7998 13.8999 165.7002 12.7998 165.3999 C11.8999 163.2998 12 160.7002 11.1001 158.6001 C9.5 159.2998 11.6001 159.5 10.5 160.5 C10.7002 164.3999 11.7998 168.6001 11.8999 172.7998 c12.2002 177.7002 11.2998 182.7998 11.8999 187.7998 C13 190.3999 11.6001 192.7002 12.2998 195.2002 c12.7998 196.7998 11.5 198.8999 11.7002 200.6001 C10.6001 202 12 203.3999 11.8999 204.8999 C13.2998 208.1001 17.2998 208.2998 20.3999 209.2002 C24 207.5 28.5 208.8999 32.5 208.7998 C38.2002 210.2998 43.1001 209 49.2002 210.8999 c51.8999 211.6001 54.7002 210.8999 57.3999 211.7002 C58.8999 210.8999 61.5 212.1001 63.3999 211.7002 C78.3999 213.1001 95.6001 211.6001 111.5 212.1001 C112.2998 211.7998 112.2998 213.5 112.8999 212.2998 C119.6001 212.8999 124.8999 211.8999 131 213.1001 C133.6001 212.5 135.7998 213.3999 138.3999 213.8999 C140.7002 213.1001 142.3999 215.3999 143.7998 215 C145.7998 216.1001 148.6001 216.2002 151.2002 216.2002 C152.5 216.7002 154.3999 217 156.1001 217 C158.2002 218.6001 163 217 163.2998 221.1001 C164.3999 223.3999 165.8999 224.8999 168.2998 225.7002 c172.5 226.3999 176.7998 224.8999 179.2002 221.2998 Cf1 g141.2998 210.8999 m138.7002 209.1001 135.7998 210.7998 132.8999 209.3999 C125.5 209.7002 118.5 209 111.1001 209.2002 C110.2002 209.8999 108.7998 208.8999 107.7998 209.2002 c104.6001 209.8999 102.2002 208.1001 99.2002 209.6001 C104.7002 210.3999 111.2002 210.6001 116.7998 211.1001 c119.8999 211 122.5 211.8999 125.5 211.8999 c129.3999 212.2002 133.2998 212.1001 137 211.7002 C138.3999 211.2002 140.1001 211.7998 141.2998 210.8999 Cf94.7998 209.3999 m94.8999 209.3999 95 209.2998 95 209.2002 C95 209.2998 94.8999 209.3999 94.7998 209.3999 Cf153.8999 199.1001 m155.7002 199.7002 158.1001 198.3999 160 199.1001 C161.6001 198.2998 164 199 164 196.2998 c164.2998 190.8999 164.8999 186.8999 164.2002 181.8999 C165.1001 181 163.8999 180.2002 164.6001 179 C163.5 175.6001 165 171.1001 164 167.7002 C165.6001 164.7998 163 161.6001 164.2002 158.6001 C163.5 156.1001 164.6001 154.2002 164 152 c163 149.2998 165 147.2998 163.5 144.7998 c162.6001 142.3999 164.7998 139.6001 163.1001 137.2002 C162.3999 135.6001 164.5 134.3999 163.2998 133.2998 C163.7002 130 162.3999 128 163.1001 124.8999 c163.7002 116.5 162.7998 109.6001 163.1001 101.3999 C161.8999 100.1001 163.1001 98.1001 162.7002 96.7002 C162.6001 92.1001 161.2998 86.7998 161.5 82.7002 c161.7002 79.1001 161 73.8999 161.2998 70.7998 C160.7998 70.6001 161.2998 70.1001 160.8999 69.8999 C161.2998 66.3999 160.1001 63.2002 160.2998 60.1001 C159.2002 58.3999 160.6001 56.7998 159.7998 54.7002 C159.7998 51 159.2002 47.2998 158.6001 43.7998 c158.1001 41.7998 158.5 39.7002 158.3999 37.6001 C157.3999 36.7998 157.7002 35.3999 157.3999 34.3999 C156.7998 30 156.6001 24.1001 151.7998 22.2002 c147.2998 20.3999 142.1001 21.3999 137.3999 20.6001 c130.2002 19.3999 123.1001 20.1001 116.6001 20.7998 c115.6001 20.7998 115 19.7002 114.3999 21 C112 21.2998 109.5 20.3999 107.2002 20.6001 C106.5 20.2002 107 19.8999 107.3999 19.7002 c110.6001 18.7998 114.5 19.8999 117.1001 18.7002 C113.7998 17.7998 108.8999 18.7998 104.7002 18.5 c99 18.6001 92.3999 19 86.3999 19.7002 C83.5 19.5 81.7002 20.2002 78.7998 20 C77.3999 20.7998 74.5 19.7998 74.2998 21.3999 C73.3999 21.7002 72.8999 21.7002 72 21.3999 C72 20.2002 70.1001 22.5 68.8999 21.3999 C69 21 70.8999 20.8999 69.2998 21 C68.7002 21.2998 68.1001 20.8999 67.2998 21.6001 C66.7002 21.7002 67.2002 21.1001 66.8999 21.2002 C61.2998 21.1001 55.2998 21.8999 49.7998 23.7002 C45.7002 23.3999 40.7998 24.3999 38.1001 27.6001 c37.1001 28.7002 37.5 30.1001 36.6001 31.5 C37 34.6001 34.7998 37 35.6001 40.1001 C35.2002 42.5 34.7002 44.3999 34.3999 46.5 C34 47 34.2002 47.7002 34.6001 48.1001 C33.1001 49.8999 33.8999 52.7998 33.2998 54.5 c33.1001 56.2002 33 58.7002 33.1001 60.5 C33 60.7002 32.6001 60.7998 32.7002 61.1001 C33.6001 62.2998 31.7998 63.6001 32.7002 65 C32.2998 65.3999 31.7998 66.1001 32.5 66.3999 C31.7002 70.1001 33.2002 73.6001 32.1001 77.2998 C33.5 78.6001 31 80.1001 32.7002 81.2998 C33 85.1001 32.8999 89.2002 33.5 93 c33.8999 94.3999 32.7002 95.7002 33.7002 96.8999 C34.5 99.8999 32.8999 102.3999 34.3999 105.1001 C33.7002 107.2998 33.8999 109.1001 34.1001 110.8999 c34.8999 116.8999 34.3999 121.2002 35 127.2998 C36.5 129 35.5 130.2998 35.7998 132.5 c36 134.5 36.2002 137.5 36.3999 139.2998 c36.5 139.7998 37.2002 140.8999 36.6001 141.7002 C37.8999 143.1001 36.6001 145.1001 37.3999 146.5 C38.2002 148.7002 37.6001 150.6001 38.7002 152.6001 C38.8999 156.2002 39.7998 158.3999 40.2998 162.1001 c40.3999 162.5 40 163.6001 40.8999 164 C39.8999 168.3999 42.6001 171.1001 42.6001 175.5 C43 176.6001 42.7002 177.8999 42.7998 179.2002 C43.7998 181.1001 43.8999 183.2998 45.1001 185.1001 C44.8999 187.7998 47.5 189 48.2998 191.1001 C52.7998 193.8999 58.3999 194 63.6001 195 C66.3999 196.2002 70 196.2002 73 196.2998 C75.6001 196.7998 78.8999 197.8999 81.8999 196.8999 C88.3999 197.7002 95.3999 197.7998 101.7998 198.2998 c106.1001 198.2002 111.1001 198.7998 115.3999 198.2998 C115.5 198.3999 115.7002 198.6001 115.7998 198.7002 C118.2998 199.1001 122 197.8999 124.5 198.8999 C132.2998 197.2998 139.2002 200.5 147.1001 199.1001 C149.2002 199.3999 151.7002 199.3999 153.8999 199.1001 Cf0 g17.5 178.7998 m17.6001 178.7998 17.7998 178.7998 17.8999 178.7998 C17.8999 178.6001 17.8999 178.3999 17.5 178.7998 Cf10.8999 155.8999 m8.3999 156.7002 12.3999 156.8999 10.5 158 C12.2002 158.2002 10.3999 156.5 10.8999 155.8999 Cf10.5 152 m10 152.6001 9.3999 153.2998 10.5 153.8999 C11.2998 153.2998 10.6001 152.6001 10.5 152 Cf10.2998 148.1001 m9.6001 147 10.7998 146.3999 9.8999 145.3999 c8.8999 144.3999 11.7002 143.8999 9.8999 143.3999 C9.3999 141.7998 9 139.7002 9.5 138.2002 C8.3999 138.5 9.1001 137.2002 8.6001 136.7998 C10 134.2998 7.7998 132.2998 8.2002 129.6001 C7.7002 129.1001 9.6001 128.1001 8 128.2002 C7.8999 128 7.7998 127.8999 7.6001 127.7002 C7.2998 126.6001 8.2002 125.6001 7.3999 124.5 C7.3999 125.1001 6.5 124.7998 6.6001 125.5 C7.1001 125.7002 7.2998 125 7.6001 125.7002 C7.2998 125.7998 7.2998 126.6001 7 126.1001 C6.2998 126.7998 7.5 128.2998 6.7998 129.3999 C6.2002 131.2002 7.3999 133.6001 7 135.6001 C8.2002 137.5 7.1001 139.7002 8 141.7002 C7.5 143.7002 8.5 145 8.3999 146.8999 C10.1001 147.5 7.6001 147.8999 8.6001 148.7002 C9.1001 149.7002 9.3999 151.2998 10.2998 151.3999 C10.8999 151.1001 10.3999 150.7998 10.2998 150.3999 C10.2998 149.3999 10.2998 149.1001 10.2998 148.1001 Cf6.2002 102 m6.2002 101.7998 6.2002 101.6001 6.2002 101.3999 C6.2002 101.6001 6.2002 101.7998 6.2002 102 Cf7 95.8999 m5.7998 96 7 95.1001 6.3999 94.6001 C7.2998 94.8999 7.2002 93.3999 7 92.6001 C6.7002 92.5 6.2998 92.7002 6.2002 92.3999 C6.7002 92 7.6001 90.7002 7.2002 90.8999 C6.7998 90.6001 7.7002 90.2998 7.3999 89.7002 C6.2002 89.2002 7.2002 87.5 5.7998 87 C5.8999 86.6001 6 85.7002 5.2998 85.3999 C3.6001 85.8999 4.3999 87.7002 3.8999 89.2998 C4.3999 90.3999 4.6001 92 4.5 93.6001 c4.3999 95.6001 4.6001 97.5 6 98.7002 C3.5 99.6001 7.2002 99.3999 6.2002 100.7998 C5.7998 99.3999 6.7002 97.1001 7 95.8999 Cf9.7002 91.1001 m9.6001 91 9.3999 90.8999 9.2998 90.8999 C8.2002 92.1001 10.5 93.1001 9.7002 91.1001 Cf187.7998 91.2998 m187.7998 90.8999 187.7998 90.5 187.7998 90.1001 C187.7998 90.5 187.7998 90.8999 187.7998 91.2998 Cf187.3999 86.7998 m187.8999 87.7998 187.2002 88.5 187.6001 89.5 C188.1001 88.2998 187.2998 87.6001 187.7998 86.3999 C187.3999 86.2998 187.7002 86.7002 187.3999 86.7998 Cf188.7998 87.2002 m188.8999 86.8999 189 86.5 189.1001 86.2002 C189 86.5 188.8999 86.8999 188.7998 87.2002 Cf184.8999 77.2998 m184.7002 78 185.3999 78.2998 185.1001 79 C185.1001 78.3999 185.2998 77.7998 184.8999 77.2998 Cf185.2998 75.5 m184.7998 75.2002 184.8999 74.7002 184.8999 74.2998 C186.2002 74.3999 185.1001 73.2002 185.2998 72.7998 C185.6001 72.2002 184.2998 72.3999 184.7002 71.7998 C184.2998 71.7998 185.5 72.2998 184.7002 73.2002 C184.8999 73.2002 185 73.2998 185.1001 73.3999 C185.3999 74 184.7002 74 184.7002 74.1001 C185.2002 74.5 184.6001 76.1001 185.2998 75.5 Cf185.2998 66.7002 m185.2002 66.1001 184.7998 66.2998 184.5 65.7998 C185.1001 67.2002 184.2002 69.2002 184.7002 69.8999 C185.5 69.6001 185.6001 67.8999 185.2998 66.7002 cf182.8999 54.7002 m182.8999 54.6001 182.8999 54.3999 182.8999 54.2998 C182.8999 54.3999 182.8999 54.6001 182.8999 54.7002 Cf1 g184.7002 51 m184.7002 50.6001 184.7002 50.2002 184.7002 49.7998 C184.7002 50.2002 184.7002 50.6001 184.7002 51 Cf183.8999 45.7002 m184 45.7002 184 45.7002 184.1001 45.7002 C184.1001 45.5 184.1001 45.3999 183.8999 45.7002 Cf0 g181.8999 42.3999 m181.8999 42 181.8999 41.7002 181.8999 41.2998 C181.8999 41.7002 181.8999 42 181.8999 42.3999 Cf181.8999 38.8999 m181.5 39.3999 181.5 40 181.8999 40.5 C182.2002 40.1001 181.7002 39.5 181.8999 38.8999 Cf181.6001 36.3999 m181.7002 36.2998 181.7998 36.2998 181.8999 36.2002 C181.8999 36 181.8999 35.7998 181.6001 36.3999 Cf181.6001 32.7002 m181.8999 33.5 181 34.1001 182.1001 34.6001 C182.2998 33.8999 181.5 33.5 181.6001 32.7002 Cf181.8999 31.5 m181.8999 31.6001 181.8999 31.7002 V181.8999 31.6001 181.8999 31.5 Yf181.8999 29.7998 m181.5 29.1001 181.2002 29.7998 181.3999 30 C181.6001 30.1001 181.7002 29.8999 181.8999 29.7998 Cf181.3999 28.3999 m181.3999 28.2002 181.3999 28 181.3999 27.7998 C181.3999 28 181.3999 28.2002 181.3999 28.3999 Cf76.8999 20.7998 m76.2002 20.8999 75.2002 21 76.7002 21 C76.7998 20.8999 76.8999 20.7998 Yf79.3999 20.7998 m78.7998 20.7998 77.7002 20.6001 77.6001 21 C78.2002 20.8999 78.8999 21.1001 79.3999 20.7998 Cf81.2998 20.6001 m81.1001 20.2998 80.8999 20.3999 80.6001 20.3999 C79.7998 21.2002 81.2998 21.1001 81.2998 20.6001 CfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF