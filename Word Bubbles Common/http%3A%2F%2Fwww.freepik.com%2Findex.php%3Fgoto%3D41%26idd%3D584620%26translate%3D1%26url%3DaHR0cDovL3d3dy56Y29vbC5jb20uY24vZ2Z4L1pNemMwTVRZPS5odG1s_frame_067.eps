%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%AI8_CreatorVersion: 10.0%%For: (\601\613) ()%%Title: (flame_067.eps)%%CreationDate: 03.8.5 10:01 PM%%BoundingBox: 13 15 364 338%%HiResBoundingBox: 13.2002 15.4248 363.5 337.8501%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 1.1%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI3_TemplateBox: 188 171 188 171%AI3_TileBox: -99 -238 473 578%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 596 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -604 747 1 1266 977 26 0 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-99 -238%%AI3_PaperRect:-11 831 585 -11%%AI3_Margin:11 -12 -13 11%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.4 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.4 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 70 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin		Adobe_blend_AI5_vars begin			/_contoneDevice where			{				pop			}			{				/_contoneDevice false def				} ifelse								/_dpiThreshold where			{				pop			}			{					/_dpiThreshold 600 def			} ifelse						/_screenFreqThreshold where			{				pop			}			{					/_screenFreqThreshold 150 def			} ifelse						/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def	/invertXfer	{		[		{			1 exch sub				} /exec load systemdict/currenttransfer get exec /exec load				] cvx systemdict/settransfer get exec			} bd			/spotDict 3 dict dup begin				/nSpots 2 def				/spot1 7 dict def				/spot2 7 dict def		 end			def			composite?			{				/_setgray_ /setgray load def				/_fill_ /fill load def				/_image_ /image load def			}			{				/_setgray_ systemdict/setgray get def				/_fill_ systemdict/fill get def				/_image_ systemdict/image get def			} ifelse		} bd		/terminate		{			currentdict Adobe_blend_AI5_vars eq			{		 end			currentdict Adobe_blend_AI5 eq			{		 end		} if	} if} bd/_compositeSpotDevice where{ begin		_compositeSpotDevice 0 ne {userdict /composite? true put} if end}{	/_compositeSpotDevice 0 def	} ifelse	/nullString () def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/d255- 256 array def0 1 255{	d255- exch 1 d255 2 index get sub put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 89 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where{	pop lv1Fix}{	false} ifelsedef/ccAry1 5 array def/ccTint 0 def/spotColor? false def/colorimage? true def[/tint1Data/tint2Data/spotDict/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/setCustomColor{	dup /ccTint exch store	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/currentCustomColor{	ccAry1 aload pop ccTint} bd/nsetcustomcolor where {	pop}{	/nsetcustomcolor	{		pop setcmykcolor		} bd} ifelse/nsetcustomcolorend where {	pop}{	/nsetcustomcolorend	{	} bd} ifelse/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop				spotColor?			{			dup 1 exch sub /ccTint exch def			ccAry1 4 /Black put			} if		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/bwImage{	setImgSpace cData /_image_ load	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		expandCMYK		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd} if/expandOne{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if} bd/expandSpot{	spotColor?	{		spotDict begin			spot1 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end			spot2 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end	 end	} if} bd/expandCMYK{	4	{		expandOne 4 1 roll	} repeat} bd/colorimage where dup{	exch pop		/ncolorimage where	{		pop	}	{		/ncolorimage {pop colorimage} bd	} ifelse} ifnot{	/ncolorimage where 	{		pop	}	{		/colorimage? false store		/ncolorimage		{			pop pop pop			setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind			_image_ 		sSave restore	} bd	} ifelse} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		colorimage? 		{			expandCMYK		} if		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		bwImage		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		spotColor?		{			spotDict begin				spot1 begin					currentCustomColor makeByte /tintImage exch def					/name exch def					/spot_K exch def					/spot_Y exch def					/spot_M exch def					/spot_C exch def			 end				spot2 initSpotData		 end		} if		currentcmykcolor		4		{			makeByte 4 1 roll		} repeat		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			spotColor?			{				spotDict begin					/spotDict cvx /begin cvx					spot1 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx					spot2 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/spotDict cvx				/nsetcustomcolor cvx			}			{				/setcmykcolor cvx			} ifelse		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg		{			{				_fill			}		}		{			{				_of true eq				{					currentgray 1 ne					{						bwFill					} if				}				{					bwFill				} ifelse			}		} ifelse		def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq				{					setSSave					/cData whiteByte store					/cDataLen 8 store					bwImage					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		/_setgray_ cvx	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if	} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse	} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					_setgray_ 					_fill_ 				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse							nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq			{				/blend? false store			} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt		{			/blend? false def		} if		blend?		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/initSpotData{ begin		/name null def		/tintImage null def		/tintValue null def		/spot_C  null def		/spot_M  null def		/spot_Y  null def		/spot_K  null def end} bd/getRData{	/colorType gMark store	_compositeSpotDevice 0 ne	{		spotDict begin			spot1 initSpotData			spot2 initSpotData	 end		/spotColor? colorType 2 eq colorType 3 eq or def	} 	{		/spotColor? false store	} ifelse	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			_compositeSpotDevice 0 ne			{				spotDict begin					spot1 begin						/name 3 index def						/spot_K 4 index def						/spot_Y 5 index def						/spot_M 6 index def						/spot_C 7 index def				 end			 end			} if			7		} ifelse	} ifelse	/tmp exch def	tmp index 100 div /endPoint xs	_compositeSpotDevice 0 ne	{		tmp 2 add index 3 eq		{			/tmp tmp 4 add def			tmp index dup 			spotDict begin				spot1/name get ne				{					spot2 begin						/name exch def						/spot_K tmp 2 add index def						/spot_Y tmp 3 add index def						/spot_M tmp 4 add index def						/spot_C tmp 5 add index def				 end				}				{					pop				} ifelse		 end		} if	} if	/color? colorType 0 gt store		colorType 3 eq	{		/tint2Data gMark store	} if		colorType 2 ge	{		/tint1Data gMark store	} if	_compositeSpotDevice 0 ne	{		spotDict begin					colorType 2 ge			{				colorType 3 eq				{					spot2 begin						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def						name null eq {/name /Black def} if				 end				} if				spot1 begin					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def					colorType 2 eq 					{						name null eq 						{							/name spot2/name get def							spot2/name null put						} if					}					{						name null eq {/name /Black def} if					} ifelse			 end			} if	 end	} if		/cData gMark store	setCDataLen	colorType 0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		_eo {eoclip} {clip} ifelse		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/bwImage		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq	{		0	}	{		bDataLen ubAxis div	} ifelse	store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where dup	{		exch pop _compositeSpotDevice 1 ne and	} if	{		0 0 bInc 1 /rectfill cvx		}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		/_fill_ cvx	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	spotColor? {nsetcustomcolorend} if		grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt		{			exch		} if		pop store		/pChange ubAxis 0 eq		{			0		}		{			bDataLen ubAxis div		} ifelse		store		pChange .5 gt noImg not and dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	spotColor? {nsetcustomcolorend} if	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put end} if} bd/Bn{1 add dictdup nullString null put/_bn xs} bd/Bd{Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store			/_fill			{				_of true eq				{					currentgray 1 ne					{						__fill					} if				}				{					__fill				} ifelse			} def	} ifelse	/fill	{	} def	} bd	/BB	{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 kPc1 1 1 1 kPcPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(\203\214\203C\203\204\201[ 1) Ln0 A0 O0 g2 J 0 j 1 w 2 M []0 d194.6001 335.8999 m196.1001 335.7002 197.8999 334.8999 199.5 334.2998 C202.6001 333.7998 205.5 332.8999 208.2002 331.3999 C209.7998 331.1001 210.7002 329.6001 212.7002 329.7998 C214.3999 328.7998 216.3999 328.1001 217.6001 326.7002 C220.1001 326.5 221 323.7002 223.3999 323.3999 C224.2002 322 226.2002 321.2002 226.8999 319.7002 C228.5 319.1001 229.7998 318.5 230.3999 316.7998 C234.8999 314.7998 234.8999 309.5 239 307.1001 C240.7998 305.2002 241.1001 303 243.2002 301.3999 C244.1001 299.7002 245 297.5 246.6001 296.6001 C247.2998 294.1001 250.2998 292 250.7998 289.7998 C250.2002 289.2998 251.2002 289.6001 251.3999 289.2002 C252.6001 287.5 252.5 285 254.5 283.7002 C258.2002 284 261.7002 282.7002 265 284.8999 C267 284.7998 268.7998 286.5 270.8999 287 C274.1001 289 278.2998 288.7002 281.7998 289.7998 c286 290.8999 291.2002 291.2002 295.6001 289.7998 C298.2002 290.6001 300.5 288.3999 303.3999 288.7998 C306.3999 287.8999 309.3999 287.2998 312.5 286.1001 C316.2002 285.8999 319.2002 282.7002 322.7998 281.6001 C324.7998 280.5 326.7998 279.1001 328.7002 277.7002 C329.2002 276.7998 330.7002 276.2002 331.3999 275.2002 C333.5 273.3999 336.2002 271.6001 338.3999 269.8999 C341.1001 266.8999 344.7002 264.3999 347 261 C350.1001 259 351.3999 255 354 252.3999 C354.5 250.7998 355.7998 249.6001 355.8999 247.8999 C357 246.1001 357.7998 244.7002 358.6001 242.7002 C361.1001 238.6001 361.7002 233.2998 363.1001 229 c363.1001 228.7002 363.7998 228.1001 363.2998 227.7002 C362.7002 227.5 363.3999 227.2998 363.5 227.1001 C363.2998 224 363.1001 220.8999 363.5 218.1001 C363 215.8999 363.3999 212.8999 362.1001 210.8999 C362.3999 207.8999 359.8999 205.6001 360.2002 203.2002 C359.3999 202.6001 360.1001 201.2998 359.6001 200.6001 c358.2998 198.3999 358.2002 195.6001 356.1001 194 C355.7998 191.2002 353.6001 188.8999 352.2002 186.7998 C351 183 347 179.2002 345 175.5 C342.7998 174 342.6001 172.1001 340.7002 170.7002 C338.1001 166.2998 332.8999 165.5 330.2002 161.2998 C327.2002 159.7998 324.6001 157.5 321.2998 157 C321.2002 156.7002 320.3999 156.3999 320.8999 156.1001 C320.7002 155.3999 320.3999 153.7998 321.2998 153.1001 c326.5 147.8999 327.6001 140.2998 329.7998 133.5 C329.5 131.7998 330.8999 129 330.3999 127.2998 C332.2002 119.8999 332.2002 113 330.3999 105.1001 C329.2002 104.1001 329.2998 102.2998 328.2998 101.3999 C328.7998 99.5 327.6001 98.2998 327.2998 96.7002 C326 95.6001 325.6001 93.8999 324.3999 92.6001 C324.2002 89.7998 321.6001 87.5 321.1001 84.5 C319.7998 81.6001 317.7002 79.3999 316.2002 76.5 C314.3999 75.1001 313.2998 73.1001 312.5 71.2002 C309.2002 70.7002 309.7998 66.7002 307.1001 65.7998 C305.3999 62.7998 301.3999 61.8999 299.2998 59.5 C299 58.7998 298.3999 58.2998 297.7002 57.7998 c295.1001 56.7002 292.6001 54.7002 290.2998 53.5 c285 50.7002 279.6001 48.3999 274 46.5 c271.3999 45.2998 268.2002 45.2002 265.7998 43.6001 C261.5 43.7998 256.8999 41.7002 252.2002 42.2002 c246.6001 41.7998 241.1001 42.1001 235.7002 41.6001 C235.1001 41.8999 233.3999 41.7002 232.7002 41.7998 c227.2002 41.7002 221.3999 42.5 216.2002 43.3999 C215.3999 44.3999 213.2998 43.2002 212.5 44.3999 C209.7998 45 206.8999 45.7998 204.2998 46.1001 C201.6001 47.6001 198.3999 47.7998 195.3999 48.5 C193.6001 50.1001 191.2002 49.2002 188.7998 50.2002 C186.8999 52.3999 183.6001 51.7002 181.8999 53.8999 C181.1001 54.2002 179.7998 54.2998 179.2002 53.7002 C177.1001 52.2998 177.1001 49.6001 174.7002 48.2998 C174.2998 46.2002 171.6001 43.7002 169.8999 42.6001 C167.1001 37.6001 161.1001 34.7998 157 31.7002 c152.8999 28.2998 147.5 26.2002 142.7998 23.7002 C139.3999 22.6001 135.8999 20.7998 132.1001 20.3999 c128.2002 19.2002 124.6001 17.7002 120.5 17.1001 c112.7002 16 102.6001 15.7998 93.7998 15.6001 C89.3999 14.2998 84.6001 16.2998 80.2002 16 C80.3999 17.7998 80.2998 20.7998 82.7002 21.3999 C83.7998 20.5 84.7998 21.1001 86 21.3999 C86.6001 22.2002 87.6001 21.7002 88.5 21.7998 C91.7002 24.2002 95.8999 24.5 99.2002 26.2998 c104.2002 29.5 107.7998 33.6001 111.8999 37.8999 C114 38.7002 114.2002 41.5 116.2002 42.3999 C116.8999 44.6001 119.2002 45.6001 119.2998 48.1001 C120.6001 49 120.1001 51.2002 121.6001 52 C121.2998 53.3999 123.3999 54 123.2002 55.1001 C123.7002 57.2002 125.5 58.2998 125.7002 60.5 C127.2002 63.2998 127.7002 66.7002 129.2002 69.2998 C129.2998 70.3999 128 70.7998 127.2998 71.2002 C124.7998 71.7998 123.3999 69.3999 121.2002 69.8999 C116.7002 69.1001 113 68 108.3999 69.2998 C103.2002 68.2002 98.2002 68.7998 92.7998 69.5 C90.2998 70.7002 87.7998 69.7002 85 70.6001 C82.5 70.6001 80.5 72.1001 78 72 C75.1001 72.7998 72.5 74.1001 69.5 74.5 c65.5 75.6001 60.8999 76.3999 57.6001 78.6001 C55.7002 78.1001 54.6001 80.2002 53.1001 80 C52.7998 80.2002 52.5 80.8999 52.2998 80.3999 C49.8999 80.6001 48.2998 82.7002 46.1001 83.1001 C42.8999 84.8999 39.2998 87.5 36.6001 90.2998 c34.8999 91.7002 32.6001 93.7998 32.1001 95.8999 C30.3999 96.6001 30.2002 98.6001 29.2002 100 C30.2002 101.2998 28.3999 102.3999 28.2002 103.8999 C26.2998 105.7002 26 108.1001 24.7002 110.1001 C24.7998 110.8999 24.6001 111.7002 24.1001 112.2998 C23.2998 115.1001 23.7002 118.2998 24.5 121 C24 124.5 27.1001 127.2998 27.2002 130.6001 C28.5 132.7998 28.7998 135.6001 30.3999 137.3999 c31.8999 139.5 32.2998 142.2998 34.7998 143.6001 C37.5 148.1001 41.3999 150.7002 45.2998 154.1001 c47.3999 156.2002 51.2002 154.2002 53.1001 156.2998 C54.6001 156.6001 55.2998 156.8999 56.7998 157.2002 C57 158.2002 57.2998 159 56.6001 159.7998 C55.1001 162.2998 52.7002 163.8999 50.2002 165.2002 C49.8999 166.2002 49.2002 166.7998 48.1001 166.7998 C46.1001 167.8999 45.2002 170.1001 42.7998 170.2998 C40.3999 172.6001 38.3999 175 36.2002 177.2998 C36.2002 178.6001 34.8999 178.7998 34.7998 180 C33.2998 181.8999 31.7998 183.6001 31.1001 186 C30 187.6001 30 189.2002 28.6001 190.5 C28.5 192.7998 27.2002 195.3999 27.3999 197.8999 C25.7998 199.2002 27.2998 200.7002 26.1001 202 C26.8999 207.2002 26.3999 211.8999 26.5 216.7998 c26.7998 219.7998 26.5 223.3999 28.3999 226.2998 C27.7998 226.7998 28.2002 227.2002 28.3999 227.8999 C29.8999 230 28.6001 234 31.1001 236.2002 C31.7002 239 33.8999 241.2998 33.8999 244.3999 C34.8999 246.6001 36.3999 248.6001 38.1001 250.3999 c39.8999 251.7998 41.6001 253.7998 43.2002 255.2998 c44 256.3999 44.6001 257.2998 46.1001 257.7998 C47.5 257.7998 48.2998 259.2998 49.6001 259.6001 C52.2002 260.8999 54.6001 262.7002 57.2002 264.1001 C60.8999 265.3999 64.7998 266.6001 68.7002 267.2002 C70.2998 266.7998 71.2002 268.6001 72.6001 268 C78.6001 270 84.3999 268.7002 90.5 268.5 C92.5 267.5 96.2002 268.7998 97.7002 266.7998 c98.7002 265.1001 100.5 266.8999 101.6001 265.3999 C103.2002 264.8999 105.8999 267.3999 106.3999 264.2998 C107.6001 263.8999 108.7002 264.2002 110.1001 264.7998 C111.5 266.2002 112.1001 268.2002 111.8999 270.1001 C112.2998 271.5 112.7002 273.6001 112.5 275.2002 C113.3999 276.3999 112.3999 278.5 114.2002 279.2002 C113.2002 283 115.7998 286.2998 116.2002 290.1001 C117.3999 292.7002 118.3999 296.1001 120.2998 298.5 C121.3999 300.5 121.5 303.2002 123.3999 304.7002 C123.5 307.2002 126.3999 307.8999 126.5 310.3999 C128.5 311.7002 128.3999 313.7998 130.6001 314.8999 C131.2002 316.2002 132.2998 317.1001 133.5 318 c134.2002 318.7002 135.3999 319 135.6001 320.1001 C137.7002 321.2002 139.2998 323.3999 141.7002 324.2002 C144.2998 327 147.8999 329.6001 151.6001 330 C153.2002 332.7998 156.7002 332 158.7998 333.8999 C161.8999 334.3999 165 336 168.2998 336.5 c174.6001 337.6001 180.8999 338.7002 187.3999 337.3999 C189.7998 336.2998 192.1001 336.8999 194.6001 335.8999 Cf1 g187.3999 328.2998 m191.1001 328.7998 192.8999 326.7002 196.2998 326.5 C199.1001 325.7002 202.2998 323.8999 205.7002 323.3999 C207.5 322.6001 209.1001 321.2998 211.1001 320.8999 C212 319.1001 214.8999 319.3999 215.7998 317.3999 C217.2998 316.6001 219 315.5 219.8999 314.2998 C221.7002 313.7998 223.3999 311.7998 224.7998 310.3999 C226.2998 307.8999 229.6001 306 230.7998 303.6001 C234 300.7002 236.2002 296.1001 239.2002 293.2998 C243.5 287.2998 246.5 281 249.5 274.6001 c250.7002 272.6001 249.5 269.6001 252.3999 268.2002 c253.3999 267.7998 254.5 268.2002 255.2998 268.7002 C259.1001 273 262.3999 277.8999 268 280 c272.3999 281.5 276.8999 283.7002 282 283.7002 C282.7998 284.3999 284 284 284.7002 284.7002 C288.2998 284.2998 292.3999 284.7002 296 284.2998 C296.3999 284.3999 297 284 297.5 283.8999 C301.2002 284.5 303.6001 282 307.1001 282 C309.7002 280.8999 312.2998 280.2002 314.7002 278.7002 C316.1001 279.1001 316.7998 277.6001 317.6001 277.2998 C320.1001 276.7002 322.3999 275.2998 324.3999 274 C325 272.8999 326.2998 272 327.5 271.5 C331.5 268.6001 335 265.1001 339 261.8999 c342.2998 260 343.2998 256.5 346.3999 254.2998 C346.7002 252.5 348.6001 252 348.8999 250.1001 C351.2002 249.2002 351 246.5 352.3999 245.3999 C352.2002 243.7998 354.6001 243.5 354 241.8999 C355 240.7002 354.6001 238.8999 355.7002 237.7998 C357.6001 231.7002 358.6001 226.8999 359.6001 220.8999 C358.3999 216.7002 358.7998 212.7002 358.1001 208.3999 c357.7998 207.2002 357.2002 206 356.7002 204.8999 c356.2002 202.8999 355.6001 200.7998 354.6001 199.1001 c353.6001 196.2002 351.1001 193.8999 350.1001 190.8999 C350.2002 189.2002 347.7002 188.7002 347.7002 186.7998 C345.2998 183.2002 342.2998 179.8999 340.7002 176.1001 C339.7002 175.1001 338.2002 174 337.2002 173 C336.6001 171.3999 334.8999 171.1001 334.2998 169.7002 C332.5 169.7002 332.3999 166.8999 330.7998 167.5 C330.2002 165.6001 328 165.7002 326.8999 164.3999 C323.5 162.1001 319.3999 160.7998 315.2002 160.2998 C313.2002 159.6001 311.6001 157.7998 310.7998 156.1001 C311.1001 152.5 314.8999 151.7002 316.7998 149.1001 c318.7002 146.1001 320.6001 142.7998 322.1001 139.5 C322 138.8999 322.3999 138.6001 322.7998 138.2002 C322.7002 136.3999 323.6001 134.7002 323.6001 133.1001 C325.1001 131 323.8999 128.3999 325.3999 126.2998 C326.1001 119.7998 328 114.2998 325.2002 108.2002 C325.5 106.7998 323.8999 106.1001 324.2002 104.7002 C322.7002 100.8999 320.2998 98.1001 319.5 94 C318.6001 92.2998 318 90.1001 316.7998 88.2998 C317.1001 87.2002 315.7002 87.3999 316.2002 86.2002 C313.6001 84.2998 313.5 80.7998 311 78.7998 c310.3999 78.2002 310.7998 76.7998 309.7998 76.7002 C306.2998 72.7002 303.3999 67.7998 298.5 65.3999 C295.5 63.2002 293 60.7998 289.7998 59.5 C288.1001 59.2002 287.1001 56.8999 285.1001 57.2002 C281.6001 55.2998 278.2002 53.5 274.3999 52.2998 c272.7002 51.3999 270.6001 51.5 268.8999 50.6001 c264.6001 48.6001 259.5 48.7002 255.1001 47.2998 C250.5 47.8999 246.6001 46.7002 242.1001 47.1001 C240.1001 48 237.7002 47.1001 235.5 47.1001 C233.7002 48 231.5 46.7002 229.3999 47.7002 C224.2002 48.2002 219.1001 49.8999 213.8999 51 C210.7998 52.7998 206.8999 51.5 204.1001 53.8999 C201.2002 54.5 198.1001 55 195.7998 56.6001 C192.1001 57.2998 189.7002 59.6001 186 60.5 C184.7002 62.7998 181.7998 62 180.7998 64.2002 C179 65.1001 177.2002 66.6001 175.1001 66 C173.6001 65.2002 172.5 64 171.6001 62.7002 C172.1001 59.7002 171.7002 55.5 169.5 52.8999 C167.5 47.5 162.8999 43 158.3999 40.1001 C157.1001 38.7002 155.1001 37.7998 153.8999 36.2002 C151.7998 35.8999 151.3999 34.3999 149.2998 34.1001 C142.2002 28.8999 134.2998 27.1001 126.2998 24.1001 C121.3999 23.5 117.3999 22 112.5 21.7998 c110.8999 21.6001 108.3999 22.2998 107 21.2002 C105.1001 22 103.7002 20.3999 101.6001 21.2002 C100.6001 23.5 103.2998 24.3999 104.2998 25.8999 C108.2998 27.7998 109.2002 32.2998 113.1001 34.3999 C115.5 36.8999 117.6001 40.7998 120.1001 43.7998 C119.8999 45.7998 123 47 123 49 C123.7002 50.5 124.2998 52 125.5 53.2998 C125.6001 55.7002 127.5 57.6001 128 59.7002 C129.2002 60.6001 128 61.7002 129.3999 62.5 C129 63.3999 130.3999 63.6001 130.2002 64.3999 C131.2998 68.2998 132.6001 71.8999 133.8999 75.5 C133.7002 77.7998 133.7998 80.2998 132.2998 82.1001 C127.1001 83.3999 124.5 77.5 119.2998 77.6001 C117.2002 75.6001 114.2002 77.7998 112.1001 75.8999 C106.3999 75.7998 101.8999 75.7002 96.1001 76.2998 C94.1001 76 92 76.8999 90.1001 76.7002 C87.2998 77.2998 85.2002 78.1001 82.5 78.3999 c78.7002 79.3999 75 80.7998 71.2002 81.7002 c68.3999 82.5 65.7998 84.2998 63.2002 84.7998 c61.5 85 60.5 86.7998 58.6001 86.3999 C56.2002 88.7998 52.8999 89.5 50.2002 92 C48.7998 92.6001 48 93.8999 46.7002 94.2002 C44.2998 96.1001 42.3999 97.8999 40.1001 100.2002 C39.2002 101.5 39.3999 102.5 38.5 103.8999 C38.7998 105.7002 36.7002 106.5 36.7998 108.2002 C36 109.8999 35.6001 112 33.8999 113.6001 C34.1001 119.2998 32.3999 125.2002 36.2002 130 c37.6001 131.8999 37.5 134.7002 39.5 136 C39.2998 137.5 41 138.3999 41.6001 139.5 c42.6001 141.6001 45.8999 142.7002 47.1001 144.7998 C48 145.8999 49.7998 145.2002 50.3999 146.7002 C52 146.8999 52.8999 148.7002 54.7002 148.2998 C56.2998 150.5 59.2998 149.5 61.1001 151.2002 C64.2998 151.6001 69.2002 151.5 70.3999 155.2998 C70.3999 159.2998 66.5 161.8999 63.6001 164 c61.5 165.2998 59.2998 167 57.2002 167.8999 C56.2998 169 54.8999 169.8999 53.5 170.2998 C53.7002 171.1001 52.7998 171 52.5 171.3999 c47.6001 175.1001 41.2002 179.5 37.6001 184.7002 C35.6001 190.1001 30.5 194.7998 31.1001 201.2002 C29.7998 206.6001 31 211.7998 29.7998 217.3999 C30.5 219.2998 30 221.8999 31.1001 223.3999 C30.2998 226.2998 32.2998 228.5 32.5 231.2002 C35.3999 234 33.3999 238.3999 36.6001 241.2998 c38.2002 242.5 38.8999 245 40.2998 246.3999 C41.1001 246.8999 42 247.8999 42.2002 248.8999 C44.2002 250.6001 47 251 48.5 253.3999 C50.8999 254.6001 53 256 54.7002 257.7998 C58.6001 258.7002 62.7998 259.8999 66.7002 261.5 c71.8999 262.8999 76.1001 263.2002 81.8999 263.2998 c84.7998 263 87.1001 261.3999 90.2998 261.8999 C91.1001 261.2002 92.6001 261.5 93.2002 260.7998 C94.7998 261.5 95.3999 259.7002 96.8999 260 C98.2002 258.8999 100.7002 260 101.3999 258 C105.7998 256.1001 110.3999 254 114.3999 251.6001 c118.1001 249.8999 122.2002 252.6001 125.1001 254.8999 C126.5 257.7998 127.7002 260.8999 128.3999 264.1001 C128 264.7002 128.1001 265.5 128.6001 266 C128.5 267.1001 129.8999 266.3999 130.3999 267 C131.3999 267.5 132 268.7002 131.5 269.7002 c130.7002 271.1001 129.5 270.3999 128.3999 270.2998 C127.2998 269.6001 125.8999 270.7002 124.7002 270.8999 C124.2998 272 122.8999 272.7998 123.3999 274 C122.7998 274.3999 122.3999 274.7998 122.6001 275.7002 C122.7998 275.7998 122.7998 275.8999 122.6001 276.1001 C122 274.7998 122 276.1001 122.6001 276.5 C123.2998 277.8999 121.2002 279.5 123 280.6001 C123.2998 282.7998 123.2002 285.2998 124.7002 286.7998 C124.6001 287.3999 125.7002 288 125.2998 289 C127.8999 291.7002 127.2998 295.7998 129.7998 298.2998 C130.2002 300.2002 132.2998 301.7998 132.2998 303.6001 C134.5 306.6001 136.3999 308 138.3999 311 c139.5 312.7998 142 315.1001 144 316 C146.2998 319.7002 150.8999 320.3999 154.1001 323.2002 C156.5 324.1001 159 325.6001 161.5 325.7998 C163.3999 327.2998 165.8999 327.2002 167.8999 328.2998 C171.7998 328.2002 175.5 330.2002 179.6001 329.7998 c181.7002 329.7002 184.5 329.1001 187 328.7002 C187.1001 328.6001 187.2998 328.5 187.3999 328.2998 Cf121.7998 277.7002 m121.7998 277.3999 121.8999 277.2002 122 276.8999 C121.7998 277.1001 121.7002 277.2998 121.7998 277.7002 Cf0 g13.3999 84.2998 m13.2002 84.3999 12.7998 84.2998 13.2002 84.5 C13.2998 84.6001 13.3999 84.5 13.3999 84.2998 CfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF